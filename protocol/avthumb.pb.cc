// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avthumb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "avthumb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace avthumb {
class ResizeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeRequest> {
} _ResizeRequest_default_instance_;
class ResizeReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeReply> {
} _ResizeReply_default_instance_;
class ConstraintRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConstraintRequest> {
} _ConstraintRequest_default_instance_;
class ConstraintReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConstraintReply> {
} _ConstraintReply_default_instance_;
class CompressImageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompressImageRequest> {
} _CompressImageRequest_default_instance_;
class CompressImageReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompressImageReply> {
} _CompressImageReply_default_instance_;
class VideoPreviewRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoPreviewRequest> {
} _VideoPreviewRequest_default_instance_;
class VideoPreviewReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoPreviewReply> {
} _VideoPreviewReply_default_instance_;
class AudioPreviewRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioPreviewRequest> {
} _AudioPreviewRequest_default_instance_;
class AudioPreviewReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioPreviewReply> {
} _AudioPreviewReply_default_instance_;

namespace protobuf_avthumb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeRequest, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeRequest, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeReply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintRequest, max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintRequest, output_webp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, origin_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintReply, origin_height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressImageRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressImageRequest, quality_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressImageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressImageReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressImageReply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewRequest, max_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewReply, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewReply, preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewReply, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPreviewReply, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewRequest, max_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, cover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioPreviewReply, height_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ResizeRequest)},
  { 7, -1, sizeof(ResizeReply)},
  { 13, -1, sizeof(ConstraintRequest)},
  { 20, -1, sizeof(ConstraintReply)},
  { 30, -1, sizeof(CompressImageRequest)},
  { 36, -1, sizeof(CompressImageReply)},
  { 42, -1, sizeof(VideoPreviewRequest)},
  { 48, -1, sizeof(VideoPreviewReply)},
  { 57, -1, sizeof(AudioPreviewRequest)},
  { 63, -1, sizeof(AudioPreviewReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConstraintRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConstraintReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressImageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressImageReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoPreviewRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoPreviewReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioPreviewRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioPreviewReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "avthumb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _ResizeRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ResizeReply_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ConstraintRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConstraintReply_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CompressImageRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CompressImageReply_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _VideoPreviewRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _VideoPreviewReply_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _AudioPreviewRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _AudioPreviewReply_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ResizeRequest_default_instance_.DefaultConstruct();
  _ResizeReply_default_instance_.DefaultConstruct();
  _ConstraintRequest_default_instance_.DefaultConstruct();
  _ConstraintReply_default_instance_.DefaultConstruct();
  _CompressImageRequest_default_instance_.DefaultConstruct();
  _CompressImageReply_default_instance_.DefaultConstruct();
  _VideoPreviewRequest_default_instance_.DefaultConstruct();
  _VideoPreviewReply_default_instance_.DefaultConstruct();
  _AudioPreviewRequest_default_instance_.DefaultConstruct();
  _AudioPreviewReply_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ravthumb.proto\022\007avthumb\"<\n\rResizeReques"
      "t\022\014\n\004data\030\001 \001(\014\022\r\n\005width\030\002 \001(\r\022\016\n\006height"
      "\030\003 \001(\r\"@\n\013ResizeReply\022#\n\006status\030\001 \001(\0162\023."
      "avthumb.StatusCode\022\014\n\004data\030\002 \001(\014\"H\n\021Cons"
      "traintRequest\022\014\n\004data\030\001 \001(\014\022\020\n\010max_size\030"
      "\002 \001(\r\022\023\n\013output_webp\030\003 \001(\010\"\220\001\n\017Constrain"
      "tReply\022#\n\006status\030\001 \001(\0162\023.avthumb.StatusC"
      "ode\022\014\n\004data\030\002 \001(\014\022\r\n\005width\030\003 \001(\r\022\016\n\006heig"
      "ht\030\004 \001(\r\022\024\n\014origin_width\030\005 \001(\r\022\025\n\rorigin"
      "_height\030\006 \001(\r\"5\n\024CompressImageRequest\022\014\n"
      "\004data\030\001 \001(\014\022\017\n\007quality\030\002 \001(\r\"G\n\022Compress"
      "ImageReply\022#\n\006status\030\001 \001(\0162\023.avthumb.Sta"
      "tusCode\022\014\n\004data\030\002 \001(\014\"5\n\023VideoPreviewReq"
      "uest\022\014\n\004data\030\001 \001(\014\022\020\n\010max_size\030\002 \001(\r\"z\n\021"
      "VideoPreviewReply\022#\n\006status\030\001 \001(\0162\023.avth"
      "umb.StatusCode\022\020\n\010duration\030\002 \001(\r\022\017\n\007prev"
      "iew\030\003 \001(\014\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r"
      "\"5\n\023AudioPreviewRequest\022\014\n\004data\030\001 \001(\014\022\020\n"
      "\010max_size\030\002 \001(\r\"\227\001\n\021AudioPreviewReply\022#\n"
      "\006status\030\001 \001(\0162\023.avthumb.StatusCode\022\020\n\010du"
      "ration\030\002 \001(\r\022\r\n\005cover\030\003 \001(\014\022\r\n\005title\030\004 \001"
      "(\t\022\016\n\006artist\030\005 \001(\t\022\r\n\005width\030\006 \001(\r\022\016\n\006hei"
      "ght\030\007 \001(\r*2\n\nStatusCode\022\020\n\014StatusCodeOK\020"
      "\000\022\022\n\016StatusCodeFail\020\0012\366\002\n\007AVThumb\0228\n\006Res"
      "ize\022\026.avthumb.ResizeRequest\032\024.avthumb.Re"
      "sizeReply\"\000\022D\n\nConstraint\022\032.avthumb.Cons"
      "traintRequest\032\030.avthumb.ConstraintReply\""
      "\000\022M\n\rCompressImage\022\035.avthumb.CompressIma"
      "geRequest\032\033.avthumb.CompressImageReply\"\000"
      "\022M\n\017GetVideoPreview\022\034.avthumb.VideoPrevi"
      "ewRequest\032\032.avthumb.VideoPreviewReply\"\000\022"
      "M\n\017GetAudioPreview\022\034.avthumb.AudioPrevie"
      "wRequest\032\032.avthumb.AudioPreviewReply\"\000b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "avthumb.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_avthumb_2eproto

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_enum_descriptors[0];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeRequest::kDataFieldNumber;
const int ResizeRequest::kWidthFieldNumber;
const int ResizeRequest::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeRequest::ResizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.ResizeRequest)
}
ResizeRequest::ResizeRequest(const ResizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:avthumb.ResizeRequest)
}

void ResizeRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

ResizeRequest::~ResizeRequest() {
  // @@protoc_insertion_point(destructor:avthumb.ResizeRequest)
  SharedDtor();
}

void ResizeRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeRequest::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[0].descriptor;
}

const ResizeRequest& ResizeRequest::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeRequest* ResizeRequest::New(::google::protobuf::Arena* arena) const {
  ResizeRequest* n = new ResizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.ResizeRequest)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

bool ResizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.ResizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.ResizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.ResizeRequest)
  return false;
#undef DO_
}

void ResizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.ResizeRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.ResizeRequest)
}

::google::protobuf::uint8* ResizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.ResizeRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.ResizeRequest)
  return target;
}

size_t ResizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.ResizeRequest)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.ResizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.ResizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.ResizeRequest)
    MergeFrom(*source);
  }
}

void ResizeRequest::MergeFrom(const ResizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.ResizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void ResizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.ResizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeRequest::CopyFrom(const ResizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.ResizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeRequest::IsInitialized() const {
  return true;
}

void ResizeRequest::Swap(ResizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeRequest::InternalSwap(ResizeRequest* other) {
  data_.Swap(&other->data_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeRequest::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeRequest

// bytes data = 1;
void ResizeRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResizeRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeRequest.data)
  return data_.GetNoArena();
}
void ResizeRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ResizeRequest.data)
}
#if LANG_CXX11
void ResizeRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ResizeRequest.data)
}
#endif
void ResizeRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ResizeRequest.data)
}
void ResizeRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ResizeRequest.data)
}
::std::string* ResizeRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ResizeRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResizeRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ResizeRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResizeRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ResizeRequest.data)
}

// uint32 width = 2;
void ResizeRequest::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 ResizeRequest::width() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeRequest.width)
  return width_;
}
void ResizeRequest::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ResizeRequest.width)
}

// uint32 height = 3;
void ResizeRequest::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 ResizeRequest::height() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeRequest.height)
  return height_;
}
void ResizeRequest::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ResizeRequest.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeReply::kStatusFieldNumber;
const int ResizeReply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeReply::ResizeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.ResizeReply)
}
ResizeReply::ResizeReply(const ResizeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:avthumb.ResizeReply)
}

void ResizeReply::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

ResizeReply::~ResizeReply() {
  // @@protoc_insertion_point(destructor:avthumb.ResizeReply)
  SharedDtor();
}

void ResizeReply::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResizeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeReply::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[1].descriptor;
}

const ResizeReply& ResizeReply::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeReply* ResizeReply::New(::google::protobuf::Arena* arena) const {
  ResizeReply* n = new ResizeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.ResizeReply)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

bool ResizeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.ResizeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .avthumb.StatusCode status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::avthumb::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.ResizeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.ResizeReply)
  return false;
#undef DO_
}

void ResizeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.ResizeReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.ResizeReply)
}

::google::protobuf::uint8* ResizeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.ResizeReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.ResizeReply)
  return target;
}

size_t ResizeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.ResizeReply)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.ResizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.ResizeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.ResizeReply)
    MergeFrom(*source);
  }
}

void ResizeReply::MergeFrom(const ResizeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.ResizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ResizeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.ResizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeReply::CopyFrom(const ResizeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.ResizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeReply::IsInitialized() const {
  return true;
}

void ResizeReply::Swap(ResizeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeReply::InternalSwap(ResizeReply* other) {
  data_.Swap(&other->data_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeReply::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeReply

// .avthumb.StatusCode status = 1;
void ResizeReply::clear_status() {
  status_ = 0;
}
::avthumb::StatusCode ResizeReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
void ResizeReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ResizeReply.status)
}

// bytes data = 2;
void ResizeReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResizeReply::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeReply.data)
  return data_.GetNoArena();
}
void ResizeReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ResizeReply.data)
}
#if LANG_CXX11
void ResizeReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ResizeReply.data)
}
#endif
void ResizeReply::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ResizeReply.data)
}
void ResizeReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ResizeReply.data)
}
::std::string* ResizeReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ResizeReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResizeReply::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ResizeReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResizeReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ResizeReply.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstraintRequest::kDataFieldNumber;
const int ConstraintRequest::kMaxSizeFieldNumber;
const int ConstraintRequest::kOutputWebpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstraintRequest::ConstraintRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.ConstraintRequest)
}
ConstraintRequest::ConstraintRequest(const ConstraintRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&max_size_, &from.max_size_,
    reinterpret_cast<char*>(&output_webp_) -
    reinterpret_cast<char*>(&max_size_) + sizeof(output_webp_));
  // @@protoc_insertion_point(copy_constructor:avthumb.ConstraintRequest)
}

void ConstraintRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_size_, 0, reinterpret_cast<char*>(&output_webp_) -
    reinterpret_cast<char*>(&max_size_) + sizeof(output_webp_));
  _cached_size_ = 0;
}

ConstraintRequest::~ConstraintRequest() {
  // @@protoc_insertion_point(destructor:avthumb.ConstraintRequest)
  SharedDtor();
}

void ConstraintRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConstraintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintRequest::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[2].descriptor;
}

const ConstraintRequest& ConstraintRequest::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConstraintRequest* ConstraintRequest::New(::google::protobuf::Arena* arena) const {
  ConstraintRequest* n = new ConstraintRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstraintRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.ConstraintRequest)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_size_, 0, reinterpret_cast<char*>(&output_webp_) -
    reinterpret_cast<char*>(&max_size_) + sizeof(output_webp_));
}

bool ConstraintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.ConstraintRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool output_webp = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_webp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.ConstraintRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.ConstraintRequest)
  return false;
#undef DO_
}

void ConstraintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.ConstraintRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_size(), output);
  }

  // bool output_webp = 3;
  if (this->output_webp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->output_webp(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.ConstraintRequest)
}

::google::protobuf::uint8* ConstraintRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.ConstraintRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_size(), target);
  }

  // bool output_webp = 3;
  if (this->output_webp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->output_webp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.ConstraintRequest)
  return target;
}

size_t ConstraintRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.ConstraintRequest)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_size());
  }

  // bool output_webp = 3;
  if (this->output_webp() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.ConstraintRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstraintRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.ConstraintRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.ConstraintRequest)
    MergeFrom(*source);
  }
}

void ConstraintRequest::MergeFrom(const ConstraintRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.ConstraintRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
  if (from.output_webp() != 0) {
    set_output_webp(from.output_webp());
  }
}

void ConstraintRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.ConstraintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintRequest::CopyFrom(const ConstraintRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.ConstraintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintRequest::IsInitialized() const {
  return true;
}

void ConstraintRequest::Swap(ConstraintRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstraintRequest::InternalSwap(ConstraintRequest* other) {
  data_.Swap(&other->data_);
  std::swap(max_size_, other->max_size_);
  std::swap(output_webp_, other->output_webp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstraintRequest::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstraintRequest

// bytes data = 1;
void ConstraintRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConstraintRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintRequest.data)
  return data_.GetNoArena();
}
void ConstraintRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ConstraintRequest.data)
}
#if LANG_CXX11
void ConstraintRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ConstraintRequest.data)
}
#endif
void ConstraintRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ConstraintRequest.data)
}
void ConstraintRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ConstraintRequest.data)
}
::std::string* ConstraintRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ConstraintRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConstraintRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ConstraintRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConstraintRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ConstraintRequest.data)
}

// uint32 max_size = 2;
void ConstraintRequest::clear_max_size() {
  max_size_ = 0u;
}
::google::protobuf::uint32 ConstraintRequest::max_size() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintRequest.max_size)
  return max_size_;
}
void ConstraintRequest::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintRequest.max_size)
}

// bool output_webp = 3;
void ConstraintRequest::clear_output_webp() {
  output_webp_ = false;
}
bool ConstraintRequest::output_webp() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintRequest.output_webp)
  return output_webp_;
}
void ConstraintRequest::set_output_webp(bool value) {
  
  output_webp_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintRequest.output_webp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstraintReply::kStatusFieldNumber;
const int ConstraintReply::kDataFieldNumber;
const int ConstraintReply::kWidthFieldNumber;
const int ConstraintReply::kHeightFieldNumber;
const int ConstraintReply::kOriginWidthFieldNumber;
const int ConstraintReply::kOriginHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstraintReply::ConstraintReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.ConstraintReply)
}
ConstraintReply::ConstraintReply(const ConstraintReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&origin_height_) -
    reinterpret_cast<char*>(&status_) + sizeof(origin_height_));
  // @@protoc_insertion_point(copy_constructor:avthumb.ConstraintReply)
}

void ConstraintReply::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&origin_height_) -
    reinterpret_cast<char*>(&status_) + sizeof(origin_height_));
  _cached_size_ = 0;
}

ConstraintReply::~ConstraintReply() {
  // @@protoc_insertion_point(destructor:avthumb.ConstraintReply)
  SharedDtor();
}

void ConstraintReply::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConstraintReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintReply::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[3].descriptor;
}

const ConstraintReply& ConstraintReply::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConstraintReply* ConstraintReply::New(::google::protobuf::Arena* arena) const {
  ConstraintReply* n = new ConstraintReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstraintReply::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.ConstraintReply)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&origin_height_) -
    reinterpret_cast<char*>(&status_) + sizeof(origin_height_));
}

bool ConstraintReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.ConstraintReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .avthumb.StatusCode status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::avthumb::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 origin_width = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 origin_height = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.ConstraintReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.ConstraintReply)
  return false;
#undef DO_
}

void ConstraintReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.ConstraintReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // uint32 origin_width = 5;
  if (this->origin_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->origin_width(), output);
  }

  // uint32 origin_height = 6;
  if (this->origin_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin_height(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.ConstraintReply)
}

::google::protobuf::uint8* ConstraintReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.ConstraintReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // uint32 origin_width = 5;
  if (this->origin_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->origin_width(), target);
  }

  // uint32 origin_height = 6;
  if (this->origin_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin_height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.ConstraintReply)
  return target;
}

size_t ConstraintReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.ConstraintReply)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 origin_width = 5;
  if (this->origin_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->origin_width());
  }

  // uint32 origin_height = 6;
  if (this->origin_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->origin_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.ConstraintReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstraintReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.ConstraintReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.ConstraintReply)
    MergeFrom(*source);
  }
}

void ConstraintReply::MergeFrom(const ConstraintReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.ConstraintReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.origin_width() != 0) {
    set_origin_width(from.origin_width());
  }
  if (from.origin_height() != 0) {
    set_origin_height(from.origin_height());
  }
}

void ConstraintReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.ConstraintReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintReply::CopyFrom(const ConstraintReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.ConstraintReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintReply::IsInitialized() const {
  return true;
}

void ConstraintReply::Swap(ConstraintReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstraintReply::InternalSwap(ConstraintReply* other) {
  data_.Swap(&other->data_);
  std::swap(status_, other->status_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(origin_width_, other->origin_width_);
  std::swap(origin_height_, other->origin_height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstraintReply::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstraintReply

// .avthumb.StatusCode status = 1;
void ConstraintReply::clear_status() {
  status_ = 0;
}
::avthumb::StatusCode ConstraintReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
void ConstraintReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.status)
}

// bytes data = 2;
void ConstraintReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConstraintReply::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.data)
  return data_.GetNoArena();
}
void ConstraintReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.data)
}
#if LANG_CXX11
void ConstraintReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ConstraintReply.data)
}
#endif
void ConstraintReply::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ConstraintReply.data)
}
void ConstraintReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ConstraintReply.data)
}
::std::string* ConstraintReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ConstraintReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConstraintReply::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ConstraintReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConstraintReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ConstraintReply.data)
}

// uint32 width = 3;
void ConstraintReply::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 ConstraintReply::width() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.width)
  return width_;
}
void ConstraintReply::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.width)
}

// uint32 height = 4;
void ConstraintReply::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 ConstraintReply::height() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.height)
  return height_;
}
void ConstraintReply::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.height)
}

// uint32 origin_width = 5;
void ConstraintReply::clear_origin_width() {
  origin_width_ = 0u;
}
::google::protobuf::uint32 ConstraintReply::origin_width() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.origin_width)
  return origin_width_;
}
void ConstraintReply::set_origin_width(::google::protobuf::uint32 value) {
  
  origin_width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.origin_width)
}

// uint32 origin_height = 6;
void ConstraintReply::clear_origin_height() {
  origin_height_ = 0u;
}
::google::protobuf::uint32 ConstraintReply::origin_height() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.origin_height)
  return origin_height_;
}
void ConstraintReply::set_origin_height(::google::protobuf::uint32 value) {
  
  origin_height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.origin_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressImageRequest::kDataFieldNumber;
const int CompressImageRequest::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressImageRequest::CompressImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.CompressImageRequest)
}
CompressImageRequest::CompressImageRequest(const CompressImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  quality_ = from.quality_;
  // @@protoc_insertion_point(copy_constructor:avthumb.CompressImageRequest)
}

void CompressImageRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 0u;
  _cached_size_ = 0;
}

CompressImageRequest::~CompressImageRequest() {
  // @@protoc_insertion_point(destructor:avthumb.CompressImageRequest)
  SharedDtor();
}

void CompressImageRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompressImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressImageRequest::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[4].descriptor;
}

const CompressImageRequest& CompressImageRequest::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressImageRequest* CompressImageRequest::New(::google::protobuf::Arena* arena) const {
  CompressImageRequest* n = new CompressImageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.CompressImageRequest)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 0u;
}

bool CompressImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.CompressImageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quality = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.CompressImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.CompressImageRequest)
  return false;
#undef DO_
}

void CompressImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.CompressImageRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 quality = 2;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.CompressImageRequest)
}

::google::protobuf::uint8* CompressImageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.CompressImageRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 quality = 2;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.CompressImageRequest)
  return target;
}

size_t CompressImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.CompressImageRequest)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 quality = 2;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.CompressImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressImageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressImageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.CompressImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.CompressImageRequest)
    MergeFrom(*source);
  }
}

void CompressImageRequest::MergeFrom(const CompressImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.CompressImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void CompressImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.CompressImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressImageRequest::CopyFrom(const CompressImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.CompressImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressImageRequest::IsInitialized() const {
  return true;
}

void CompressImageRequest::Swap(CompressImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressImageRequest::InternalSwap(CompressImageRequest* other) {
  data_.Swap(&other->data_);
  std::swap(quality_, other->quality_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressImageRequest::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressImageRequest

// bytes data = 1;
void CompressImageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompressImageRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageRequest.data)
  return data_.GetNoArena();
}
void CompressImageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.CompressImageRequest.data)
}
#if LANG_CXX11
void CompressImageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.CompressImageRequest.data)
}
#endif
void CompressImageRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.CompressImageRequest.data)
}
void CompressImageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.CompressImageRequest.data)
}
::std::string* CompressImageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.CompressImageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompressImageRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.CompressImageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompressImageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.CompressImageRequest.data)
}

// uint32 quality = 2;
void CompressImageRequest::clear_quality() {
  quality_ = 0u;
}
::google::protobuf::uint32 CompressImageRequest::quality() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageRequest.quality)
  return quality_;
}
void CompressImageRequest::set_quality(::google::protobuf::uint32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:avthumb.CompressImageRequest.quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressImageReply::kStatusFieldNumber;
const int CompressImageReply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressImageReply::CompressImageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.CompressImageReply)
}
CompressImageReply::CompressImageReply(const CompressImageReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:avthumb.CompressImageReply)
}

void CompressImageReply::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

CompressImageReply::~CompressImageReply() {
  // @@protoc_insertion_point(destructor:avthumb.CompressImageReply)
  SharedDtor();
}

void CompressImageReply::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompressImageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressImageReply::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[5].descriptor;
}

const CompressImageReply& CompressImageReply::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressImageReply* CompressImageReply::New(::google::protobuf::Arena* arena) const {
  CompressImageReply* n = new CompressImageReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressImageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.CompressImageReply)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

bool CompressImageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.CompressImageReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .avthumb.StatusCode status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::avthumb::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.CompressImageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.CompressImageReply)
  return false;
#undef DO_
}

void CompressImageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.CompressImageReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.CompressImageReply)
}

::google::protobuf::uint8* CompressImageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.CompressImageReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.CompressImageReply)
  return target;
}

size_t CompressImageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.CompressImageReply)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressImageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.CompressImageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressImageReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressImageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.CompressImageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.CompressImageReply)
    MergeFrom(*source);
  }
}

void CompressImageReply::MergeFrom(const CompressImageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.CompressImageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CompressImageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.CompressImageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressImageReply::CopyFrom(const CompressImageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.CompressImageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressImageReply::IsInitialized() const {
  return true;
}

void CompressImageReply::Swap(CompressImageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressImageReply::InternalSwap(CompressImageReply* other) {
  data_.Swap(&other->data_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressImageReply::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressImageReply

// .avthumb.StatusCode status = 1;
void CompressImageReply::clear_status() {
  status_ = 0;
}
::avthumb::StatusCode CompressImageReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
void CompressImageReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.CompressImageReply.status)
}

// bytes data = 2;
void CompressImageReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompressImageReply::data() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageReply.data)
  return data_.GetNoArena();
}
void CompressImageReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.CompressImageReply.data)
}
#if LANG_CXX11
void CompressImageReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.CompressImageReply.data)
}
#endif
void CompressImageReply::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.CompressImageReply.data)
}
void CompressImageReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.CompressImageReply.data)
}
::std::string* CompressImageReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.CompressImageReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompressImageReply::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.CompressImageReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompressImageReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.CompressImageReply.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPreviewRequest::kDataFieldNumber;
const int VideoPreviewRequest::kMaxSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPreviewRequest::VideoPreviewRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.VideoPreviewRequest)
}
VideoPreviewRequest::VideoPreviewRequest(const VideoPreviewRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  max_size_ = from.max_size_;
  // @@protoc_insertion_point(copy_constructor:avthumb.VideoPreviewRequest)
}

void VideoPreviewRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
  _cached_size_ = 0;
}

VideoPreviewRequest::~VideoPreviewRequest() {
  // @@protoc_insertion_point(destructor:avthumb.VideoPreviewRequest)
  SharedDtor();
}

void VideoPreviewRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoPreviewRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoPreviewRequest::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[6].descriptor;
}

const VideoPreviewRequest& VideoPreviewRequest::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoPreviewRequest* VideoPreviewRequest::New(::google::protobuf::Arena* arena) const {
  VideoPreviewRequest* n = new VideoPreviewRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoPreviewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.VideoPreviewRequest)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
}

bool VideoPreviewRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.VideoPreviewRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.VideoPreviewRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.VideoPreviewRequest)
  return false;
#undef DO_
}

void VideoPreviewRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.VideoPreviewRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.VideoPreviewRequest)
}

::google::protobuf::uint8* VideoPreviewRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.VideoPreviewRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.VideoPreviewRequest)
  return target;
}

size_t VideoPreviewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.VideoPreviewRequest)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPreviewRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.VideoPreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoPreviewRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoPreviewRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.VideoPreviewRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.VideoPreviewRequest)
    MergeFrom(*source);
  }
}

void VideoPreviewRequest::MergeFrom(const VideoPreviewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.VideoPreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
}

void VideoPreviewRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.VideoPreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoPreviewRequest::CopyFrom(const VideoPreviewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.VideoPreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPreviewRequest::IsInitialized() const {
  return true;
}

void VideoPreviewRequest::Swap(VideoPreviewRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPreviewRequest::InternalSwap(VideoPreviewRequest* other) {
  data_.Swap(&other->data_);
  std::swap(max_size_, other->max_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoPreviewRequest::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPreviewRequest

// bytes data = 1;
void VideoPreviewRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoPreviewRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewRequest.data)
  return data_.GetNoArena();
}
void VideoPreviewRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewRequest.data)
}
#if LANG_CXX11
void VideoPreviewRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.VideoPreviewRequest.data)
}
#endif
void VideoPreviewRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.VideoPreviewRequest.data)
}
void VideoPreviewRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.VideoPreviewRequest.data)
}
::std::string* VideoPreviewRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.VideoPreviewRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoPreviewRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.VideoPreviewRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoPreviewRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.VideoPreviewRequest.data)
}

// uint32 max_size = 2;
void VideoPreviewRequest::clear_max_size() {
  max_size_ = 0u;
}
::google::protobuf::uint32 VideoPreviewRequest::max_size() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewRequest.max_size)
  return max_size_;
}
void VideoPreviewRequest::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewRequest.max_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPreviewReply::kStatusFieldNumber;
const int VideoPreviewReply::kDurationFieldNumber;
const int VideoPreviewReply::kPreviewFieldNumber;
const int VideoPreviewReply::kWidthFieldNumber;
const int VideoPreviewReply::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPreviewReply::VideoPreviewReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.VideoPreviewReply)
}
VideoPreviewReply::VideoPreviewReply(const VideoPreviewReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.preview().size() > 0) {
    preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:avthumb.VideoPreviewReply)
}

void VideoPreviewReply::SharedCtor() {
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_) + sizeof(height_));
  _cached_size_ = 0;
}

VideoPreviewReply::~VideoPreviewReply() {
  // @@protoc_insertion_point(destructor:avthumb.VideoPreviewReply)
  SharedDtor();
}

void VideoPreviewReply::SharedDtor() {
  preview_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoPreviewReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoPreviewReply::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[7].descriptor;
}

const VideoPreviewReply& VideoPreviewReply::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoPreviewReply* VideoPreviewReply::New(::google::protobuf::Arena* arena) const {
  VideoPreviewReply* n = new VideoPreviewReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoPreviewReply::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.VideoPreviewReply)
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_) + sizeof(height_));
}

bool VideoPreviewReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.VideoPreviewReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .avthumb.StatusCode status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::avthumb::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes preview = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.VideoPreviewReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.VideoPreviewReply)
  return false;
#undef DO_
}

void VideoPreviewReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.VideoPreviewReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // bytes preview = 3;
  if (this->preview().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->preview(), output);
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.VideoPreviewReply)
}

::google::protobuf::uint8* VideoPreviewReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.VideoPreviewReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // bytes preview = 3;
  if (this->preview().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->preview(), target);
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.VideoPreviewReply)
  return target;
}

size_t VideoPreviewReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.VideoPreviewReply)
  size_t total_size = 0;

  // bytes preview = 3;
  if (this->preview().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->preview());
  }

  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPreviewReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.VideoPreviewReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoPreviewReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoPreviewReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.VideoPreviewReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.VideoPreviewReply)
    MergeFrom(*source);
  }
}

void VideoPreviewReply::MergeFrom(const VideoPreviewReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.VideoPreviewReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.preview().size() > 0) {

    preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VideoPreviewReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.VideoPreviewReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoPreviewReply::CopyFrom(const VideoPreviewReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.VideoPreviewReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPreviewReply::IsInitialized() const {
  return true;
}

void VideoPreviewReply::Swap(VideoPreviewReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPreviewReply::InternalSwap(VideoPreviewReply* other) {
  preview_.Swap(&other->preview_);
  std::swap(status_, other->status_);
  std::swap(duration_, other->duration_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoPreviewReply::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPreviewReply

// .avthumb.StatusCode status = 1;
void VideoPreviewReply::clear_status() {
  status_ = 0;
}
::avthumb::StatusCode VideoPreviewReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
void VideoPreviewReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.status)
}

// uint32 duration = 2;
void VideoPreviewReply::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 VideoPreviewReply::duration() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.duration)
  return duration_;
}
void VideoPreviewReply::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.duration)
}

// bytes preview = 3;
void VideoPreviewReply::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoPreviewReply::preview() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.preview)
  return preview_.GetNoArena();
}
void VideoPreviewReply::set_preview(const ::std::string& value) {
  
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.preview)
}
#if LANG_CXX11
void VideoPreviewReply::set_preview(::std::string&& value) {
  
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.VideoPreviewReply.preview)
}
#endif
void VideoPreviewReply::set_preview(const char* value) {
  
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.VideoPreviewReply.preview)
}
void VideoPreviewReply::set_preview(const void* value, size_t size) {
  
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.VideoPreviewReply.preview)
}
::std::string* VideoPreviewReply::mutable_preview() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.VideoPreviewReply.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoPreviewReply::release_preview() {
  // @@protoc_insertion_point(field_release:avthumb.VideoPreviewReply.preview)
  
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoPreviewReply::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    
  } else {
    
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:avthumb.VideoPreviewReply.preview)
}

// uint32 width = 4;
void VideoPreviewReply::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 VideoPreviewReply::width() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.width)
  return width_;
}
void VideoPreviewReply::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.width)
}

// uint32 height = 5;
void VideoPreviewReply::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 VideoPreviewReply::height() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.height)
  return height_;
}
void VideoPreviewReply::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPreviewRequest::kDataFieldNumber;
const int AudioPreviewRequest::kMaxSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPreviewRequest::AudioPreviewRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.AudioPreviewRequest)
}
AudioPreviewRequest::AudioPreviewRequest(const AudioPreviewRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  max_size_ = from.max_size_;
  // @@protoc_insertion_point(copy_constructor:avthumb.AudioPreviewRequest)
}

void AudioPreviewRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
  _cached_size_ = 0;
}

AudioPreviewRequest::~AudioPreviewRequest() {
  // @@protoc_insertion_point(destructor:avthumb.AudioPreviewRequest)
  SharedDtor();
}

void AudioPreviewRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioPreviewRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioPreviewRequest::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[8].descriptor;
}

const AudioPreviewRequest& AudioPreviewRequest::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioPreviewRequest* AudioPreviewRequest::New(::google::protobuf::Arena* arena) const {
  AudioPreviewRequest* n = new AudioPreviewRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioPreviewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.AudioPreviewRequest)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
}

bool AudioPreviewRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.AudioPreviewRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.AudioPreviewRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.AudioPreviewRequest)
  return false;
#undef DO_
}

void AudioPreviewRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.AudioPreviewRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.AudioPreviewRequest)
}

::google::protobuf::uint8* AudioPreviewRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.AudioPreviewRequest)
  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.AudioPreviewRequest)
  return target;
}

size_t AudioPreviewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.AudioPreviewRequest)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 max_size = 2;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPreviewRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.AudioPreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioPreviewRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioPreviewRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.AudioPreviewRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.AudioPreviewRequest)
    MergeFrom(*source);
  }
}

void AudioPreviewRequest::MergeFrom(const AudioPreviewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.AudioPreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
}

void AudioPreviewRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.AudioPreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioPreviewRequest::CopyFrom(const AudioPreviewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.AudioPreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPreviewRequest::IsInitialized() const {
  return true;
}

void AudioPreviewRequest::Swap(AudioPreviewRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioPreviewRequest::InternalSwap(AudioPreviewRequest* other) {
  data_.Swap(&other->data_);
  std::swap(max_size_, other->max_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioPreviewRequest::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioPreviewRequest

// bytes data = 1;
void AudioPreviewRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioPreviewRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewRequest.data)
  return data_.GetNoArena();
}
void AudioPreviewRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewRequest.data)
}
#if LANG_CXX11
void AudioPreviewRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewRequest.data)
}
#endif
void AudioPreviewRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewRequest.data)
}
void AudioPreviewRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewRequest.data)
}
::std::string* AudioPreviewRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioPreviewRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPreviewRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewRequest.data)
}

// uint32 max_size = 2;
void AudioPreviewRequest::clear_max_size() {
  max_size_ = 0u;
}
::google::protobuf::uint32 AudioPreviewRequest::max_size() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewRequest.max_size)
  return max_size_;
}
void AudioPreviewRequest::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewRequest.max_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPreviewReply::kStatusFieldNumber;
const int AudioPreviewReply::kDurationFieldNumber;
const int AudioPreviewReply::kCoverFieldNumber;
const int AudioPreviewReply::kTitleFieldNumber;
const int AudioPreviewReply::kArtistFieldNumber;
const int AudioPreviewReply::kWidthFieldNumber;
const int AudioPreviewReply::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPreviewReply::AudioPreviewReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_avthumb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:avthumb.AudioPreviewReply)
}
AudioPreviewReply::AudioPreviewReply(const AudioPreviewReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cover_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cover().size() > 0) {
    cover_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:avthumb.AudioPreviewReply)
}

void AudioPreviewReply::SharedCtor() {
  cover_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_) + sizeof(height_));
  _cached_size_ = 0;
}

AudioPreviewReply::~AudioPreviewReply() {
  // @@protoc_insertion_point(destructor:avthumb.AudioPreviewReply)
  SharedDtor();
}

void AudioPreviewReply::SharedDtor() {
  cover_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioPreviewReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioPreviewReply::descriptor() {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[9].descriptor;
}

const AudioPreviewReply& AudioPreviewReply::default_instance() {
  protobuf_avthumb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioPreviewReply* AudioPreviewReply::New(::google::protobuf::Arena* arena) const {
  AudioPreviewReply* n = new AudioPreviewReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioPreviewReply::Clear() {
// @@protoc_insertion_point(message_clear_start:avthumb.AudioPreviewReply)
  cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_) + sizeof(height_));
}

bool AudioPreviewReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avthumb.AudioPreviewReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .avthumb.StatusCode status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::avthumb::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cover = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "avthumb.AudioPreviewReply.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "avthumb.AudioPreviewReply.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avthumb.AudioPreviewReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avthumb.AudioPreviewReply)
  return false;
#undef DO_
}

void AudioPreviewReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avthumb.AudioPreviewReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // bytes cover = 3;
  if (this->cover().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cover(), output);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "avthumb.AudioPreviewReply.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // string artist = 5;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "avthumb.AudioPreviewReply.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->artist(), output);
  }

  // uint32 width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->width(), output);
  }

  // uint32 height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:avthumb.AudioPreviewReply)
}

::google::protobuf::uint8* AudioPreviewReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:avthumb.AudioPreviewReply)
  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // bytes cover = 3;
  if (this->cover().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cover(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "avthumb.AudioPreviewReply.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // string artist = 5;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "avthumb.AudioPreviewReply.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->artist(), target);
  }

  // uint32 width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->width(), target);
  }

  // uint32 height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:avthumb.AudioPreviewReply)
  return target;
}

size_t AudioPreviewReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avthumb.AudioPreviewReply)
  size_t total_size = 0;

  // bytes cover = 3;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cover());
  }

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string artist = 5;
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // .avthumb.StatusCode status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // uint32 width = 6;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 7;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPreviewReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avthumb.AudioPreviewReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioPreviewReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioPreviewReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avthumb.AudioPreviewReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avthumb.AudioPreviewReply)
    MergeFrom(*source);
  }
}

void AudioPreviewReply::MergeFrom(const AudioPreviewReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avthumb.AudioPreviewReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void AudioPreviewReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avthumb.AudioPreviewReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioPreviewReply::CopyFrom(const AudioPreviewReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avthumb.AudioPreviewReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPreviewReply::IsInitialized() const {
  return true;
}

void AudioPreviewReply::Swap(AudioPreviewReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioPreviewReply::InternalSwap(AudioPreviewReply* other) {
  cover_.Swap(&other->cover_);
  title_.Swap(&other->title_);
  artist_.Swap(&other->artist_);
  std::swap(status_, other->status_);
  std::swap(duration_, other->duration_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioPreviewReply::GetMetadata() const {
  protobuf_avthumb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_avthumb_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioPreviewReply

// .avthumb.StatusCode status = 1;
void AudioPreviewReply::clear_status() {
  status_ = 0;
}
::avthumb::StatusCode AudioPreviewReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
void AudioPreviewReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.status)
}

// uint32 duration = 2;
void AudioPreviewReply::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 AudioPreviewReply::duration() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.duration)
  return duration_;
}
void AudioPreviewReply::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.duration)
}

// bytes cover = 3;
void AudioPreviewReply::clear_cover() {
  cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioPreviewReply::cover() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.cover)
  return cover_.GetNoArena();
}
void AudioPreviewReply::set_cover(const ::std::string& value) {
  
  cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.cover)
}
#if LANG_CXX11
void AudioPreviewReply::set_cover(::std::string&& value) {
  
  cover_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewReply.cover)
}
#endif
void AudioPreviewReply::set_cover(const char* value) {
  
  cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewReply.cover)
}
void AudioPreviewReply::set_cover(const void* value, size_t size) {
  
  cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewReply.cover)
}
::std::string* AudioPreviewReply::mutable_cover() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewReply.cover)
  return cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioPreviewReply::release_cover() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewReply.cover)
  
  return cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPreviewReply::set_allocated_cover(::std::string* cover) {
  if (cover != NULL) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewReply.cover)
}

// string title = 4;
void AudioPreviewReply::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioPreviewReply::title() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.title)
  return title_.GetNoArena();
}
void AudioPreviewReply::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.title)
}
#if LANG_CXX11
void AudioPreviewReply::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewReply.title)
}
#endif
void AudioPreviewReply::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewReply.title)
}
void AudioPreviewReply::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewReply.title)
}
::std::string* AudioPreviewReply::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewReply.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioPreviewReply::release_title() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewReply.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPreviewReply::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewReply.title)
}

// string artist = 5;
void AudioPreviewReply::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioPreviewReply::artist() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.artist)
  return artist_.GetNoArena();
}
void AudioPreviewReply::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.artist)
}
#if LANG_CXX11
void AudioPreviewReply::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewReply.artist)
}
#endif
void AudioPreviewReply::set_artist(const char* value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewReply.artist)
}
void AudioPreviewReply::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewReply.artist)
}
::std::string* AudioPreviewReply::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewReply.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioPreviewReply::release_artist() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewReply.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPreviewReply::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewReply.artist)
}

// uint32 width = 6;
void AudioPreviewReply::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 AudioPreviewReply::width() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.width)
  return width_;
}
void AudioPreviewReply::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.width)
}

// uint32 height = 7;
void AudioPreviewReply::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 AudioPreviewReply::height() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.height)
  return height_;
}
void AudioPreviewReply::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace avthumb

// @@protoc_insertion_point(global_scope)
