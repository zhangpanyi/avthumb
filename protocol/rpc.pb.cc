// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace etcdserverpb {
class ResponseHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader> {
} _ResponseHeader_default_instance_;
class RangeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RangeRequest> {
} _RangeRequest_default_instance_;
class RangeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RangeResponse> {
} _RangeResponse_default_instance_;
class PutRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PutRequest> {
} _PutRequest_default_instance_;
class PutResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PutResponse> {
} _PutResponse_default_instance_;
class DeleteRangeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest> {
} _DeleteRangeRequest_default_instance_;
class DeleteRangeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse> {
} _DeleteRangeResponse_default_instance_;
class RequestOpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestOp> {
  public:
  const ::etcdserverpb::RangeRequest* request_range_;
  const ::etcdserverpb::PutRequest* request_put_;
  const ::etcdserverpb::DeleteRangeRequest* request_delete_range_;
} _RequestOp_default_instance_;
class ResponseOpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseOp> {
  public:
  const ::etcdserverpb::RangeResponse* response_range_;
  const ::etcdserverpb::PutResponse* response_put_;
  const ::etcdserverpb::DeleteRangeResponse* response_delete_range_;
} _ResponseOp_default_instance_;
class CompareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Compare> {
  public:
  ::google::protobuf::int64 version_;
  ::google::protobuf::int64 create_revision_;
  ::google::protobuf::int64 mod_revision_;
  ::google::protobuf::internal::ArenaStringPtr value_;
} _Compare_default_instance_;
class TxnRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxnRequest> {
} _TxnRequest_default_instance_;
class TxnResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxnResponse> {
} _TxnResponse_default_instance_;
class CompactionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompactionRequest> {
} _CompactionRequest_default_instance_;
class CompactionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompactionResponse> {
} _CompactionResponse_default_instance_;
class HashRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HashRequest> {
} _HashRequest_default_instance_;
class HashResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HashResponse> {
} _HashResponse_default_instance_;
class SnapshotRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotRequest> {
} _SnapshotRequest_default_instance_;
class SnapshotResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotResponse> {
} _SnapshotResponse_default_instance_;
class WatchRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WatchRequest> {
  public:
  const ::etcdserverpb::WatchCreateRequest* create_request_;
  const ::etcdserverpb::WatchCancelRequest* cancel_request_;
} _WatchRequest_default_instance_;
class WatchCreateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WatchCreateRequest> {
} _WatchCreateRequest_default_instance_;
class WatchCancelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WatchCancelRequest> {
} _WatchCancelRequest_default_instance_;
class WatchResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WatchResponse> {
} _WatchResponse_default_instance_;
class LeaseGrantRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaseGrantRequest> {
} _LeaseGrantRequest_default_instance_;
class LeaseGrantResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaseGrantResponse> {
} _LeaseGrantResponse_default_instance_;
class LeaseRevokeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaseRevokeRequest> {
} _LeaseRevokeRequest_default_instance_;
class LeaseRevokeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaseRevokeResponse> {
} _LeaseRevokeResponse_default_instance_;
class LeaseKeepAliveRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaseKeepAliveRequest> {
} _LeaseKeepAliveRequest_default_instance_;
class LeaseKeepAliveResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaseKeepAliveResponse> {
} _LeaseKeepAliveResponse_default_instance_;
class MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Member> {
} _Member_default_instance_;
class MemberAddRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberAddRequest> {
} _MemberAddRequest_default_instance_;
class MemberAddResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberAddResponse> {
} _MemberAddResponse_default_instance_;
class MemberRemoveRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberRemoveRequest> {
} _MemberRemoveRequest_default_instance_;
class MemberRemoveResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberRemoveResponse> {
} _MemberRemoveResponse_default_instance_;
class MemberUpdateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberUpdateRequest> {
} _MemberUpdateRequest_default_instance_;
class MemberUpdateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberUpdateResponse> {
} _MemberUpdateResponse_default_instance_;
class MemberListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberListRequest> {
} _MemberListRequest_default_instance_;
class MemberListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberListResponse> {
} _MemberListResponse_default_instance_;
class DefragmentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DefragmentRequest> {
} _DefragmentRequest_default_instance_;
class DefragmentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DefragmentResponse> {
} _DefragmentResponse_default_instance_;
class AlarmRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AlarmRequest> {
} _AlarmRequest_default_instance_;
class AlarmMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AlarmMember> {
} _AlarmMember_default_instance_;
class AlarmResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AlarmResponse> {
} _AlarmResponse_default_instance_;
class StatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatusRequest> {
} _StatusRequest_default_instance_;
class StatusResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatusResponse> {
} _StatusResponse_default_instance_;
class AuthEnableRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthEnableRequest> {
} _AuthEnableRequest_default_instance_;
class AuthDisableRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthDisableRequest> {
} _AuthDisableRequest_default_instance_;
class AuthenticateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest> {
} _AuthenticateRequest_default_instance_;
class AuthUserAddRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserAddRequest> {
} _AuthUserAddRequest_default_instance_;
class AuthUserGetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserGetRequest> {
} _AuthUserGetRequest_default_instance_;
class AuthUserDeleteRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserDeleteRequest> {
} _AuthUserDeleteRequest_default_instance_;
class AuthUserChangePasswordRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserChangePasswordRequest> {
} _AuthUserChangePasswordRequest_default_instance_;
class AuthUserGrantRoleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserGrantRoleRequest> {
} _AuthUserGrantRoleRequest_default_instance_;
class AuthUserRevokeRoleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserRevokeRoleRequest> {
} _AuthUserRevokeRoleRequest_default_instance_;
class AuthRoleAddRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleAddRequest> {
} _AuthRoleAddRequest_default_instance_;
class AuthRoleGetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleGetRequest> {
} _AuthRoleGetRequest_default_instance_;
class AuthUserListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserListRequest> {
} _AuthUserListRequest_default_instance_;
class AuthRoleListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleListRequest> {
} _AuthRoleListRequest_default_instance_;
class AuthRoleDeleteRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleDeleteRequest> {
} _AuthRoleDeleteRequest_default_instance_;
class AuthRoleGrantPermissionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleGrantPermissionRequest> {
} _AuthRoleGrantPermissionRequest_default_instance_;
class AuthRoleRevokePermissionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleRevokePermissionRequest> {
} _AuthRoleRevokePermissionRequest_default_instance_;
class AuthEnableResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthEnableResponse> {
} _AuthEnableResponse_default_instance_;
class AuthDisableResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthDisableResponse> {
} _AuthDisableResponse_default_instance_;
class AuthenticateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse> {
} _AuthenticateResponse_default_instance_;
class AuthUserAddResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserAddResponse> {
} _AuthUserAddResponse_default_instance_;
class AuthUserGetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserGetResponse> {
} _AuthUserGetResponse_default_instance_;
class AuthUserDeleteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserDeleteResponse> {
} _AuthUserDeleteResponse_default_instance_;
class AuthUserChangePasswordResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserChangePasswordResponse> {
} _AuthUserChangePasswordResponse_default_instance_;
class AuthUserGrantRoleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserGrantRoleResponse> {
} _AuthUserGrantRoleResponse_default_instance_;
class AuthUserRevokeRoleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserRevokeRoleResponse> {
} _AuthUserRevokeRoleResponse_default_instance_;
class AuthRoleAddResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleAddResponse> {
} _AuthRoleAddResponse_default_instance_;
class AuthRoleGetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleGetResponse> {
} _AuthRoleGetResponse_default_instance_;
class AuthRoleListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleListResponse> {
} _AuthRoleListResponse_default_instance_;
class AuthUserListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthUserListResponse> {
} _AuthUserListResponse_default_instance_;
class AuthRoleDeleteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleDeleteResponse> {
} _AuthRoleDeleteResponse_default_instance_;
class AuthRoleGrantPermissionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleGrantPermissionResponse> {
} _AuthRoleGrantPermissionResponse_default_instance_;
class AuthRoleRevokePermissionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRoleRevokePermissionResponse> {
} _AuthRoleRevokePermissionResponse_default_instance_;

namespace protobuf_rpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[76];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, raft_term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, sort_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, sort_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, serializable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, keys_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, count_only_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, kvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, more_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, lease_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, prev_kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, prev_kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, prev_kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, deleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, prev_kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOp, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RequestOp_default_instance_), request_range_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RequestOp_default_instance_), request_put_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RequestOp_default_instance_), request_delete_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOp, request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseOp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseOp, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ResponseOp_default_instance_), response_range_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ResponseOp_default_instance_), response_put_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ResponseOp_default_instance_), response_delete_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseOp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, key_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Compare_default_instance_), version_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Compare_default_instance_), create_revision_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Compare_default_instance_), mod_revision_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Compare_default_instance_), value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, target_union_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnRequest, compare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnRequest, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnRequest, failure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnResponse, succeeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnResponse, responses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionRequest, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionRequest, physical_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashResponse, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, remaining_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, blob_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchRequest, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_WatchRequest_default_instance_), create_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_WatchRequest_default_instance_), cancel_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchRequest, request_union_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, start_revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, progress_notify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, prev_kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCancelRequest, watch_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, watch_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, compact_revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, events_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantRequest, ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantResponse, ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseGrantResponse, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRevokeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRevokeRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRevokeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRevokeResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseKeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseKeepAliveRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseKeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseKeepAliveResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseKeepAliveResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseKeepAliveResponse, ttl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, peerurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, clienturls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddRequest, peerurls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddResponse, member_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemoveRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemoveResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberUpdateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberUpdateRequest, peerurls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberUpdateResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListResponse, members_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefragmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefragmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefragmentResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRequest, memberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmRequest, alarm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMember, memberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMember, alarm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmResponse, alarms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, dbsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, raftindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, raftterm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthEnableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthDisableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserAddRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserAddRequest, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGetRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserDeleteRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserChangePasswordRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserChangePasswordRequest, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGrantRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGrantRoleRequest, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGrantRoleRequest, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRevokeRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRevokeRoleRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRevokeRoleRequest, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleAddRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGetRequest, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleDeleteRequest, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGrantPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGrantPermissionRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGrantPermissionRequest, perm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleRevokePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleRevokePermissionRequest, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleRevokePermissionRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleRevokePermissionRequest, range_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthEnableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthEnableResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthDisableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthDisableResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserAddResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGetResponse, roles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserDeleteResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserChangePasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserChangePasswordResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGrantRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserGrantRoleResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRevokeRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserRevokeRoleResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleAddResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGetResponse, perm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleListResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleListResponse, roles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserListResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthUserListResponse, users_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleDeleteResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGrantPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleGrantPermissionResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleRevokePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRoleRevokePermissionResponse, header_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ResponseHeader)},
  { 8, -1, sizeof(RangeRequest)},
  { 21, -1, sizeof(RangeResponse)},
  { 29, -1, sizeof(PutRequest)},
  { 37, -1, sizeof(PutResponse)},
  { 43, -1, sizeof(DeleteRangeRequest)},
  { 50, -1, sizeof(DeleteRangeResponse)},
  { 57, -1, sizeof(RequestOp)},
  { 65, -1, sizeof(ResponseOp)},
  { 73, -1, sizeof(Compare)},
  { 85, -1, sizeof(TxnRequest)},
  { 92, -1, sizeof(TxnResponse)},
  { 99, -1, sizeof(CompactionRequest)},
  { 105, -1, sizeof(CompactionResponse)},
  { 110, -1, sizeof(HashRequest)},
  { 114, -1, sizeof(HashResponse)},
  { 120, -1, sizeof(SnapshotRequest)},
  { 124, -1, sizeof(SnapshotResponse)},
  { 131, -1, sizeof(WatchRequest)},
  { 138, -1, sizeof(WatchCreateRequest)},
  { 148, -1, sizeof(WatchCancelRequest)},
  { 153, -1, sizeof(WatchResponse)},
  { 163, -1, sizeof(LeaseGrantRequest)},
  { 169, -1, sizeof(LeaseGrantResponse)},
  { 177, -1, sizeof(LeaseRevokeRequest)},
  { 182, -1, sizeof(LeaseRevokeResponse)},
  { 187, -1, sizeof(LeaseKeepAliveRequest)},
  { 192, -1, sizeof(LeaseKeepAliveResponse)},
  { 199, -1, sizeof(Member)},
  { 207, -1, sizeof(MemberAddRequest)},
  { 212, -1, sizeof(MemberAddResponse)},
  { 218, -1, sizeof(MemberRemoveRequest)},
  { 223, -1, sizeof(MemberRemoveResponse)},
  { 228, -1, sizeof(MemberUpdateRequest)},
  { 234, -1, sizeof(MemberUpdateResponse)},
  { 239, -1, sizeof(MemberListRequest)},
  { 243, -1, sizeof(MemberListResponse)},
  { 249, -1, sizeof(DefragmentRequest)},
  { 253, -1, sizeof(DefragmentResponse)},
  { 258, -1, sizeof(AlarmRequest)},
  { 265, -1, sizeof(AlarmMember)},
  { 271, -1, sizeof(AlarmResponse)},
  { 277, -1, sizeof(StatusRequest)},
  { 281, -1, sizeof(StatusResponse)},
  { 291, -1, sizeof(AuthEnableRequest)},
  { 295, -1, sizeof(AuthDisableRequest)},
  { 299, -1, sizeof(AuthenticateRequest)},
  { 305, -1, sizeof(AuthUserAddRequest)},
  { 311, -1, sizeof(AuthUserGetRequest)},
  { 316, -1, sizeof(AuthUserDeleteRequest)},
  { 321, -1, sizeof(AuthUserChangePasswordRequest)},
  { 327, -1, sizeof(AuthUserGrantRoleRequest)},
  { 333, -1, sizeof(AuthUserRevokeRoleRequest)},
  { 339, -1, sizeof(AuthRoleAddRequest)},
  { 344, -1, sizeof(AuthRoleGetRequest)},
  { 349, -1, sizeof(AuthUserListRequest)},
  { 353, -1, sizeof(AuthRoleListRequest)},
  { 357, -1, sizeof(AuthRoleDeleteRequest)},
  { 362, -1, sizeof(AuthRoleGrantPermissionRequest)},
  { 368, -1, sizeof(AuthRoleRevokePermissionRequest)},
  { 375, -1, sizeof(AuthEnableResponse)},
  { 380, -1, sizeof(AuthDisableResponse)},
  { 385, -1, sizeof(AuthenticateResponse)},
  { 391, -1, sizeof(AuthUserAddResponse)},
  { 396, -1, sizeof(AuthUserGetResponse)},
  { 402, -1, sizeof(AuthUserDeleteResponse)},
  { 407, -1, sizeof(AuthUserChangePasswordResponse)},
  { 412, -1, sizeof(AuthUserGrantRoleResponse)},
  { 417, -1, sizeof(AuthUserRevokeRoleResponse)},
  { 422, -1, sizeof(AuthRoleAddResponse)},
  { 427, -1, sizeof(AuthRoleGetResponse)},
  { 433, -1, sizeof(AuthRoleListResponse)},
  { 439, -1, sizeof(AuthUserListResponse)},
  { 445, -1, sizeof(AuthRoleDeleteResponse)},
  { 450, -1, sizeof(AuthRoleGrantPermissionResponse)},
  { 455, -1, sizeof(AuthRoleRevokePermissionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestOp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseOp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Compare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HashRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HashResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaseGrantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaseGrantResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaseRevokeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaseRevokeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaseKeepAliveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaseKeepAliveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberAddRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberAddResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberRemoveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberRemoveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DefragmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DefragmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlarmRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlarmMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlarmResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthEnableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthDisableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserAddRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserChangePasswordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserGrantRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserRevokeRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleAddRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleGrantPermissionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleRevokePermissionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthEnableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthDisableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserAddResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserChangePasswordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserGrantRoleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserRevokeRoleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleAddResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthUserListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleGrantPermissionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRoleRevokePermissionResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 76);
}

}  // namespace

void TableStruct::Shutdown() {
  _ResponseHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RangeRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RangeResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PutRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PutResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DeleteRangeRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DeleteRangeResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RequestOp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ResponseOp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Compare_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TxnRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _TxnResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CompactionRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CompactionResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _HashRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _HashResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SnapshotRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SnapshotResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _WatchRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _WatchCreateRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _WatchCancelRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _WatchResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _LeaseGrantRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _LeaseGrantResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _LeaseRevokeRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _LeaseRevokeResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _LeaseKeepAliveRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _LeaseKeepAliveResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _Member_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _MemberAddRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _MemberAddResponse_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _MemberRemoveRequest_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _MemberRemoveResponse_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _MemberUpdateRequest_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _MemberUpdateResponse_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _MemberListRequest_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _MemberListResponse_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _DefragmentRequest_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _DefragmentResponse_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _AlarmRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _AlarmMember_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _AlarmResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _StatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _StatusResponse_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _AuthEnableRequest_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _AuthDisableRequest_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _AuthenticateRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _AuthUserAddRequest_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _AuthUserGetRequest_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _AuthUserDeleteRequest_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _AuthUserChangePasswordRequest_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _AuthUserGrantRoleRequest_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _AuthUserRevokeRoleRequest_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _AuthRoleAddRequest_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _AuthRoleGetRequest_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _AuthUserListRequest_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _AuthRoleListRequest_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _AuthRoleDeleteRequest_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _AuthRoleGrantPermissionRequest_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _AuthRoleRevokePermissionRequest_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _AuthEnableResponse_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _AuthDisableResponse_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _AuthenticateResponse_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _AuthUserAddResponse_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _AuthUserGetResponse_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _AuthUserDeleteResponse_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _AuthUserChangePasswordResponse_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _AuthUserGrantRoleResponse_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _AuthUserRevokeRoleResponse_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _AuthRoleAddResponse_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _AuthRoleGetResponse_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _AuthRoleListResponse_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _AuthUserListResponse_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _AuthRoleDeleteResponse_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _AuthRoleGrantPermissionResponse_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _AuthRoleRevokePermissionResponse_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::mvccpb::protobuf_kv_2eproto::InitDefaults();
  ::authpb::protobuf_auth_2eproto::InitDefaults();
  _ResponseHeader_default_instance_.DefaultConstruct();
  _RangeRequest_default_instance_.DefaultConstruct();
  _RangeResponse_default_instance_.DefaultConstruct();
  _PutRequest_default_instance_.DefaultConstruct();
  _PutResponse_default_instance_.DefaultConstruct();
  _DeleteRangeRequest_default_instance_.DefaultConstruct();
  _DeleteRangeResponse_default_instance_.DefaultConstruct();
  _RequestOp_default_instance_.DefaultConstruct();
  _ResponseOp_default_instance_.DefaultConstruct();
  _Compare_default_instance_.DefaultConstruct();
  _TxnRequest_default_instance_.DefaultConstruct();
  _TxnResponse_default_instance_.DefaultConstruct();
  _CompactionRequest_default_instance_.DefaultConstruct();
  _CompactionResponse_default_instance_.DefaultConstruct();
  _HashRequest_default_instance_.DefaultConstruct();
  _HashResponse_default_instance_.DefaultConstruct();
  _SnapshotRequest_default_instance_.DefaultConstruct();
  _SnapshotResponse_default_instance_.DefaultConstruct();
  _WatchRequest_default_instance_.DefaultConstruct();
  _WatchCreateRequest_default_instance_.DefaultConstruct();
  _WatchCancelRequest_default_instance_.DefaultConstruct();
  _WatchResponse_default_instance_.DefaultConstruct();
  _LeaseGrantRequest_default_instance_.DefaultConstruct();
  _LeaseGrantResponse_default_instance_.DefaultConstruct();
  _LeaseRevokeRequest_default_instance_.DefaultConstruct();
  _LeaseRevokeResponse_default_instance_.DefaultConstruct();
  _LeaseKeepAliveRequest_default_instance_.DefaultConstruct();
  _LeaseKeepAliveResponse_default_instance_.DefaultConstruct();
  _Member_default_instance_.DefaultConstruct();
  _MemberAddRequest_default_instance_.DefaultConstruct();
  _MemberAddResponse_default_instance_.DefaultConstruct();
  _MemberRemoveRequest_default_instance_.DefaultConstruct();
  _MemberRemoveResponse_default_instance_.DefaultConstruct();
  _MemberUpdateRequest_default_instance_.DefaultConstruct();
  _MemberUpdateResponse_default_instance_.DefaultConstruct();
  _MemberListRequest_default_instance_.DefaultConstruct();
  _MemberListResponse_default_instance_.DefaultConstruct();
  _DefragmentRequest_default_instance_.DefaultConstruct();
  _DefragmentResponse_default_instance_.DefaultConstruct();
  _AlarmRequest_default_instance_.DefaultConstruct();
  _AlarmMember_default_instance_.DefaultConstruct();
  _AlarmResponse_default_instance_.DefaultConstruct();
  _StatusRequest_default_instance_.DefaultConstruct();
  _StatusResponse_default_instance_.DefaultConstruct();
  _AuthEnableRequest_default_instance_.DefaultConstruct();
  _AuthDisableRequest_default_instance_.DefaultConstruct();
  _AuthenticateRequest_default_instance_.DefaultConstruct();
  _AuthUserAddRequest_default_instance_.DefaultConstruct();
  _AuthUserGetRequest_default_instance_.DefaultConstruct();
  _AuthUserDeleteRequest_default_instance_.DefaultConstruct();
  _AuthUserChangePasswordRequest_default_instance_.DefaultConstruct();
  _AuthUserGrantRoleRequest_default_instance_.DefaultConstruct();
  _AuthUserRevokeRoleRequest_default_instance_.DefaultConstruct();
  _AuthRoleAddRequest_default_instance_.DefaultConstruct();
  _AuthRoleGetRequest_default_instance_.DefaultConstruct();
  _AuthUserListRequest_default_instance_.DefaultConstruct();
  _AuthRoleListRequest_default_instance_.DefaultConstruct();
  _AuthRoleDeleteRequest_default_instance_.DefaultConstruct();
  _AuthRoleGrantPermissionRequest_default_instance_.DefaultConstruct();
  _AuthRoleRevokePermissionRequest_default_instance_.DefaultConstruct();
  _AuthEnableResponse_default_instance_.DefaultConstruct();
  _AuthDisableResponse_default_instance_.DefaultConstruct();
  _AuthenticateResponse_default_instance_.DefaultConstruct();
  _AuthUserAddResponse_default_instance_.DefaultConstruct();
  _AuthUserGetResponse_default_instance_.DefaultConstruct();
  _AuthUserDeleteResponse_default_instance_.DefaultConstruct();
  _AuthUserChangePasswordResponse_default_instance_.DefaultConstruct();
  _AuthUserGrantRoleResponse_default_instance_.DefaultConstruct();
  _AuthUserRevokeRoleResponse_default_instance_.DefaultConstruct();
  _AuthRoleAddResponse_default_instance_.DefaultConstruct();
  _AuthRoleGetResponse_default_instance_.DefaultConstruct();
  _AuthRoleListResponse_default_instance_.DefaultConstruct();
  _AuthUserListResponse_default_instance_.DefaultConstruct();
  _AuthRoleDeleteResponse_default_instance_.DefaultConstruct();
  _AuthRoleGrantPermissionResponse_default_instance_.DefaultConstruct();
  _AuthRoleRevokePermissionResponse_default_instance_.DefaultConstruct();
  _RangeResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _PutResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _PutResponse_default_instance_.get_mutable()->prev_kv_ = const_cast< ::mvccpb::KeyValue*>(
      ::mvccpb::KeyValue::internal_default_instance());
  _DeleteRangeResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _RequestOp_default_instance_.request_range_ = const_cast< ::etcdserverpb::RangeRequest*>(
      ::etcdserverpb::RangeRequest::internal_default_instance());
  _RequestOp_default_instance_.request_put_ = const_cast< ::etcdserverpb::PutRequest*>(
      ::etcdserverpb::PutRequest::internal_default_instance());
  _RequestOp_default_instance_.request_delete_range_ = const_cast< ::etcdserverpb::DeleteRangeRequest*>(
      ::etcdserverpb::DeleteRangeRequest::internal_default_instance());
  _ResponseOp_default_instance_.response_range_ = const_cast< ::etcdserverpb::RangeResponse*>(
      ::etcdserverpb::RangeResponse::internal_default_instance());
  _ResponseOp_default_instance_.response_put_ = const_cast< ::etcdserverpb::PutResponse*>(
      ::etcdserverpb::PutResponse::internal_default_instance());
  _ResponseOp_default_instance_.response_delete_range_ = const_cast< ::etcdserverpb::DeleteRangeResponse*>(
      ::etcdserverpb::DeleteRangeResponse::internal_default_instance());
  _Compare_default_instance_.version_ = GOOGLE_LONGLONG(0);
  _Compare_default_instance_.create_revision_ = GOOGLE_LONGLONG(0);
  _Compare_default_instance_.mod_revision_ = GOOGLE_LONGLONG(0);
  _Compare_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _TxnResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _CompactionResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _HashResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _SnapshotResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _WatchRequest_default_instance_.create_request_ = const_cast< ::etcdserverpb::WatchCreateRequest*>(
      ::etcdserverpb::WatchCreateRequest::internal_default_instance());
  _WatchRequest_default_instance_.cancel_request_ = const_cast< ::etcdserverpb::WatchCancelRequest*>(
      ::etcdserverpb::WatchCancelRequest::internal_default_instance());
  _WatchResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _LeaseGrantResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _LeaseRevokeResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _LeaseKeepAliveResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _MemberAddResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _MemberAddResponse_default_instance_.get_mutable()->member_ = const_cast< ::etcdserverpb::Member*>(
      ::etcdserverpb::Member::internal_default_instance());
  _MemberRemoveResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _MemberUpdateResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _MemberListResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _DefragmentResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AlarmResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _StatusResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleGrantPermissionRequest_default_instance_.get_mutable()->perm_ = const_cast< ::authpb::Permission*>(
      ::authpb::Permission::internal_default_instance());
  _AuthEnableResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthDisableResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthenticateResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserAddResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserGetResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserDeleteResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserChangePasswordResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserGrantRoleResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserRevokeRoleResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleAddResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleGetResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleListResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthUserListResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleDeleteResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleGrantPermissionResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  _AuthRoleRevokePermissionResponse_default_instance_.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\trpc.proto\022\014etcdserverpb\032\010kv.proto\032\naut"
      "h.proto\"\\\n\016ResponseHeader\022\022\n\ncluster_id\030"
      "\001 \001(\004\022\021\n\tmember_id\030\002 \001(\004\022\020\n\010revision\030\003 \001"
      "(\003\022\021\n\traft_term\030\004 \001(\004\"\366\002\n\014RangeRequest\022\013"
      "\n\003key\030\001 \001(\014\022\021\n\trange_end\030\002 \001(\014\022\r\n\005limit\030"
      "\003 \001(\003\022\020\n\010revision\030\004 \001(\003\0228\n\nsort_order\030\005 "
      "\001(\0162$.etcdserverpb.RangeRequest.SortOrde"
      "r\022:\n\013sort_target\030\006 \001(\0162%.etcdserverpb.Ra"
      "ngeRequest.SortTarget\022\024\n\014serializable\030\007 "
      "\001(\010\022\021\n\tkeys_only\030\010 \001(\010\022\022\n\ncount_only\030\t \001"
      "(\010\".\n\tSortOrder\022\010\n\004NONE\020\000\022\n\n\006ASCEND\020\001\022\013\n"
      "\007DESCEND\020\002\"B\n\nSortTarget\022\007\n\003KEY\020\000\022\013\n\007VER"
      "SION\020\001\022\n\n\006CREATE\020\002\022\007\n\003MOD\020\003\022\t\n\005VALUE\020\004\"y"
      "\n\rRangeResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
      "rverpb.ResponseHeader\022\035\n\003kvs\030\002 \003(\0132\020.mvc"
      "cpb.KeyValue\022\014\n\004more\030\003 \001(\010\022\r\n\005count\030\004 \001("
      "\003\"H\n\nPutRequest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 "
      "\001(\014\022\r\n\005lease\030\003 \001(\003\022\017\n\007prev_kv\030\004 \001(\010\"^\n\013P"
      "utResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverp"
      "b.ResponseHeader\022!\n\007prev_kv\030\002 \001(\0132\020.mvcc"
      "pb.KeyValue\"E\n\022DeleteRangeRequest\022\013\n\003key"
      "\030\001 \001(\014\022\021\n\trange_end\030\002 \001(\014\022\017\n\007prev_kv\030\003 \001"
      "(\010\"x\n\023DeleteRangeResponse\022,\n\006header\030\001 \001("
      "\0132\034.etcdserverpb.ResponseHeader\022\017\n\007delet"
      "ed\030\002 \001(\003\022\"\n\010prev_kvs\030\003 \003(\0132\020.mvccpb.KeyV"
      "alue\"\276\001\n\tRequestOp\0223\n\rrequest_range\030\001 \001("
      "\0132\032.etcdserverpb.RangeRequestH\000\022/\n\013reque"
      "st_put\030\002 \001(\0132\030.etcdserverpb.PutRequestH\000"
      "\022@\n\024request_delete_range\030\003 \001(\0132 .etcdser"
      "verpb.DeleteRangeRequestH\000B\t\n\007request\"\306\001"
      "\n\nResponseOp\0225\n\016response_range\030\001 \001(\0132\033.e"
      "tcdserverpb.RangeResponseH\000\0221\n\014response_"
      "put\030\002 \001(\0132\031.etcdserverpb.PutResponseH\000\022B"
      "\n\025response_delete_range\030\003 \001(\0132!.etcdserv"
      "erpb.DeleteRangeResponseH\000B\n\n\010response\"\330"
      "\002\n\007Compare\0223\n\006result\030\001 \001(\0162#.etcdserverp"
      "b.Compare.CompareResult\0223\n\006target\030\002 \001(\0162"
      "#.etcdserverpb.Compare.CompareTarget\022\013\n\003"
      "key\030\003 \001(\014\022\021\n\007version\030\004 \001(\003H\000\022\031\n\017create_r"
      "evision\030\005 \001(\003H\000\022\026\n\014mod_revision\030\006 \001(\003H\000\022"
      "\017\n\005value\030\007 \001(\014H\000\"1\n\rCompareResult\022\t\n\005EQU"
      "AL\020\000\022\013\n\007GREATER\020\001\022\010\n\004LESS\020\002\"<\n\rCompareTa"
      "rget\022\013\n\007VERSION\020\000\022\n\n\006CREATE\020\001\022\007\n\003MOD\020\002\022\t"
      "\n\005VALUE\020\003B\016\n\014target_union\"\210\001\n\nTxnRequest"
      "\022&\n\007compare\030\001 \003(\0132\025.etcdserverpb.Compare"
      "\022(\n\007success\030\002 \003(\0132\027.etcdserverpb.Request"
      "Op\022(\n\007failure\030\003 \003(\0132\027.etcdserverpb.Reque"
      "stOp\"{\n\013TxnResponse\022,\n\006header\030\001 \001(\0132\034.et"
      "cdserverpb.ResponseHeader\022\021\n\tsucceeded\030\002"
      " \001(\010\022+\n\tresponses\030\003 \003(\0132\030.etcdserverpb.R"
      "esponseOp\"7\n\021CompactionRequest\022\020\n\010revisi"
      "on\030\001 \001(\003\022\020\n\010physical\030\002 \001(\010\"B\n\022Compaction"
      "Response\022,\n\006header\030\001 \001(\0132\034.etcdserverpb."
      "ResponseHeader\"\r\n\013HashRequest\"J\n\014HashRes"
      "ponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Res"
      "ponseHeader\022\014\n\004hash\030\002 \001(\r\"\021\n\017SnapshotReq"
      "uest\"g\n\020SnapshotResponse\022,\n\006header\030\001 \001(\013"
      "2\034.etcdserverpb.ResponseHeader\022\027\n\017remain"
      "ing_bytes\030\002 \001(\004\022\014\n\004blob\030\003 \001(\014\"\227\001\n\014WatchR"
      "equest\022:\n\016create_request\030\001 \001(\0132 .etcdser"
      "verpb.WatchCreateRequestH\000\022:\n\016cancel_req"
      "uest\030\002 \001(\0132 .etcdserverpb.WatchCancelReq"
      "uestH\000B\017\n\rrequest_union\"\333\001\n\022WatchCreateR"
      "equest\022\013\n\003key\030\001 \001(\014\022\021\n\trange_end\030\002 \001(\014\022\026"
      "\n\016start_revision\030\003 \001(\003\022\027\n\017progress_notif"
      "y\030\004 \001(\010\022<\n\007filters\030\005 \003(\0162+.etcdserverpb."
      "WatchCreateRequest.FilterType\022\017\n\007prev_kv"
      "\030\006 \001(\010\"%\n\nFilterType\022\t\n\005NOPUT\020\000\022\014\n\010NODEL"
      "ETE\020\001\"&\n\022WatchCancelRequest\022\020\n\010watch_id\030"
      "\001 \001(\003\"\253\001\n\rWatchResponse\022,\n\006header\030\001 \001(\0132"
      "\034.etcdserverpb.ResponseHeader\022\020\n\010watch_i"
      "d\030\002 \001(\003\022\017\n\007created\030\003 \001(\010\022\020\n\010canceled\030\004 \001"
      "(\010\022\030\n\020compact_revision\030\005 \001(\003\022\035\n\006events\030\013"
      " \003(\0132\r.mvccpb.Event\",\n\021LeaseGrantRequest"
      "\022\013\n\003TTL\030\001 \001(\003\022\n\n\002ID\030\002 \001(\003\"j\n\022LeaseGrantR"
      "esponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.R"
      "esponseHeader\022\n\n\002ID\030\002 \001(\003\022\013\n\003TTL\030\003 \001(\003\022\r"
      "\n\005error\030\004 \001(\t\" \n\022LeaseRevokeRequest\022\n\n\002I"
      "D\030\001 \001(\003\"C\n\023LeaseRevokeResponse\022,\n\006header"
      "\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\"#\n\025"
      "LeaseKeepAliveRequest\022\n\n\002ID\030\001 \001(\003\"_\n\026Lea"
      "seKeepAliveResponse\022,\n\006header\030\001 \001(\0132\034.et"
      "cdserverpb.ResponseHeader\022\n\n\002ID\030\002 \001(\003\022\013\n"
      "\003TTL\030\003 \001(\003\"H\n\006Member\022\n\n\002ID\030\001 \001(\004\022\014\n\004name"
      "\030\002 \001(\t\022\020\n\010peerURLs\030\003 \003(\t\022\022\n\nclientURLs\030\004"
      " \003(\t\"$\n\020MemberAddRequest\022\020\n\010peerURLs\030\001 \003"
      "(\t\"g\n\021MemberAddResponse\022,\n\006header\030\001 \001(\0132"
      "\034.etcdserverpb.ResponseHeader\022$\n\006member\030"
      "\002 \001(\0132\024.etcdserverpb.Member\"!\n\023MemberRem"
      "oveRequest\022\n\n\002ID\030\001 \001(\004\"D\n\024MemberRemoveRe"
      "sponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Re"
      "sponseHeader\"3\n\023MemberUpdateRequest\022\n\n\002I"
      "D\030\001 \001(\004\022\020\n\010peerURLs\030\002 \003(\t\"D\n\024MemberUpdat"
      "eResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb"
      ".ResponseHeader\"\023\n\021MemberListRequest\"i\n\022"
      "MemberListResponse\022,\n\006header\030\001 \001(\0132\034.etc"
      "dserverpb.ResponseHeader\022%\n\007members\030\002 \003("
      "\0132\024.etcdserverpb.Member\"\023\n\021DefragmentReq"
      "uest\"B\n\022DefragmentResponse\022,\n\006header\030\001 \001"
      "(\0132\034.etcdserverpb.ResponseHeader\"\266\001\n\014Ala"
      "rmRequest\0226\n\006action\030\001 \001(\0162&.etcdserverpb"
      ".AlarmRequest.AlarmAction\022\020\n\010memberID\030\002 "
      "\001(\004\022&\n\005alarm\030\003 \001(\0162\027.etcdserverpb.AlarmT"
      "ype\"4\n\013AlarmAction\022\007\n\003GET\020\000\022\014\n\010ACTIVATE\020"
      "\001\022\016\n\nDEACTIVATE\020\002\"G\n\013AlarmMember\022\020\n\010memb"
      "erID\030\001 \001(\004\022&\n\005alarm\030\002 \001(\0162\027.etcdserverpb"
      ".AlarmType\"h\n\rAlarmResponse\022,\n\006header\030\001 "
      "\001(\0132\034.etcdserverpb.ResponseHeader\022)\n\006ala"
      "rms\030\002 \003(\0132\031.etcdserverpb.AlarmMember\"\017\n\r"
      "StatusRequest\"\224\001\n\016StatusResponse\022,\n\006head"
      "er\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\022\017"
      "\n\007version\030\002 \001(\t\022\016\n\006dbSize\030\003 \001(\003\022\016\n\006leade"
      "r\030\004 \001(\004\022\021\n\traftIndex\030\005 \001(\004\022\020\n\010raftTerm\030\006"
      " \001(\004\"\023\n\021AuthEnableRequest\"\024\n\022AuthDisable"
      "Request\"5\n\023AuthenticateRequest\022\014\n\004name\030\001"
      " \001(\t\022\020\n\010password\030\002 \001(\t\"4\n\022AuthUserAddReq"
      "uest\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\"\n\022"
      "AuthUserGetRequest\022\014\n\004name\030\001 \001(\t\"%\n\025Auth"
      "UserDeleteRequest\022\014\n\004name\030\001 \001(\t\"\?\n\035AuthU"
      "serChangePasswordRequest\022\014\n\004name\030\001 \001(\t\022\020"
      "\n\010password\030\002 \001(\t\"6\n\030AuthUserGrantRoleReq"
      "uest\022\014\n\004user\030\001 \001(\t\022\014\n\004role\030\002 \001(\t\"7\n\031Auth"
      "UserRevokeRoleRequest\022\014\n\004name\030\001 \001(\t\022\014\n\004r"
      "ole\030\002 \001(\t\"\"\n\022AuthRoleAddRequest\022\014\n\004name\030"
      "\001 \001(\t\"\"\n\022AuthRoleGetRequest\022\014\n\004role\030\001 \001("
      "\t\"\025\n\023AuthUserListRequest\"\025\n\023AuthRoleList"
      "Request\"%\n\025AuthRoleDeleteRequest\022\014\n\004role"
      "\030\001 \001(\t\"P\n\036AuthRoleGrantPermissionRequest"
      "\022\014\n\004name\030\001 \001(\t\022 \n\004perm\030\002 \001(\0132\022.authpb.Pe"
      "rmission\"O\n\037AuthRoleRevokePermissionRequ"
      "est\022\014\n\004role\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\021\n\trange_"
      "end\030\003 \001(\t\"B\n\022AuthEnableResponse\022,\n\006heade"
      "r\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\"C\n"
      "\023AuthDisableResponse\022,\n\006header\030\001 \001(\0132\034.e"
      "tcdserverpb.ResponseHeader\"S\n\024Authentica"
      "teResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverp"
      "b.ResponseHeader\022\r\n\005token\030\002 \001(\t\"C\n\023AuthU"
      "serAddResponse\022,\n\006header\030\001 \001(\0132\034.etcdser"
      "verpb.ResponseHeader\"R\n\023AuthUserGetRespo"
      "nse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respo"
      "nseHeader\022\r\n\005roles\030\002 \003(\t\"F\n\026AuthUserDele"
      "teResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverp"
      "b.ResponseHeader\"N\n\036AuthUserChangePasswo"
      "rdResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverp"
      "b.ResponseHeader\"I\n\031AuthUserGrantRoleRes"
      "ponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Res"
      "ponseHeader\"J\n\032AuthUserRevokeRoleRespons"
      "e\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respons"
      "eHeader\"C\n\023AuthRoleAddResponse\022,\n\006header"
      "\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\"e\n\023"
      "AuthRoleGetResponse\022,\n\006header\030\001 \001(\0132\034.et"
      "cdserverpb.ResponseHeader\022 \n\004perm\030\002 \003(\0132"
      "\022.authpb.Permission\"S\n\024AuthRoleListRespo"
      "nse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respo"
      "nseHeader\022\r\n\005roles\030\002 \003(\t\"S\n\024AuthUserList"
      "Response\022,\n\006header\030\001 \001(\0132\034.etcdserverpb."
      "ResponseHeader\022\r\n\005users\030\002 \003(\t\"F\n\026AuthRol"
      "eDeleteResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
      "rverpb.ResponseHeader\"O\n\037AuthRoleGrantPe"
      "rmissionResponse\022,\n\006header\030\001 \001(\0132\034.etcds"
      "erverpb.ResponseHeader\"P\n AuthRoleRevoke"
      "PermissionResponse\022,\n\006header\030\001 \001(\0132\034.etc"
      "dserverpb.ResponseHeader*\"\n\tAlarmType\022\010\n"
      "\004NONE\020\000\022\013\n\007NOSPACE\020\0012\352\002\n\002KV\022B\n\005Range\022\032.e"
      "tcdserverpb.RangeRequest\032\033.etcdserverpb."
      "RangeResponse\"\000\022<\n\003Put\022\030.etcdserverpb.Pu"
      "tRequest\032\031.etcdserverpb.PutResponse\"\000\022T\n"
      "\013DeleteRange\022 .etcdserverpb.DeleteRangeR"
      "equest\032!.etcdserverpb.DeleteRangeRespons"
      "e\"\000\022<\n\003Txn\022\030.etcdserverpb.TxnRequest\032\031.e"
      "tcdserverpb.TxnResponse\"\000\022N\n\007Compact\022\037.e"
      "tcdserverpb.CompactionRequest\032 .etcdserv"
      "erpb.CompactionResponse\"\0002O\n\005Watch\022F\n\005Wa"
      "tch\022\032.etcdserverpb.WatchRequest\032\033.etcdse"
      "rverpb.WatchResponse\"\000(\0010\0012\223\002\n\005Lease\022Q\n\n"
      "LeaseGrant\022\037.etcdserverpb.LeaseGrantRequ"
      "est\032 .etcdserverpb.LeaseGrantResponse\"\000\022"
      "T\n\013LeaseRevoke\022 .etcdserverpb.LeaseRevok"
      "eRequest\032!.etcdserverpb.LeaseRevokeRespo"
      "nse\"\000\022a\n\016LeaseKeepAlive\022#.etcdserverpb.L"
      "easeKeepAliveRequest\032$.etcdserverpb.Leas"
      "eKeepAliveResponse\"\000(\0010\0012\336\002\n\007Cluster\022N\n\t"
      "MemberAdd\022\036.etcdserverpb.MemberAddReques"
      "t\032\037.etcdserverpb.MemberAddResponse\"\000\022W\n\014"
      "MemberRemove\022!.etcdserverpb.MemberRemove"
      "Request\032\".etcdserverpb.MemberRemoveRespo"
      "nse\"\000\022W\n\014MemberUpdate\022!.etcdserverpb.Mem"
      "berUpdateRequest\032\".etcdserverpb.MemberUp"
      "dateResponse\"\000\022Q\n\nMemberList\022\037.etcdserve"
      "rpb.MemberListRequest\032 .etcdserverpb.Mem"
      "berListResponse\"\0002\373\002\n\013Maintenance\022B\n\005Ala"
      "rm\022\032.etcdserverpb.AlarmRequest\032\033.etcdser"
      "verpb.AlarmResponse\"\000\022E\n\006Status\022\033.etcdse"
      "rverpb.StatusRequest\032\034.etcdserverpb.Stat"
      "usResponse\"\000\022Q\n\nDefragment\022\037.etcdserverp"
      "b.DefragmentRequest\032 .etcdserverpb.Defra"
      "gmentResponse\"\000\022\?\n\004Hash\022\031.etcdserverpb.H"
      "ashRequest\032\032.etcdserverpb.HashResponse\"\000"
      "\022M\n\010Snapshot\022\035.etcdserverpb.SnapshotRequ"
      "est\032\036.etcdserverpb.SnapshotResponse\"\0000\0012"
      "\335\013\n\004Auth\022Q\n\nAuthEnable\022\037.etcdserverpb.Au"
      "thEnableRequest\032 .etcdserverpb.AuthEnabl"
      "eResponse\"\000\022T\n\013AuthDisable\022 .etcdserverp"
      "b.AuthDisableRequest\032!.etcdserverpb.Auth"
      "DisableResponse\"\000\022W\n\014Authenticate\022!.etcd"
      "serverpb.AuthenticateRequest\032\".etcdserve"
      "rpb.AuthenticateResponse\"\000\022P\n\007UserAdd\022 ."
      "etcdserverpb.AuthUserAddRequest\032!.etcdse"
      "rverpb.AuthUserAddResponse\"\000\022P\n\007UserGet\022"
      " .etcdserverpb.AuthUserGetRequest\032!.etcd"
      "serverpb.AuthUserGetResponse\"\000\022S\n\010UserLi"
      "st\022!.etcdserverpb.AuthUserListRequest\032\"."
      "etcdserverpb.AuthUserListResponse\"\000\022Y\n\nU"
      "serDelete\022#.etcdserverpb.AuthUserDeleteR"
      "equest\032$.etcdserverpb.AuthUserDeleteResp"
      "onse\"\000\022q\n\022UserChangePassword\022+.etcdserve"
      "rpb.AuthUserChangePasswordRequest\032,.etcd"
      "serverpb.AuthUserChangePasswordResponse\""
      "\000\022b\n\rUserGrantRole\022&.etcdserverpb.AuthUs"
      "erGrantRoleRequest\032\'.etcdserverpb.AuthUs"
      "erGrantRoleResponse\"\000\022e\n\016UserRevokeRole\022"
      "\'.etcdserverpb.AuthUserRevokeRoleRequest"
      "\032(.etcdserverpb.AuthUserRevokeRoleRespon"
      "se\"\000\022P\n\007RoleAdd\022 .etcdserverpb.AuthRoleA"
      "ddRequest\032!.etcdserverpb.AuthRoleAddResp"
      "onse\"\000\022P\n\007RoleGet\022 .etcdserverpb.AuthRol"
      "eGetRequest\032!.etcdserverpb.AuthRoleGetRe"
      "sponse\"\000\022S\n\010RoleList\022!.etcdserverpb.Auth"
      "RoleListRequest\032\".etcdserverpb.AuthRoleL"
      "istResponse\"\000\022Y\n\nRoleDelete\022#.etcdserver"
      "pb.AuthRoleDeleteRequest\032$.etcdserverpb."
      "AuthRoleDeleteResponse\"\000\022t\n\023RoleGrantPer"
      "mission\022,.etcdserverpb.AuthRoleGrantPerm"
      "issionRequest\032-.etcdserverpb.AuthRoleGra"
      "ntPermissionResponse\"\000\022w\n\024RoleRevokePerm"
      "ission\022-.etcdserverpb.AuthRoleRevokePerm"
      "issionRequest\032..etcdserverpb.AuthRoleRev"
      "okePermissionResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  ::mvccpb::protobuf_kv_2eproto::AddDescriptors();
  ::authpb::protobuf_auth_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rpc_2eproto

const ::google::protobuf::EnumDescriptor* RangeRequest_SortOrder_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[0];
}
bool RangeRequest_SortOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RangeRequest_SortOrder RangeRequest::NONE;
const RangeRequest_SortOrder RangeRequest::ASCEND;
const RangeRequest_SortOrder RangeRequest::DESCEND;
const RangeRequest_SortOrder RangeRequest::SortOrder_MIN;
const RangeRequest_SortOrder RangeRequest::SortOrder_MAX;
const int RangeRequest::SortOrder_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RangeRequest_SortTarget_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[1];
}
bool RangeRequest_SortTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RangeRequest_SortTarget RangeRequest::KEY;
const RangeRequest_SortTarget RangeRequest::VERSION;
const RangeRequest_SortTarget RangeRequest::CREATE;
const RangeRequest_SortTarget RangeRequest::MOD;
const RangeRequest_SortTarget RangeRequest::VALUE;
const RangeRequest_SortTarget RangeRequest::SortTarget_MIN;
const RangeRequest_SortTarget RangeRequest::SortTarget_MAX;
const int RangeRequest::SortTarget_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Compare_CompareResult_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[2];
}
bool Compare_CompareResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Compare_CompareResult Compare::EQUAL;
const Compare_CompareResult Compare::GREATER;
const Compare_CompareResult Compare::LESS;
const Compare_CompareResult Compare::CompareResult_MIN;
const Compare_CompareResult Compare::CompareResult_MAX;
const int Compare::CompareResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Compare_CompareTarget_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[3];
}
bool Compare_CompareTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Compare_CompareTarget Compare::VERSION;
const Compare_CompareTarget Compare::CREATE;
const Compare_CompareTarget Compare::MOD;
const Compare_CompareTarget Compare::VALUE;
const Compare_CompareTarget Compare::CompareTarget_MIN;
const Compare_CompareTarget Compare::CompareTarget_MAX;
const int Compare::CompareTarget_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WatchCreateRequest_FilterType_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[4];
}
bool WatchCreateRequest_FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WatchCreateRequest_FilterType WatchCreateRequest::NOPUT;
const WatchCreateRequest_FilterType WatchCreateRequest::NODELETE;
const WatchCreateRequest_FilterType WatchCreateRequest::FilterType_MIN;
const WatchCreateRequest_FilterType WatchCreateRequest::FilterType_MAX;
const int WatchCreateRequest::FilterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AlarmRequest_AlarmAction_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[5];
}
bool AlarmRequest_AlarmAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AlarmRequest_AlarmAction AlarmRequest::GET;
const AlarmRequest_AlarmAction AlarmRequest::ACTIVATE;
const AlarmRequest_AlarmAction AlarmRequest::DEACTIVATE;
const AlarmRequest_AlarmAction AlarmRequest::AlarmAction_MIN;
const AlarmRequest_AlarmAction AlarmRequest::AlarmAction_MAX;
const int AlarmRequest::AlarmAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AlarmType_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[6];
}
bool AlarmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kMemberIdFieldNumber;
const int ResponseHeader::kRevisionFieldNumber;
const int ResponseHeader::kRaftTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cluster_id_, &from.cluster_id_,
    reinterpret_cast<char*>(&raft_term_) -
    reinterpret_cast<char*>(&cluster_id_) + sizeof(raft_term_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&cluster_id_, 0, reinterpret_cast<char*>(&raft_term_) -
    reinterpret_cast<char*>(&cluster_id_) + sizeof(raft_term_));
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:etcdserverpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[0].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.ResponseHeader)
  ::memset(&cluster_id_, 0, reinterpret_cast<char*>(&raft_term_) -
    reinterpret_cast<char*>(&cluster_id_) + sizeof(raft_term_));
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 member_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 revision = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 raft_term = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raft_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.ResponseHeader)
  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->member_id(), output);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->revision(), output);
  }

  // uint64 raft_term = 4;
  if (this->raft_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->raft_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.ResponseHeader)
  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_id(), target);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->revision(), target);
  }

  // uint64 raft_term = 4;
  if (this->raft_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->raft_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.ResponseHeader)
  size_t total_size = 0;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->revision());
  }

  // uint64 raft_term = 4;
  if (this->raft_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->raft_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
  if (from.raft_term() != 0) {
    set_raft_term(from.raft_term());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  std::swap(cluster_id_, other->cluster_id_);
  std::swap(member_id_, other->member_id_);
  std::swap(revision_, other->revision_);
  std::swap(raft_term_, other->raft_term_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// uint64 cluster_id = 1;
void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.cluster_id)
}

// uint64 member_id = 2;
void ResponseHeader::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::member_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.member_id)
  return member_id_;
}
void ResponseHeader::set_member_id(::google::protobuf::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.member_id)
}

// int64 revision = 3;
void ResponseHeader::clear_revision() {
  revision_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseHeader::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.revision)
  return revision_;
}
void ResponseHeader::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.revision)
}

// uint64 raft_term = 4;
void ResponseHeader::clear_raft_term() {
  raft_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::raft_term() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.raft_term)
  return raft_term_;
}
void ResponseHeader::set_raft_term(::google::protobuf::uint64 value) {
  
  raft_term_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.raft_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeRequest::kKeyFieldNumber;
const int RangeRequest::kRangeEndFieldNumber;
const int RangeRequest::kLimitFieldNumber;
const int RangeRequest::kRevisionFieldNumber;
const int RangeRequest::kSortOrderFieldNumber;
const int RangeRequest::kSortTargetFieldNumber;
const int RangeRequest::kSerializableFieldNumber;
const int RangeRequest::kKeysOnlyFieldNumber;
const int RangeRequest::kCountOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeRequest::RangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.RangeRequest)
}
RangeRequest::RangeRequest(const RangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.range_end().size() > 0) {
    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  ::memcpy(&limit_, &from.limit_,
    reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&limit_) + sizeof(count_only_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RangeRequest)
}

void RangeRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&limit_) + sizeof(count_only_));
  _cached_size_ = 0;
}

RangeRequest::~RangeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RangeRequest)
  SharedDtor();
}

void RangeRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[1].descriptor;
}

const RangeRequest& RangeRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeRequest* RangeRequest::New(::google::protobuf::Arena* arena) const {
  RangeRequest* n = new RangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RangeRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&limit_) + sizeof(count_only_));
}

bool RangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.RangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes range_end = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 revision = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sort_order(static_cast< ::etcdserverpb::RangeRequest_SortOrder >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sort_target(static_cast< ::etcdserverpb::RangeRequest_SortTarget >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool serializable = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &serializable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keys_only = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keys_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool count_only = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &count_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.RangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.RangeRequest)
  return false;
#undef DO_
}

void RangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.RangeRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->range_end(), output);
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->limit(), output);
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->revision(), output);
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->sort_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sort_order(), output);
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->sort_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sort_target(), output);
  }

  // bool serializable = 7;
  if (this->serializable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->serializable(), output);
  }

  // bool keys_only = 8;
  if (this->keys_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->keys_only(), output);
  }

  // bool count_only = 9;
  if (this->count_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->count_only(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.RangeRequest)
}

::google::protobuf::uint8* RangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RangeRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->range_end(), target);
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->limit(), target);
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->revision(), target);
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->sort_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sort_order(), target);
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->sort_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sort_target(), target);
  }

  // bool serializable = 7;
  if (this->serializable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->serializable(), target);
  }

  // bool keys_only = 8;
  if (this->keys_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->keys_only(), target);
  }

  // bool count_only = 9;
  if (this->count_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->count_only(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RangeRequest)
  return target;
}

size_t RangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RangeRequest)
  size_t total_size = 0;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->range_end());
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->revision());
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->sort_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_order());
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->sort_target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_target());
  }

  // bool serializable = 7;
  if (this->serializable() != 0) {
    total_size += 1 + 1;
  }

  // bool keys_only = 8;
  if (this->keys_only() != 0) {
    total_size += 1 + 1;
  }

  // bool count_only = 9;
  if (this->count_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.RangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.RangeRequest)
    MergeFrom(*source);
  }
}

void RangeRequest::MergeFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
  if (from.sort_order() != 0) {
    set_sort_order(from.sort_order());
  }
  if (from.sort_target() != 0) {
    set_sort_target(from.sort_target());
  }
  if (from.serializable() != 0) {
    set_serializable(from.serializable());
  }
  if (from.keys_only() != 0) {
    set_keys_only(from.keys_only());
  }
  if (from.count_only() != 0) {
    set_count_only(from.count_only());
  }
}

void RangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeRequest::CopyFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeRequest::IsInitialized() const {
  return true;
}

void RangeRequest::Swap(RangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeRequest::InternalSwap(RangeRequest* other) {
  key_.Swap(&other->key_);
  range_end_.Swap(&other->range_end_);
  std::swap(limit_, other->limit_);
  std::swap(revision_, other->revision_);
  std::swap(sort_order_, other->sort_order_);
  std::swap(sort_target_, other->sort_target_);
  std::swap(serializable_, other->serializable_);
  std::swap(keys_only_, other->keys_only_);
  std::swap(count_only_, other->count_only_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeRequest

// bytes key = 1;
void RangeRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.key)
  return key_.GetNoArena();
}
void RangeRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.key)
}
#if LANG_CXX11
void RangeRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.RangeRequest.key)
}
#endif
void RangeRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.RangeRequest.key)
}
void RangeRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.RangeRequest.key)
}
::std::string* RangeRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RangeRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RangeRequest.key)
}

// bytes range_end = 2;
void RangeRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.range_end)
  return range_end_.GetNoArena();
}
void RangeRequest::set_range_end(const ::std::string& value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.range_end)
}
#if LANG_CXX11
void RangeRequest::set_range_end(::std::string&& value) {
  
  range_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.RangeRequest.range_end)
}
#endif
void RangeRequest::set_range_end(const char* value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.RangeRequest.range_end)
}
void RangeRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.RangeRequest.range_end)
}
::std::string* RangeRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeRequest.range_end)
  return range_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RangeRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeRequest::set_allocated_range_end(::std::string* range_end) {
  if (range_end != NULL) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RangeRequest.range_end)
}

// int64 limit = 3;
void RangeRequest::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RangeRequest::limit() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.limit)
  return limit_;
}
void RangeRequest::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.limit)
}

// int64 revision = 4;
void RangeRequest::clear_revision() {
  revision_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RangeRequest::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.revision)
  return revision_;
}
void RangeRequest::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.revision)
}

// .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
void RangeRequest::clear_sort_order() {
  sort_order_ = 0;
}
::etcdserverpb::RangeRequest_SortOrder RangeRequest::sort_order() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.sort_order)
  return static_cast< ::etcdserverpb::RangeRequest_SortOrder >(sort_order_);
}
void RangeRequest::set_sort_order(::etcdserverpb::RangeRequest_SortOrder value) {
  
  sort_order_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.sort_order)
}

// .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
void RangeRequest::clear_sort_target() {
  sort_target_ = 0;
}
::etcdserverpb::RangeRequest_SortTarget RangeRequest::sort_target() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.sort_target)
  return static_cast< ::etcdserverpb::RangeRequest_SortTarget >(sort_target_);
}
void RangeRequest::set_sort_target(::etcdserverpb::RangeRequest_SortTarget value) {
  
  sort_target_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.sort_target)
}

// bool serializable = 7;
void RangeRequest::clear_serializable() {
  serializable_ = false;
}
bool RangeRequest::serializable() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.serializable)
  return serializable_;
}
void RangeRequest::set_serializable(bool value) {
  
  serializable_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.serializable)
}

// bool keys_only = 8;
void RangeRequest::clear_keys_only() {
  keys_only_ = false;
}
bool RangeRequest::keys_only() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.keys_only)
  return keys_only_;
}
void RangeRequest::set_keys_only(bool value) {
  
  keys_only_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.keys_only)
}

// bool count_only = 9;
void RangeRequest::clear_count_only() {
  count_only_ = false;
}
bool RangeRequest::count_only() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.count_only)
  return count_only_;
}
void RangeRequest::set_count_only(bool value) {
  
  count_only_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.count_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeResponse::kHeaderFieldNumber;
const int RangeResponse::kKvsFieldNumber;
const int RangeResponse::kMoreFieldNumber;
const int RangeResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeResponse::RangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.RangeResponse)
}
RangeResponse::RangeResponse(const RangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kvs_(from.kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&count_) + sizeof(more_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RangeResponse)
}

void RangeResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&header_) + sizeof(more_));
  _cached_size_ = 0;
}

RangeResponse::~RangeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RangeResponse)
  SharedDtor();
}

void RangeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[2].descriptor;
}

const RangeResponse& RangeResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeResponse* RangeResponse::New(::google::protobuf::Arena* arena) const {
  RangeResponse* n = new RangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RangeResponse)
  kvs_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&count_, 0, reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&count_) + sizeof(more_));
}

bool RangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.RangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mvccpb.KeyValue kvs = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bool more = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.RangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.RangeResponse)
  return false;
#undef DO_
}

void RangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.RangeResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .mvccpb.KeyValue kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(i), output);
  }

  // bool more = 3;
  if (this->more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->more(), output);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.RangeResponse)
}

::google::protobuf::uint8* RangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RangeResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .mvccpb.KeyValue kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kvs(i), false, target);
  }

  // bool more = 3;
  if (this->more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->more(), target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RangeResponse)
  return target;
}

size_t RangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RangeResponse)
  size_t total_size = 0;

  // repeated .mvccpb.KeyValue kvs = 2;
  {
    unsigned int count = this->kvs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // bool more = 3;
  if (this->more() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.RangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.RangeResponse)
    MergeFrom(*source);
  }
}

void RangeResponse::MergeFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.more() != 0) {
    set_more(from.more());
  }
}

void RangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeResponse::CopyFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeResponse::IsInitialized() const {
  return true;
}

void RangeResponse::Swap(RangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeResponse::InternalSwap(RangeResponse* other) {
  kvs_.UnsafeArenaSwap(&other->kvs_);
  std::swap(header_, other->header_);
  std::swap(count_, other->count_);
  std::swap(more_, other->more_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeResponse

// .etcdserverpb.ResponseHeader header = 1;
bool RangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& RangeResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* RangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* RangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RangeResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RangeResponse.header)
}

// repeated .mvccpb.KeyValue kvs = 2;
int RangeResponse::kvs_size() const {
  return kvs_.size();
}
void RangeResponse::clear_kvs() {
  kvs_.Clear();
}
const ::mvccpb::KeyValue& RangeResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.kvs)
  return kvs_.Get(index);
}
::mvccpb::KeyValue* RangeResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeResponse.kvs)
  return kvs_.Mutable(index);
}
::mvccpb::KeyValue* RangeResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:etcdserverpb.RangeResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::mvccpb::KeyValue >*
RangeResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.RangeResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::mvccpb::KeyValue >&
RangeResponse::kvs() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.RangeResponse.kvs)
  return kvs_;
}

// bool more = 3;
void RangeResponse::clear_more() {
  more_ = false;
}
bool RangeResponse::more() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.more)
  return more_;
}
void RangeResponse::set_more(bool value) {
  
  more_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeResponse.more)
}

// int64 count = 4;
void RangeResponse::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RangeResponse::count() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.count)
  return count_;
}
void RangeResponse::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeResponse.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
const int PutRequest::kLeaseFieldNumber;
const int PutRequest::kPrevKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&lease_, &from.lease_,
    reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&lease_) + sizeof(prev_kv_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.PutRequest)
}

void PutRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lease_, 0, reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&lease_) + sizeof(prev_kv_));
  _cached_size_ = 0;
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[3].descriptor;
}

const PutRequest& PutRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.PutRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lease_, 0, reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&lease_) + sizeof(prev_kv_));
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lease = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prev_kv = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_kv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.PutRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // int64 lease = 3;
  if (this->lease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lease(), output);
  }

  // bool prev_kv = 4;
  if (this->prev_kv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prev_kv(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.PutRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // int64 lease = 3;
  if (this->lease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lease(), target);
  }

  // bool prev_kv = 4;
  if (this->prev_kv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prev_kv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.PutRequest)
  size_t total_size = 0;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int64 lease = 3;
  if (this->lease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());
  }

  // bool prev_kv = 4;
  if (this->prev_kv() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lease() != 0) {
    set_lease(from.lease());
  }
  if (from.prev_kv() != 0) {
    set_prev_kv(from.prev_kv());
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(lease_, other->lease_);
  std::swap(prev_kv_, other->prev_kv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// bytes key = 1;
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.key)
  return key_.GetNoArena();
}
void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.key)
}
#if LANG_CXX11
void PutRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.PutRequest.key)
}
#endif
void PutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.PutRequest.key)
}
void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.PutRequest.key)
}
::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutRequest.key)
}

// bytes value = 2;
void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.value)
  return value_.GetNoArena();
}
void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.value)
}
#if LANG_CXX11
void PutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.PutRequest.value)
}
#endif
void PutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.PutRequest.value)
}
void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.PutRequest.value)
}
::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutRequest.value)
}

// int64 lease = 3;
void PutRequest::clear_lease() {
  lease_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PutRequest::lease() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.lease)
  return lease_;
}
void PutRequest::set_lease(::google::protobuf::int64 value) {
  
  lease_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.lease)
}

// bool prev_kv = 4;
void PutRequest::clear_prev_kv() {
  prev_kv_ = false;
}
bool PutRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.prev_kv)
  return prev_kv_;
}
void PutRequest::set_prev_kv(bool value) {
  
  prev_kv_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.prev_kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutResponse::kHeaderFieldNumber;
const int PutResponse::kPrevKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.PutResponse)
}
PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_prev_kv()) {
    prev_kv_ = new ::mvccpb::KeyValue(*from.prev_kv_);
  } else {
    prev_kv_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.PutResponse)
}

void PutResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&header_) + sizeof(prev_kv_));
  _cached_size_ = 0;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete prev_kv_;
  }
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[4].descriptor;
}

const PutResponse& PutResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.PutResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && prev_kv_ != NULL) {
    delete prev_kv_;
  }
  prev_kv_ = NULL;
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvccpb.KeyValue prev_kv = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.PutResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->has_prev_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->prev_kv_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.PutResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->has_prev_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->prev_kv_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.PutResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->has_prev_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prev_kv_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_prev_kv()) {
    mutable_prev_kv()->::mvccpb::KeyValue::MergeFrom(from.prev_kv());
  }
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {
  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  std::swap(header_, other->header_);
  std::swap(prev_kv_, other->prev_kv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutResponse

// .etcdserverpb.ResponseHeader header = 1;
bool PutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& PutResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* PutResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* PutResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PutResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutResponse.header)
}

// .mvccpb.KeyValue prev_kv = 2;
bool PutResponse::has_prev_kv() const {
  return this != internal_default_instance() && prev_kv_ != NULL;
}
void PutResponse::clear_prev_kv() {
  if (GetArenaNoVirtual() == NULL && prev_kv_ != NULL) delete prev_kv_;
  prev_kv_ = NULL;
}
const ::mvccpb::KeyValue& PutResponse::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutResponse.prev_kv)
  return prev_kv_ != NULL ? *prev_kv_
                         : *::mvccpb::KeyValue::internal_default_instance();
}
::mvccpb::KeyValue* PutResponse::mutable_prev_kv() {
  
  if (prev_kv_ == NULL) {
    prev_kv_ = new ::mvccpb::KeyValue;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutResponse.prev_kv)
  return prev_kv_;
}
::mvccpb::KeyValue* PutResponse::release_prev_kv() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutResponse.prev_kv)
  
  ::mvccpb::KeyValue* temp = prev_kv_;
  prev_kv_ = NULL;
  return temp;
}
void PutResponse::set_allocated_prev_kv(::mvccpb::KeyValue* prev_kv) {
  delete prev_kv_;
  prev_kv_ = prev_kv;
  if (prev_kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutResponse.prev_kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kKeyFieldNumber;
const int DeleteRangeRequest::kRangeEndFieldNumber;
const int DeleteRangeRequest::kPrevKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.range_end().size() > 0) {
    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  prev_kv_ = from.prev_kv_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_kv_ = false;
  _cached_size_ = 0;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[5].descriptor;
}

const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRangeRequest* DeleteRangeRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRangeRequest* n = new DeleteRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DeleteRangeRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_kv_ = false;
}

bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.DeleteRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes range_end = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prev_kv = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_kv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.DeleteRangeRequest)
  return false;
#undef DO_
}

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.DeleteRangeRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->range_end(), output);
  }

  // bool prev_kv = 3;
  if (this->prev_kv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prev_kv(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.DeleteRangeRequest)
}

::google::protobuf::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DeleteRangeRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->range_end(), target);
  }

  // bool prev_kv = 3;
  if (this->prev_kv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prev_kv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DeleteRangeRequest)
  size_t total_size = 0;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->range_end());
  }

  // bool prev_kv = 3;
  if (this->prev_kv() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DeleteRangeRequest)
    MergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.prev_kv() != 0) {
    set_prev_kv(from.prev_kv());
  }
}

void DeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  key_.Swap(&other->key_);
  range_end_.Swap(&other->range_end_);
  std::swap(prev_kv_, other->prev_kv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeRequest

// bytes key = 1;
void DeleteRangeRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeRequest.key)
  return key_.GetNoArena();
}
void DeleteRangeRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeRequest.key)
}
#if LANG_CXX11
void DeleteRangeRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.DeleteRangeRequest.key)
}
#endif
void DeleteRangeRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.DeleteRangeRequest.key)
}
void DeleteRangeRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.DeleteRangeRequest.key)
}
::std::string* DeleteRangeRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DeleteRangeRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DeleteRangeRequest.key)
}

// bytes range_end = 2;
void DeleteRangeRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeRequest.range_end)
  return range_end_.GetNoArena();
}
void DeleteRangeRequest::set_range_end(const ::std::string& value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeRequest.range_end)
}
#if LANG_CXX11
void DeleteRangeRequest::set_range_end(::std::string&& value) {
  
  range_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.DeleteRangeRequest.range_end)
}
#endif
void DeleteRangeRequest::set_range_end(const char* value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.DeleteRangeRequest.range_end)
}
void DeleteRangeRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.DeleteRangeRequest.range_end)
}
::std::string* DeleteRangeRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeRequest.range_end)
  return range_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DeleteRangeRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_range_end(::std::string* range_end) {
  if (range_end != NULL) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DeleteRangeRequest.range_end)
}

// bool prev_kv = 3;
void DeleteRangeRequest::clear_prev_kv() {
  prev_kv_ = false;
}
bool DeleteRangeRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeRequest.prev_kv)
  return prev_kv_;
}
void DeleteRangeRequest::set_prev_kv(bool value) {
  
  prev_kv_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeRequest.prev_kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeResponse::kHeaderFieldNumber;
const int DeleteRangeResponse::kDeletedFieldNumber;
const int DeleteRangeResponse::kPrevKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prev_kvs_(from.prev_kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  deleted_ = from.deleted_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&header_) + sizeof(deleted_));
  _cached_size_ = 0;
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[6].descriptor;
}

const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRangeResponse* DeleteRangeResponse::New(::google::protobuf::Arena* arena) const {
  DeleteRangeResponse* n = new DeleteRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DeleteRangeResponse)
  prev_kvs_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  deleted_ = GOOGLE_LONGLONG(0);
}

bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.DeleteRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 deleted = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mvccpb.KeyValue prev_kvs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prev_kvs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.DeleteRangeResponse)
  return false;
#undef DO_
}

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.DeleteRangeResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 deleted = 2;
  if (this->deleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->deleted(), output);
  }

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  for (unsigned int i = 0, n = this->prev_kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prev_kvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.DeleteRangeResponse)
}

::google::protobuf::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DeleteRangeResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 deleted = 2;
  if (this->deleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->deleted(), target);
  }

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  for (unsigned int i = 0, n = this->prev_kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->prev_kvs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DeleteRangeResponse)
  size_t total_size = 0;

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  {
    unsigned int count = this->prev_kvs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_kvs(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 deleted = 2;
  if (this->deleted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deleted());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DeleteRangeResponse)
    MergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prev_kvs_.MergeFrom(from.prev_kvs_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.deleted() != 0) {
    set_deleted(from.deleted());
  }
}

void DeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  prev_kvs_.UnsafeArenaSwap(&other->prev_kvs_);
  std::swap(header_, other->header_);
  std::swap(deleted_, other->deleted_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeResponse

// .etcdserverpb.ResponseHeader header = 1;
bool DeleteRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DeleteRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& DeleteRangeResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* DeleteRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* DeleteRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DeleteRangeResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DeleteRangeResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DeleteRangeResponse.header)
}

// int64 deleted = 2;
void DeleteRangeResponse::clear_deleted() {
  deleted_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeleteRangeResponse::deleted() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeResponse.deleted)
  return deleted_;
}
void DeleteRangeResponse::set_deleted(::google::protobuf::int64 value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeResponse.deleted)
}

// repeated .mvccpb.KeyValue prev_kvs = 3;
int DeleteRangeResponse::prev_kvs_size() const {
  return prev_kvs_.size();
}
void DeleteRangeResponse::clear_prev_kvs() {
  prev_kvs_.Clear();
}
const ::mvccpb::KeyValue& DeleteRangeResponse::prev_kvs(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Get(index);
}
::mvccpb::KeyValue* DeleteRangeResponse::mutable_prev_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Mutable(index);
}
::mvccpb::KeyValue* DeleteRangeResponse::add_prev_kvs() {
  // @@protoc_insertion_point(field_add:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::mvccpb::KeyValue >*
DeleteRangeResponse::mutable_prev_kvs() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return &prev_kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::mvccpb::KeyValue >&
DeleteRangeResponse::prev_kvs() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestOp::kRequestRangeFieldNumber;
const int RequestOp::kRequestPutFieldNumber;
const int RequestOp::kRequestDeleteRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestOp::RequestOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.RequestOp)
}
RequestOp::RequestOp(const RequestOp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kRequestRange: {
      mutable_request_range()->::etcdserverpb::RangeRequest::MergeFrom(from.request_range());
      break;
    }
    case kRequestPut: {
      mutable_request_put()->::etcdserverpb::PutRequest::MergeFrom(from.request_put());
      break;
    }
    case kRequestDeleteRange: {
      mutable_request_delete_range()->::etcdserverpb::DeleteRangeRequest::MergeFrom(from.request_delete_range());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RequestOp)
}

void RequestOp::SharedCtor() {
  clear_has_request();
  _cached_size_ = 0;
}

RequestOp::~RequestOp() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RequestOp)
  SharedDtor();
}

void RequestOp::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void RequestOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOp::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[7].descriptor;
}

const RequestOp& RequestOp::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestOp* RequestOp::New(::google::protobuf::Arena* arena) const {
  RequestOp* n = new RequestOp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestOp::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.RequestOp)
  switch (request_case()) {
    case kRequestRange: {
      delete request_.request_range_;
      break;
    }
    case kRequestPut: {
      delete request_.request_put_;
      break;
    }
    case kRequestDeleteRange: {
      delete request_.request_delete_range_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void RequestOp::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RequestOp)
  clear_request();
}

bool RequestOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.RequestOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.RangeRequest request_range = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.PutRequest request_put = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.RequestOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.RequestOp)
  return false;
#undef DO_
}

void RequestOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.RequestOp)
  // .etcdserverpb.RangeRequest request_range = 1;
  if (has_request_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_.request_range_, output);
  }

  // .etcdserverpb.PutRequest request_put = 2;
  if (has_request_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *request_.request_put_, output);
  }

  // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
  if (has_request_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *request_.request_delete_range_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.RequestOp)
}

::google::protobuf::uint8* RequestOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RequestOp)
  // .etcdserverpb.RangeRequest request_range = 1;
  if (has_request_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *request_.request_range_, false, target);
  }

  // .etcdserverpb.PutRequest request_put = 2;
  if (has_request_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *request_.request_put_, false, target);
  }

  // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
  if (has_request_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *request_.request_delete_range_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RequestOp)
  return target;
}

size_t RequestOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RequestOp)
  size_t total_size = 0;

  switch (request_case()) {
    // .etcdserverpb.RangeRequest request_range = 1;
    case kRequestRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.request_range_);
      break;
    }
    // .etcdserverpb.PutRequest request_put = 2;
    case kRequestPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.request_put_);
      break;
    }
    // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
    case kRequestDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.request_delete_range_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.RequestOp)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestOp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.RequestOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.RequestOp)
    MergeFrom(*source);
  }
}

void RequestOp::MergeFrom(const RequestOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RequestOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.request_case()) {
    case kRequestRange: {
      mutable_request_range()->::etcdserverpb::RangeRequest::MergeFrom(from.request_range());
      break;
    }
    case kRequestPut: {
      mutable_request_put()->::etcdserverpb::PutRequest::MergeFrom(from.request_put());
      break;
    }
    case kRequestDeleteRange: {
      mutable_request_delete_range()->::etcdserverpb::DeleteRangeRequest::MergeFrom(from.request_delete_range());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void RequestOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.RequestOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOp::CopyFrom(const RequestOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RequestOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOp::IsInitialized() const {
  return true;
}

void RequestOp::Swap(RequestOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestOp::InternalSwap(RequestOp* other) {
  std::swap(request_, other->request_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestOp::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestOp

// .etcdserverpb.RangeRequest request_range = 1;
bool RequestOp::has_request_range() const {
  return request_case() == kRequestRange;
}
void RequestOp::set_has_request_range() {
  _oneof_case_[0] = kRequestRange;
}
void RequestOp::clear_request_range() {
  if (has_request_range()) {
    delete request_.request_range_;
    clear_has_request();
  }
}
 const ::etcdserverpb::RangeRequest& RequestOp::request_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_range)
  return has_request_range()
      ? *request_.request_range_
      : ::etcdserverpb::RangeRequest::default_instance();
}
::etcdserverpb::RangeRequest* RequestOp::mutable_request_range() {
  if (!has_request_range()) {
    clear_request();
    set_has_request_range();
    request_.request_range_ = new ::etcdserverpb::RangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_range)
  return request_.request_range_;
}
::etcdserverpb::RangeRequest* RequestOp::release_request_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_range)
  if (has_request_range()) {
    clear_has_request();
    ::etcdserverpb::RangeRequest* temp = request_.request_range_;
    request_.request_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestOp::set_allocated_request_range(::etcdserverpb::RangeRequest* request_range) {
  clear_request();
  if (request_range) {
    set_has_request_range();
    request_.request_range_ = request_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_range)
}

// .etcdserverpb.PutRequest request_put = 2;
bool RequestOp::has_request_put() const {
  return request_case() == kRequestPut;
}
void RequestOp::set_has_request_put() {
  _oneof_case_[0] = kRequestPut;
}
void RequestOp::clear_request_put() {
  if (has_request_put()) {
    delete request_.request_put_;
    clear_has_request();
  }
}
 const ::etcdserverpb::PutRequest& RequestOp::request_put() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_put)
  return has_request_put()
      ? *request_.request_put_
      : ::etcdserverpb::PutRequest::default_instance();
}
::etcdserverpb::PutRequest* RequestOp::mutable_request_put() {
  if (!has_request_put()) {
    clear_request();
    set_has_request_put();
    request_.request_put_ = new ::etcdserverpb::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_put)
  return request_.request_put_;
}
::etcdserverpb::PutRequest* RequestOp::release_request_put() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_put)
  if (has_request_put()) {
    clear_has_request();
    ::etcdserverpb::PutRequest* temp = request_.request_put_;
    request_.request_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestOp::set_allocated_request_put(::etcdserverpb::PutRequest* request_put) {
  clear_request();
  if (request_put) {
    set_has_request_put();
    request_.request_put_ = request_put;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_put)
}

// .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
bool RequestOp::has_request_delete_range() const {
  return request_case() == kRequestDeleteRange;
}
void RequestOp::set_has_request_delete_range() {
  _oneof_case_[0] = kRequestDeleteRange;
}
void RequestOp::clear_request_delete_range() {
  if (has_request_delete_range()) {
    delete request_.request_delete_range_;
    clear_has_request();
  }
}
 const ::etcdserverpb::DeleteRangeRequest& RequestOp::request_delete_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_delete_range)
  return has_request_delete_range()
      ? *request_.request_delete_range_
      : ::etcdserverpb::DeleteRangeRequest::default_instance();
}
::etcdserverpb::DeleteRangeRequest* RequestOp::mutable_request_delete_range() {
  if (!has_request_delete_range()) {
    clear_request();
    set_has_request_delete_range();
    request_.request_delete_range_ = new ::etcdserverpb::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_delete_range)
  return request_.request_delete_range_;
}
::etcdserverpb::DeleteRangeRequest* RequestOp::release_request_delete_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_delete_range)
  if (has_request_delete_range()) {
    clear_has_request();
    ::etcdserverpb::DeleteRangeRequest* temp = request_.request_delete_range_;
    request_.request_delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestOp::set_allocated_request_delete_range(::etcdserverpb::DeleteRangeRequest* request_delete_range) {
  clear_request();
  if (request_delete_range) {
    set_has_request_delete_range();
    request_.request_delete_range_ = request_delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_delete_range)
}

bool RequestOp::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
void RequestOp::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
RequestOp::RequestCase RequestOp::request_case() const {
  return RequestOp::RequestCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseOp::kResponseRangeFieldNumber;
const int ResponseOp::kResponsePutFieldNumber;
const int ResponseOp::kResponseDeleteRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseOp::ResponseOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.ResponseOp)
}
ResponseOp::ResponseOp(const ResponseOp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kResponseRange: {
      mutable_response_range()->::etcdserverpb::RangeResponse::MergeFrom(from.response_range());
      break;
    }
    case kResponsePut: {
      mutable_response_put()->::etcdserverpb::PutResponse::MergeFrom(from.response_put());
      break;
    }
    case kResponseDeleteRange: {
      mutable_response_delete_range()->::etcdserverpb::DeleteRangeResponse::MergeFrom(from.response_delete_range());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.ResponseOp)
}

void ResponseOp::SharedCtor() {
  clear_has_response();
  _cached_size_ = 0;
}

ResponseOp::~ResponseOp() {
  // @@protoc_insertion_point(destructor:etcdserverpb.ResponseOp)
  SharedDtor();
}

void ResponseOp::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
}

void ResponseOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseOp::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[8].descriptor;
}

const ResponseOp& ResponseOp::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseOp* ResponseOp::New(::google::protobuf::Arena* arena) const {
  ResponseOp* n = new ResponseOp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.ResponseOp)
  switch (response_case()) {
    case kResponseRange: {
      delete response_.response_range_;
      break;
    }
    case kResponsePut: {
      delete response_.response_put_;
      break;
    }
    case kResponseDeleteRange: {
      delete response_.response_delete_range_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ResponseOp::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.ResponseOp)
  clear_response();
}

bool ResponseOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.ResponseOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.RangeResponse response_range = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.PutResponse response_put = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.ResponseOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.ResponseOp)
  return false;
#undef DO_
}

void ResponseOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.ResponseOp)
  // .etcdserverpb.RangeResponse response_range = 1;
  if (has_response_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *response_.response_range_, output);
  }

  // .etcdserverpb.PutResponse response_put = 2;
  if (has_response_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *response_.response_put_, output);
  }

  // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
  if (has_response_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *response_.response_delete_range_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.ResponseOp)
}

::google::protobuf::uint8* ResponseOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.ResponseOp)
  // .etcdserverpb.RangeResponse response_range = 1;
  if (has_response_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *response_.response_range_, false, target);
  }

  // .etcdserverpb.PutResponse response_put = 2;
  if (has_response_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *response_.response_put_, false, target);
  }

  // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
  if (has_response_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *response_.response_delete_range_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.ResponseOp)
  return target;
}

size_t ResponseOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.ResponseOp)
  size_t total_size = 0;

  switch (response_case()) {
    // .etcdserverpb.RangeResponse response_range = 1;
    case kResponseRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.response_range_);
      break;
    }
    // .etcdserverpb.PutResponse response_put = 2;
    case kResponsePut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.response_put_);
      break;
    }
    // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
    case kResponseDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.response_delete_range_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.ResponseOp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseOp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.ResponseOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.ResponseOp)
    MergeFrom(*source);
  }
}

void ResponseOp::MergeFrom(const ResponseOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.ResponseOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.response_case()) {
    case kResponseRange: {
      mutable_response_range()->::etcdserverpb::RangeResponse::MergeFrom(from.response_range());
      break;
    }
    case kResponsePut: {
      mutable_response_put()->::etcdserverpb::PutResponse::MergeFrom(from.response_put());
      break;
    }
    case kResponseDeleteRange: {
      mutable_response_delete_range()->::etcdserverpb::DeleteRangeResponse::MergeFrom(from.response_delete_range());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ResponseOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.ResponseOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseOp::CopyFrom(const ResponseOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.ResponseOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOp::IsInitialized() const {
  return true;
}

void ResponseOp::Swap(ResponseOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseOp::InternalSwap(ResponseOp* other) {
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseOp::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseOp

// .etcdserverpb.RangeResponse response_range = 1;
bool ResponseOp::has_response_range() const {
  return response_case() == kResponseRange;
}
void ResponseOp::set_has_response_range() {
  _oneof_case_[0] = kResponseRange;
}
void ResponseOp::clear_response_range() {
  if (has_response_range()) {
    delete response_.response_range_;
    clear_has_response();
  }
}
 const ::etcdserverpb::RangeResponse& ResponseOp::response_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_range)
  return has_response_range()
      ? *response_.response_range_
      : ::etcdserverpb::RangeResponse::default_instance();
}
::etcdserverpb::RangeResponse* ResponseOp::mutable_response_range() {
  if (!has_response_range()) {
    clear_response();
    set_has_response_range();
    response_.response_range_ = new ::etcdserverpb::RangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_range)
  return response_.response_range_;
}
::etcdserverpb::RangeResponse* ResponseOp::release_response_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_range)
  if (has_response_range()) {
    clear_has_response();
    ::etcdserverpb::RangeResponse* temp = response_.response_range_;
    response_.response_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ResponseOp::set_allocated_response_range(::etcdserverpb::RangeResponse* response_range) {
  clear_response();
  if (response_range) {
    set_has_response_range();
    response_.response_range_ = response_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_range)
}

// .etcdserverpb.PutResponse response_put = 2;
bool ResponseOp::has_response_put() const {
  return response_case() == kResponsePut;
}
void ResponseOp::set_has_response_put() {
  _oneof_case_[0] = kResponsePut;
}
void ResponseOp::clear_response_put() {
  if (has_response_put()) {
    delete response_.response_put_;
    clear_has_response();
  }
}
 const ::etcdserverpb::PutResponse& ResponseOp::response_put() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_put)
  return has_response_put()
      ? *response_.response_put_
      : ::etcdserverpb::PutResponse::default_instance();
}
::etcdserverpb::PutResponse* ResponseOp::mutable_response_put() {
  if (!has_response_put()) {
    clear_response();
    set_has_response_put();
    response_.response_put_ = new ::etcdserverpb::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_put)
  return response_.response_put_;
}
::etcdserverpb::PutResponse* ResponseOp::release_response_put() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_put)
  if (has_response_put()) {
    clear_has_response();
    ::etcdserverpb::PutResponse* temp = response_.response_put_;
    response_.response_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ResponseOp::set_allocated_response_put(::etcdserverpb::PutResponse* response_put) {
  clear_response();
  if (response_put) {
    set_has_response_put();
    response_.response_put_ = response_put;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_put)
}

// .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
bool ResponseOp::has_response_delete_range() const {
  return response_case() == kResponseDeleteRange;
}
void ResponseOp::set_has_response_delete_range() {
  _oneof_case_[0] = kResponseDeleteRange;
}
void ResponseOp::clear_response_delete_range() {
  if (has_response_delete_range()) {
    delete response_.response_delete_range_;
    clear_has_response();
  }
}
 const ::etcdserverpb::DeleteRangeResponse& ResponseOp::response_delete_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_delete_range)
  return has_response_delete_range()
      ? *response_.response_delete_range_
      : ::etcdserverpb::DeleteRangeResponse::default_instance();
}
::etcdserverpb::DeleteRangeResponse* ResponseOp::mutable_response_delete_range() {
  if (!has_response_delete_range()) {
    clear_response();
    set_has_response_delete_range();
    response_.response_delete_range_ = new ::etcdserverpb::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_delete_range)
  return response_.response_delete_range_;
}
::etcdserverpb::DeleteRangeResponse* ResponseOp::release_response_delete_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_delete_range)
  if (has_response_delete_range()) {
    clear_has_response();
    ::etcdserverpb::DeleteRangeResponse* temp = response_.response_delete_range_;
    response_.response_delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ResponseOp::set_allocated_response_delete_range(::etcdserverpb::DeleteRangeResponse* response_delete_range) {
  clear_response();
  if (response_delete_range) {
    set_has_response_delete_range();
    response_.response_delete_range_ = response_delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_delete_range)
}

bool ResponseOp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void ResponseOp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
ResponseOp::ResponseCase ResponseOp::response_case() const {
  return ResponseOp::ResponseCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Compare::kResultFieldNumber;
const int Compare::kTargetFieldNumber;
const int Compare::kKeyFieldNumber;
const int Compare::kVersionFieldNumber;
const int Compare::kCreateRevisionFieldNumber;
const int Compare::kModRevisionFieldNumber;
const int Compare::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Compare::Compare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.Compare)
}
Compare::Compare(const Compare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&result_) + sizeof(target_));
  clear_has_target_union();
  switch (from.target_union_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case kCreateRevision: {
      set_create_revision(from.create_revision());
      break;
    }
    case kModRevision: {
      set_mod_revision(from.mod_revision());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Compare)
}

void Compare::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&result_) + sizeof(target_));
  clear_has_target_union();
  _cached_size_ = 0;
}

Compare::~Compare() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Compare)
  SharedDtor();
}

void Compare::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target_union()) {
    clear_target_union();
  }
}

void Compare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Compare::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[9].descriptor;
}

const Compare& Compare::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Compare* Compare::New(::google::protobuf::Arena* arena) const {
  Compare* n = new Compare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Compare::clear_target_union() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.Compare)
  switch (target_union_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case kCreateRevision: {
      // No need to clear
      break;
    }
    case kModRevision: {
      // No need to clear
      break;
    }
    case kValue: {
      target_union_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_UNION_NOT_SET;
}


void Compare::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Compare)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&result_) + sizeof(target_));
  clear_target_union();
}

bool Compare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.Compare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.Compare.CompareResult result = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::etcdserverpb::Compare_CompareResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.Compare.CompareTarget target = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_target(static_cast< ::etcdserverpb::Compare_CompareTarget >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 version = 4;
      case 4: {
        if (tag == 32u) {
          clear_target_union();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_union_.version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_revision = 5;
      case 5: {
        if (tag == 40u) {
          clear_target_union();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_union_.create_revision_)));
          set_has_create_revision();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mod_revision = 6;
      case 6: {
        if (tag == 48u) {
          clear_target_union();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_union_.mod_revision_)));
          set_has_mod_revision();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.Compare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.Compare)
  return false;
#undef DO_
}

void Compare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.Compare)
  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->target(), output);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // int64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version(), output);
  }

  // int64 create_revision = 5;
  if (has_create_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->create_revision(), output);
  }

  // int64 mod_revision = 6;
  if (has_mod_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mod_revision(), output);
  }

  // bytes value = 7;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.Compare)
}

::google::protobuf::uint8* Compare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Compare)
  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->target(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // int64 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->version(), target);
  }

  // int64 create_revision = 5;
  if (has_create_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->create_revision(), target);
  }

  // int64 mod_revision = 6;
  if (has_mod_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mod_revision(), target);
  }

  // bytes value = 7;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Compare)
  return target;
}

size_t Compare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Compare)
  size_t total_size = 0;

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->target());
  }

  switch (target_union_case()) {
    // int64 version = 4;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
      break;
    }
    // int64 create_revision = 5;
    case kCreateRevision: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_revision());
      break;
    }
    // int64 mod_revision = 6;
    case kModRevision: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mod_revision());
      break;
    }
    // bytes value = 7;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Compare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  const Compare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Compare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.Compare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.Compare)
    MergeFrom(*source);
  }
}

void Compare::MergeFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  switch (from.target_union_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case kCreateRevision: {
      set_create_revision(from.create_revision());
      break;
    }
    case kModRevision: {
      set_mod_revision(from.mod_revision());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
}

void Compare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compare::CopyFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compare::IsInitialized() const {
  return true;
}

void Compare::Swap(Compare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Compare::InternalSwap(Compare* other) {
  key_.Swap(&other->key_);
  std::swap(result_, other->result_);
  std::swap(target_, other->target_);
  std::swap(target_union_, other->target_union_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Compare::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Compare

// .etcdserverpb.Compare.CompareResult result = 1;
void Compare::clear_result() {
  result_ = 0;
}
::etcdserverpb::Compare_CompareResult Compare::result() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.result)
  return static_cast< ::etcdserverpb::Compare_CompareResult >(result_);
}
void Compare::set_result(::etcdserverpb::Compare_CompareResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.result)
}

// .etcdserverpb.Compare.CompareTarget target = 2;
void Compare::clear_target() {
  target_ = 0;
}
::etcdserverpb::Compare_CompareTarget Compare::target() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.target)
  return static_cast< ::etcdserverpb::Compare_CompareTarget >(target_);
}
void Compare::set_target(::etcdserverpb::Compare_CompareTarget value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.target)
}

// bytes key = 3;
void Compare::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Compare::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.key)
  return key_.GetNoArena();
}
void Compare::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.key)
}
#if LANG_CXX11
void Compare::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Compare.key)
}
#endif
void Compare::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Compare.key)
}
void Compare::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Compare.key)
}
::std::string* Compare::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Compare.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Compare::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Compare.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Compare::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Compare.key)
}

// int64 version = 4;
bool Compare::has_version() const {
  return target_union_case() == kVersion;
}
void Compare::set_has_version() {
  _oneof_case_[0] = kVersion;
}
void Compare::clear_version() {
  if (has_version()) {
    target_union_.version_ = GOOGLE_LONGLONG(0);
    clear_has_target_union();
  }
}
::google::protobuf::int64 Compare::version() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.version)
  if (has_version()) {
    return target_union_.version_;
  }
  return GOOGLE_LONGLONG(0);
}
void Compare::set_version(::google::protobuf::int64 value) {
  if (!has_version()) {
    clear_target_union();
    set_has_version();
  }
  target_union_.version_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.version)
}

// int64 create_revision = 5;
bool Compare::has_create_revision() const {
  return target_union_case() == kCreateRevision;
}
void Compare::set_has_create_revision() {
  _oneof_case_[0] = kCreateRevision;
}
void Compare::clear_create_revision() {
  if (has_create_revision()) {
    target_union_.create_revision_ = GOOGLE_LONGLONG(0);
    clear_has_target_union();
  }
}
::google::protobuf::int64 Compare::create_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.create_revision)
  if (has_create_revision()) {
    return target_union_.create_revision_;
  }
  return GOOGLE_LONGLONG(0);
}
void Compare::set_create_revision(::google::protobuf::int64 value) {
  if (!has_create_revision()) {
    clear_target_union();
    set_has_create_revision();
  }
  target_union_.create_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.create_revision)
}

// int64 mod_revision = 6;
bool Compare::has_mod_revision() const {
  return target_union_case() == kModRevision;
}
void Compare::set_has_mod_revision() {
  _oneof_case_[0] = kModRevision;
}
void Compare::clear_mod_revision() {
  if (has_mod_revision()) {
    target_union_.mod_revision_ = GOOGLE_LONGLONG(0);
    clear_has_target_union();
  }
}
::google::protobuf::int64 Compare::mod_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.mod_revision)
  if (has_mod_revision()) {
    return target_union_.mod_revision_;
  }
  return GOOGLE_LONGLONG(0);
}
void Compare::set_mod_revision(::google::protobuf::int64 value) {
  if (!has_mod_revision()) {
    clear_target_union();
    set_has_mod_revision();
  }
  target_union_.mod_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.mod_revision)
}

// bytes value = 7;
bool Compare::has_value() const {
  return target_union_case() == kValue;
}
void Compare::set_has_value() {
  _oneof_case_[0] = kValue;
}
void Compare::clear_value() {
  if (has_value()) {
    target_union_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target_union();
  }
}
const ::std::string& Compare::value() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.value)
  if (has_value()) {
    return target_union_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Compare::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.value)
  if (!has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.value)
}
#if LANG_CXX11
void Compare::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.value)
  if (!has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Compare.value)
}
#endif
void Compare::set_value(const char* value) {
  if (!has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Compare.value)
}
void Compare::set_value(const void* value, size_t size) {
  if (!has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Compare.value)
}
::std::string* Compare::mutable_value() {
  if (!has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Compare.value)
  return target_union_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Compare::release_value() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Compare.value)
  if (has_value()) {
    clear_has_target_union();
    return target_union_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Compare::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    target_union_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target_union();
  if (value != NULL) {
    set_has_value();
    target_union_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Compare.value)
}

bool Compare::has_target_union() const {
  return target_union_case() != TARGET_UNION_NOT_SET;
}
void Compare::clear_has_target_union() {
  _oneof_case_[0] = TARGET_UNION_NOT_SET;
}
Compare::TargetUnionCase Compare::target_union_case() const {
  return Compare::TargetUnionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnRequest::kCompareFieldNumber;
const int TxnRequest::kSuccessFieldNumber;
const int TxnRequest::kFailureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnRequest::TxnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.TxnRequest)
}
TxnRequest::TxnRequest(const TxnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      compare_(from.compare_),
      success_(from.success_),
      failure_(from.failure_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.TxnRequest)
}

void TxnRequest::SharedCtor() {
  _cached_size_ = 0;
}

TxnRequest::~TxnRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.TxnRequest)
  SharedDtor();
}

void TxnRequest::SharedDtor() {
}

void TxnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[10].descriptor;
}

const TxnRequest& TxnRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnRequest* TxnRequest::New(::google::protobuf::Arena* arena) const {
  TxnRequest* n = new TxnRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.TxnRequest)
  compare_.Clear();
  success_.Clear();
  failure_.Clear();
}

bool TxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.TxnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .etcdserverpb.Compare compare = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_compare()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .etcdserverpb.RequestOp success = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_success()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .etcdserverpb.RequestOp failure = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_failure()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.TxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.TxnRequest)
  return false;
#undef DO_
}

void TxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.TxnRequest)
  // repeated .etcdserverpb.Compare compare = 1;
  for (unsigned int i = 0, n = this->compare_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compare(i), output);
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  for (unsigned int i = 0, n = this->success_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->success(i), output);
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  for (unsigned int i = 0, n = this->failure_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->failure(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.TxnRequest)
}

::google::protobuf::uint8* TxnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.TxnRequest)
  // repeated .etcdserverpb.Compare compare = 1;
  for (unsigned int i = 0, n = this->compare_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->compare(i), false, target);
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  for (unsigned int i = 0, n = this->success_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->success(i), false, target);
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  for (unsigned int i = 0, n = this->failure_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->failure(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.TxnRequest)
  return target;
}

size_t TxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.TxnRequest)
  size_t total_size = 0;

  // repeated .etcdserverpb.Compare compare = 1;
  {
    unsigned int count = this->compare_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compare(i));
    }
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  {
    unsigned int count = this->success_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success(i));
    }
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  {
    unsigned int count = this->failure_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->failure(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.TxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.TxnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.TxnRequest)
    MergeFrom(*source);
  }
}

void TxnRequest::MergeFrom(const TxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.TxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compare_.MergeFrom(from.compare_);
  success_.MergeFrom(from.success_);
  failure_.MergeFrom(from.failure_);
}

void TxnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.TxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnRequest::CopyFrom(const TxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.TxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnRequest::IsInitialized() const {
  return true;
}

void TxnRequest::Swap(TxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnRequest::InternalSwap(TxnRequest* other) {
  compare_.UnsafeArenaSwap(&other->compare_);
  success_.UnsafeArenaSwap(&other->success_);
  failure_.UnsafeArenaSwap(&other->failure_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnRequest

// repeated .etcdserverpb.Compare compare = 1;
int TxnRequest::compare_size() const {
  return compare_.size();
}
void TxnRequest::clear_compare() {
  compare_.Clear();
}
const ::etcdserverpb::Compare& TxnRequest::compare(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnRequest.compare)
  return compare_.Get(index);
}
::etcdserverpb::Compare* TxnRequest::mutable_compare(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnRequest.compare)
  return compare_.Mutable(index);
}
::etcdserverpb::Compare* TxnRequest::add_compare() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnRequest.compare)
  return compare_.Add();
}
::google::protobuf::RepeatedPtrField< ::etcdserverpb::Compare >*
TxnRequest::mutable_compare() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnRequest.compare)
  return &compare_;
}
const ::google::protobuf::RepeatedPtrField< ::etcdserverpb::Compare >&
TxnRequest::compare() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnRequest.compare)
  return compare_;
}

// repeated .etcdserverpb.RequestOp success = 2;
int TxnRequest::success_size() const {
  return success_.size();
}
void TxnRequest::clear_success() {
  success_.Clear();
}
const ::etcdserverpb::RequestOp& TxnRequest::success(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnRequest.success)
  return success_.Get(index);
}
::etcdserverpb::RequestOp* TxnRequest::mutable_success(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnRequest.success)
  return success_.Mutable(index);
}
::etcdserverpb::RequestOp* TxnRequest::add_success() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnRequest.success)
  return success_.Add();
}
::google::protobuf::RepeatedPtrField< ::etcdserverpb::RequestOp >*
TxnRequest::mutable_success() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnRequest.success)
  return &success_;
}
const ::google::protobuf::RepeatedPtrField< ::etcdserverpb::RequestOp >&
TxnRequest::success() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnRequest.success)
  return success_;
}

// repeated .etcdserverpb.RequestOp failure = 3;
int TxnRequest::failure_size() const {
  return failure_.size();
}
void TxnRequest::clear_failure() {
  failure_.Clear();
}
const ::etcdserverpb::RequestOp& TxnRequest::failure(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnRequest.failure)
  return failure_.Get(index);
}
::etcdserverpb::RequestOp* TxnRequest::mutable_failure(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnRequest.failure)
  return failure_.Mutable(index);
}
::etcdserverpb::RequestOp* TxnRequest::add_failure() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnRequest.failure)
  return failure_.Add();
}
::google::protobuf::RepeatedPtrField< ::etcdserverpb::RequestOp >*
TxnRequest::mutable_failure() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnRequest.failure)
  return &failure_;
}
const ::google::protobuf::RepeatedPtrField< ::etcdserverpb::RequestOp >&
TxnRequest::failure() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnRequest.failure)
  return failure_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnResponse::kHeaderFieldNumber;
const int TxnResponse::kSucceededFieldNumber;
const int TxnResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnResponse::TxnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.TxnResponse)
}
TxnResponse::TxnResponse(const TxnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      responses_(from.responses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  succeeded_ = from.succeeded_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.TxnResponse)
}

void TxnResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&succeeded_) -
    reinterpret_cast<char*>(&header_) + sizeof(succeeded_));
  _cached_size_ = 0;
}

TxnResponse::~TxnResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.TxnResponse)
  SharedDtor();
}

void TxnResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void TxnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[11].descriptor;
}

const TxnResponse& TxnResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnResponse* TxnResponse::New(::google::protobuf::Arena* arena) const {
  TxnResponse* n = new TxnResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.TxnResponse)
  responses_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  succeeded_ = false;
}

bool TxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.TxnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool succeeded = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .etcdserverpb.ResponseOp responses = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.TxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.TxnResponse)
  return false;
#undef DO_
}

void TxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.TxnResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool succeeded = 2;
  if (this->succeeded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->succeeded(), output);
  }

  // repeated .etcdserverpb.ResponseOp responses = 3;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->responses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.TxnResponse)
}

::google::protobuf::uint8* TxnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.TxnResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // bool succeeded = 2;
  if (this->succeeded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->succeeded(), target);
  }

  // repeated .etcdserverpb.ResponseOp responses = 3;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->responses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.TxnResponse)
  return target;
}

size_t TxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.TxnResponse)
  size_t total_size = 0;

  // repeated .etcdserverpb.ResponseOp responses = 3;
  {
    unsigned int count = this->responses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responses(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool succeeded = 2;
  if (this->succeeded() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.TxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.TxnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.TxnResponse)
    MergeFrom(*source);
  }
}

void TxnResponse::MergeFrom(const TxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.TxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.succeeded() != 0) {
    set_succeeded(from.succeeded());
  }
}

void TxnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.TxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnResponse::CopyFrom(const TxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.TxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnResponse::IsInitialized() const {
  return true;
}

void TxnResponse::Swap(TxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnResponse::InternalSwap(TxnResponse* other) {
  responses_.UnsafeArenaSwap(&other->responses_);
  std::swap(header_, other->header_);
  std::swap(succeeded_, other->succeeded_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnResponse

// .etcdserverpb.ResponseHeader header = 1;
bool TxnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TxnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& TxnResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* TxnResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* TxnResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.TxnResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TxnResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.TxnResponse.header)
}

// bool succeeded = 2;
void TxnResponse::clear_succeeded() {
  succeeded_ = false;
}
bool TxnResponse::succeeded() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnResponse.succeeded)
  return succeeded_;
}
void TxnResponse::set_succeeded(bool value) {
  
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.TxnResponse.succeeded)
}

// repeated .etcdserverpb.ResponseOp responses = 3;
int TxnResponse::responses_size() const {
  return responses_.size();
}
void TxnResponse::clear_responses() {
  responses_.Clear();
}
const ::etcdserverpb::ResponseOp& TxnResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnResponse.responses)
  return responses_.Get(index);
}
::etcdserverpb::ResponseOp* TxnResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnResponse.responses)
  return responses_.Mutable(index);
}
::etcdserverpb::ResponseOp* TxnResponse::add_responses() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::etcdserverpb::ResponseOp >*
TxnResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::etcdserverpb::ResponseOp >&
TxnResponse::responses() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnResponse.responses)
  return responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactionRequest::kRevisionFieldNumber;
const int CompactionRequest::kPhysicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactionRequest::CompactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.CompactionRequest)
}
CompactionRequest::CompactionRequest(const CompactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&revision_, &from.revision_,
    reinterpret_cast<char*>(&physical_) -
    reinterpret_cast<char*>(&revision_) + sizeof(physical_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.CompactionRequest)
}

void CompactionRequest::SharedCtor() {
  ::memset(&revision_, 0, reinterpret_cast<char*>(&physical_) -
    reinterpret_cast<char*>(&revision_) + sizeof(physical_));
  _cached_size_ = 0;
}

CompactionRequest::~CompactionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.CompactionRequest)
  SharedDtor();
}

void CompactionRequest::SharedDtor() {
}

void CompactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[12].descriptor;
}

const CompactionRequest& CompactionRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompactionRequest* CompactionRequest::New(::google::protobuf::Arena* arena) const {
  CompactionRequest* n = new CompactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.CompactionRequest)
  ::memset(&revision_, 0, reinterpret_cast<char*>(&physical_) -
    reinterpret_cast<char*>(&revision_) + sizeof(physical_));
}

bool CompactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.CompactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 revision = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool physical = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &physical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.CompactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.CompactionRequest)
  return false;
#undef DO_
}

void CompactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.CompactionRequest)
  // int64 revision = 1;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->revision(), output);
  }

  // bool physical = 2;
  if (this->physical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->physical(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.CompactionRequest)
}

::google::protobuf::uint8* CompactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.CompactionRequest)
  // int64 revision = 1;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->revision(), target);
  }

  // bool physical = 2;
  if (this->physical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->physical(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.CompactionRequest)
  return target;
}

size_t CompactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.CompactionRequest)
  size_t total_size = 0;

  // int64 revision = 1;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->revision());
  }

  // bool physical = 2;
  if (this->physical() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.CompactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.CompactionRequest)
    MergeFrom(*source);
  }
}

void CompactionRequest::MergeFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
  if (from.physical() != 0) {
    set_physical(from.physical());
  }
}

void CompactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionRequest::CopyFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionRequest::IsInitialized() const {
  return true;
}

void CompactionRequest::Swap(CompactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactionRequest::InternalSwap(CompactionRequest* other) {
  std::swap(revision_, other->revision_);
  std::swap(physical_, other->physical_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactionRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactionRequest

// int64 revision = 1;
void CompactionRequest::clear_revision() {
  revision_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CompactionRequest::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.CompactionRequest.revision)
  return revision_;
}
void CompactionRequest::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.CompactionRequest.revision)
}

// bool physical = 2;
void CompactionRequest::clear_physical() {
  physical_ = false;
}
bool CompactionRequest::physical() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.CompactionRequest.physical)
  return physical_;
}
void CompactionRequest::set_physical(bool value) {
  
  physical_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.CompactionRequest.physical)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactionResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactionResponse::CompactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.CompactionResponse)
}
CompactionResponse::CompactionResponse(const CompactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.CompactionResponse)
}

void CompactionResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CompactionResponse::~CompactionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.CompactionResponse)
  SharedDtor();
}

void CompactionResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CompactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[13].descriptor;
}

const CompactionResponse& CompactionResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompactionResponse* CompactionResponse::New(::google::protobuf::Arena* arena) const {
  CompactionResponse* n = new CompactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.CompactionResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CompactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.CompactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.CompactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.CompactionResponse)
  return false;
#undef DO_
}

void CompactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.CompactionResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.CompactionResponse)
}

::google::protobuf::uint8* CompactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.CompactionResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.CompactionResponse)
  return target;
}

size_t CompactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.CompactionResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.CompactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.CompactionResponse)
    MergeFrom(*source);
  }
}

void CompactionResponse::MergeFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void CompactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionResponse::CopyFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionResponse::IsInitialized() const {
  return true;
}

void CompactionResponse::Swap(CompactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactionResponse::InternalSwap(CompactionResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactionResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactionResponse

// .etcdserverpb.ResponseHeader header = 1;
bool CompactionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CompactionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& CompactionResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.CompactionResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* CompactionResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.CompactionResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* CompactionResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.CompactionResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CompactionResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.CompactionResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashRequest::HashRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.HashRequest)
}
HashRequest::HashRequest(const HashRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashRequest)
}

void HashRequest::SharedCtor() {
  _cached_size_ = 0;
}

HashRequest::~HashRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashRequest)
  SharedDtor();
}

void HashRequest::SharedDtor() {
}

void HashRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[14].descriptor;
}

const HashRequest& HashRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

HashRequest* HashRequest::New(::google::protobuf::Arena* arena) const {
  HashRequest* n = new HashRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashRequest)
}

bool HashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.HashRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.HashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.HashRequest)
  return false;
#undef DO_
}

void HashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.HashRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.HashRequest)
}

::google::protobuf::uint8* HashRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashRequest)
  return target;
}

size_t HashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.HashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HashRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HashRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.HashRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.HashRequest)
    MergeFrom(*source);
  }
}

void HashRequest::MergeFrom(const HashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void HashRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.HashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRequest::CopyFrom(const HashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRequest::IsInitialized() const {
  return true;
}

void HashRequest::Swap(HashRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashRequest::InternalSwap(HashRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashResponse::kHeaderFieldNumber;
const int HashResponse::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashResponse::HashResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.HashResponse)
}
HashResponse::HashResponse(const HashResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashResponse)
}

void HashResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&header_) + sizeof(hash_));
  _cached_size_ = 0;
}

HashResponse::~HashResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashResponse)
  SharedDtor();
}

void HashResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void HashResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[15].descriptor;
}

const HashResponse& HashResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

HashResponse* HashResponse::New(::google::protobuf::Arena* arena) const {
  HashResponse* n = new HashResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  hash_ = 0u;
}

bool HashResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.HashResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hash = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.HashResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.HashResponse)
  return false;
#undef DO_
}

void HashResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.HashResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.HashResponse)
}

::google::protobuf::uint8* HashResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashResponse)
  return target;
}

size_t HashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HashResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HashResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.HashResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.HashResponse)
    MergeFrom(*source);
  }
}

void HashResponse::MergeFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.hash() != 0) {
    set_hash(from.hash());
  }
}

void HashResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashResponse::CopyFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashResponse::IsInitialized() const {
  return true;
}

void HashResponse::Swap(HashResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashResponse::InternalSwap(HashResponse* other) {
  std::swap(header_, other->header_);
  std::swap(hash_, other->hash_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashResponse

// .etcdserverpb.ResponseHeader header = 1;
bool HashResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void HashResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& HashResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* HashResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.HashResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* HashResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.HashResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void HashResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.HashResponse.header)
}

// uint32 hash = 2;
void HashResponse::clear_hash() {
  hash_ = 0u;
}
::google::protobuf::uint32 HashResponse::hash() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashResponse.hash)
  return hash_;
}
void HashResponse::set_hash(::google::protobuf::uint32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.HashResponse.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotRequest::SnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.SnapshotRequest)
}
SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.SnapshotRequest)
}

void SnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
}

SnapshotRequest::~SnapshotRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.SnapshotRequest)
  SharedDtor();
}

void SnapshotRequest::SharedDtor() {
}

void SnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[16].descriptor;
}

const SnapshotRequest& SnapshotRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotRequest* SnapshotRequest::New(::google::protobuf::Arena* arena) const {
  SnapshotRequest* n = new SnapshotRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.SnapshotRequest)
}

bool SnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.SnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.SnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.SnapshotRequest)
  return false;
#undef DO_
}

void SnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.SnapshotRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.SnapshotRequest)
}

::google::protobuf::uint8* SnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.SnapshotRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.SnapshotRequest)
  return target;
}

size_t SnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.SnapshotRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.SnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.SnapshotRequest)
    MergeFrom(*source);
  }
}

void SnapshotRequest::MergeFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {
  return true;
}

void SnapshotRequest::Swap(SnapshotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotRequest::InternalSwap(SnapshotRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotResponse::kHeaderFieldNumber;
const int SnapshotResponse::kRemainingBytesFieldNumber;
const int SnapshotResponse::kBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotResponse::SnapshotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.SnapshotResponse)
}
SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  remaining_bytes_ = from.remaining_bytes_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.SnapshotResponse)
}

void SnapshotResponse::SharedCtor() {
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&remaining_bytes_) -
    reinterpret_cast<char*>(&header_) + sizeof(remaining_bytes_));
  _cached_size_ = 0;
}

SnapshotResponse::~SnapshotResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.SnapshotResponse)
  SharedDtor();
}

void SnapshotResponse::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[17].descriptor;
}

const SnapshotResponse& SnapshotResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotResponse* SnapshotResponse::New(::google::protobuf::Arena* arena) const {
  SnapshotResponse* n = new SnapshotResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.SnapshotResponse)
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  remaining_bytes_ = GOOGLE_ULONGLONG(0);
}

bool SnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.SnapshotResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 remaining_bytes = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remaining_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blob = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.SnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.SnapshotResponse)
  return false;
#undef DO_
}

void SnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.SnapshotResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 remaining_bytes = 2;
  if (this->remaining_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->remaining_bytes(), output);
  }

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blob(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.SnapshotResponse)
}

::google::protobuf::uint8* SnapshotResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.SnapshotResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // uint64 remaining_bytes = 2;
  if (this->remaining_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->remaining_bytes(), target);
  }

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blob(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.SnapshotResponse)
  return target;
}

size_t SnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.SnapshotResponse)
  size_t total_size = 0;

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 remaining_bytes = 2;
  if (this->remaining_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remaining_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.SnapshotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.SnapshotResponse)
    MergeFrom(*source);
  }
}

void SnapshotResponse::MergeFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.remaining_bytes() != 0) {
    set_remaining_bytes(from.remaining_bytes());
  }
}

void SnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  return true;
}

void SnapshotResponse::Swap(SnapshotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotResponse::InternalSwap(SnapshotResponse* other) {
  blob_.Swap(&other->blob_);
  std::swap(header_, other->header_);
  std::swap(remaining_bytes_, other->remaining_bytes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotResponse

// .etcdserverpb.ResponseHeader header = 1;
bool SnapshotResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SnapshotResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& SnapshotResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.SnapshotResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* SnapshotResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.SnapshotResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* SnapshotResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.SnapshotResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SnapshotResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.SnapshotResponse.header)
}

// uint64 remaining_bytes = 2;
void SnapshotResponse::clear_remaining_bytes() {
  remaining_bytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SnapshotResponse::remaining_bytes() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.SnapshotResponse.remaining_bytes)
  return remaining_bytes_;
}
void SnapshotResponse::set_remaining_bytes(::google::protobuf::uint64 value) {
  
  remaining_bytes_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.SnapshotResponse.remaining_bytes)
}

// bytes blob = 3;
void SnapshotResponse::clear_blob() {
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotResponse::blob() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.SnapshotResponse.blob)
  return blob_.GetNoArena();
}
void SnapshotResponse::set_blob(const ::std::string& value) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.SnapshotResponse.blob)
}
#if LANG_CXX11
void SnapshotResponse::set_blob(::std::string&& value) {
  
  blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.SnapshotResponse.blob)
}
#endif
void SnapshotResponse::set_blob(const char* value) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.SnapshotResponse.blob)
}
void SnapshotResponse::set_blob(const void* value, size_t size) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.SnapshotResponse.blob)
}
::std::string* SnapshotResponse::mutable_blob() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.SnapshotResponse.blob)
  return blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotResponse::release_blob() {
  // @@protoc_insertion_point(field_release:etcdserverpb.SnapshotResponse.blob)
  
  return blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotResponse::set_allocated_blob(::std::string* blob) {
  if (blob != NULL) {
    
  } else {
    
  }
  blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.SnapshotResponse.blob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchRequest::kCreateRequestFieldNumber;
const int WatchRequest::kCancelRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchRequest::WatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchRequest)
}
WatchRequest::WatchRequest(const WatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request_union();
  switch (from.request_union_case()) {
    case kCreateRequest: {
      mutable_create_request()->::etcdserverpb::WatchCreateRequest::MergeFrom(from.create_request());
      break;
    }
    case kCancelRequest: {
      mutable_cancel_request()->::etcdserverpb::WatchCancelRequest::MergeFrom(from.cancel_request());
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchRequest)
}

void WatchRequest::SharedCtor() {
  clear_has_request_union();
  _cached_size_ = 0;
}

WatchRequest::~WatchRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchRequest)
  SharedDtor();
}

void WatchRequest::SharedDtor() {
  if (has_request_union()) {
    clear_request_union();
  }
}

void WatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[18].descriptor;
}

const WatchRequest& WatchRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchRequest* WatchRequest::New(::google::protobuf::Arena* arena) const {
  WatchRequest* n = new WatchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchRequest::clear_request_union() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.WatchRequest)
  switch (request_union_case()) {
    case kCreateRequest: {
      delete request_union_.create_request_;
      break;
    }
    case kCancelRequest: {
      delete request_union_.cancel_request_;
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_UNION_NOT_SET;
}


void WatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchRequest)
  clear_request_union();
}

bool WatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.WatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.WatchCreateRequest create_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.WatchCancelRequest cancel_request = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.WatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.WatchRequest)
  return false;
#undef DO_
}

void WatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.WatchRequest)
  // .etcdserverpb.WatchCreateRequest create_request = 1;
  if (has_create_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_union_.create_request_, output);
  }

  // .etcdserverpb.WatchCancelRequest cancel_request = 2;
  if (has_cancel_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *request_union_.cancel_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.WatchRequest)
}

::google::protobuf::uint8* WatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchRequest)
  // .etcdserverpb.WatchCreateRequest create_request = 1;
  if (has_create_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *request_union_.create_request_, false, target);
  }

  // .etcdserverpb.WatchCancelRequest cancel_request = 2;
  if (has_cancel_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *request_union_.cancel_request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchRequest)
  return target;
}

size_t WatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchRequest)
  size_t total_size = 0;

  switch (request_union_case()) {
    // .etcdserverpb.WatchCreateRequest create_request = 1;
    case kCreateRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_union_.create_request_);
      break;
    }
    // .etcdserverpb.WatchCancelRequest cancel_request = 2;
    case kCancelRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_union_.cancel_request_);
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchRequest)
    MergeFrom(*source);
  }
}

void WatchRequest::MergeFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.request_union_case()) {
    case kCreateRequest: {
      mutable_create_request()->::etcdserverpb::WatchCreateRequest::MergeFrom(from.create_request());
      break;
    }
    case kCancelRequest: {
      mutable_cancel_request()->::etcdserverpb::WatchCancelRequest::MergeFrom(from.cancel_request());
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
}

void WatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchRequest::CopyFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchRequest::IsInitialized() const {
  return true;
}

void WatchRequest::Swap(WatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchRequest::InternalSwap(WatchRequest* other) {
  std::swap(request_union_, other->request_union_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchRequest

// .etcdserverpb.WatchCreateRequest create_request = 1;
bool WatchRequest::has_create_request() const {
  return request_union_case() == kCreateRequest;
}
void WatchRequest::set_has_create_request() {
  _oneof_case_[0] = kCreateRequest;
}
void WatchRequest::clear_create_request() {
  if (has_create_request()) {
    delete request_union_.create_request_;
    clear_has_request_union();
  }
}
 const ::etcdserverpb::WatchCreateRequest& WatchRequest::create_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.create_request)
  return has_create_request()
      ? *request_union_.create_request_
      : ::etcdserverpb::WatchCreateRequest::default_instance();
}
::etcdserverpb::WatchCreateRequest* WatchRequest::mutable_create_request() {
  if (!has_create_request()) {
    clear_request_union();
    set_has_create_request();
    request_union_.create_request_ = new ::etcdserverpb::WatchCreateRequest;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.create_request)
  return request_union_.create_request_;
}
::etcdserverpb::WatchCreateRequest* WatchRequest::release_create_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.create_request)
  if (has_create_request()) {
    clear_has_request_union();
    ::etcdserverpb::WatchCreateRequest* temp = request_union_.create_request_;
    request_union_.create_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void WatchRequest::set_allocated_create_request(::etcdserverpb::WatchCreateRequest* create_request) {
  clear_request_union();
  if (create_request) {
    set_has_create_request();
    request_union_.create_request_ = create_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.create_request)
}

// .etcdserverpb.WatchCancelRequest cancel_request = 2;
bool WatchRequest::has_cancel_request() const {
  return request_union_case() == kCancelRequest;
}
void WatchRequest::set_has_cancel_request() {
  _oneof_case_[0] = kCancelRequest;
}
void WatchRequest::clear_cancel_request() {
  if (has_cancel_request()) {
    delete request_union_.cancel_request_;
    clear_has_request_union();
  }
}
 const ::etcdserverpb::WatchCancelRequest& WatchRequest::cancel_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.cancel_request)
  return has_cancel_request()
      ? *request_union_.cancel_request_
      : ::etcdserverpb::WatchCancelRequest::default_instance();
}
::etcdserverpb::WatchCancelRequest* WatchRequest::mutable_cancel_request() {
  if (!has_cancel_request()) {
    clear_request_union();
    set_has_cancel_request();
    request_union_.cancel_request_ = new ::etcdserverpb::WatchCancelRequest;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.cancel_request)
  return request_union_.cancel_request_;
}
::etcdserverpb::WatchCancelRequest* WatchRequest::release_cancel_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.cancel_request)
  if (has_cancel_request()) {
    clear_has_request_union();
    ::etcdserverpb::WatchCancelRequest* temp = request_union_.cancel_request_;
    request_union_.cancel_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void WatchRequest::set_allocated_cancel_request(::etcdserverpb::WatchCancelRequest* cancel_request) {
  clear_request_union();
  if (cancel_request) {
    set_has_cancel_request();
    request_union_.cancel_request_ = cancel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.cancel_request)
}

bool WatchRequest::has_request_union() const {
  return request_union_case() != REQUEST_UNION_NOT_SET;
}
void WatchRequest::clear_has_request_union() {
  _oneof_case_[0] = REQUEST_UNION_NOT_SET;
}
WatchRequest::RequestUnionCase WatchRequest::request_union_case() const {
  return WatchRequest::RequestUnionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchCreateRequest::kKeyFieldNumber;
const int WatchCreateRequest::kRangeEndFieldNumber;
const int WatchCreateRequest::kStartRevisionFieldNumber;
const int WatchCreateRequest::kProgressNotifyFieldNumber;
const int WatchCreateRequest::kFiltersFieldNumber;
const int WatchCreateRequest::kPrevKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchCreateRequest::WatchCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchCreateRequest)
}
WatchCreateRequest::WatchCreateRequest(const WatchCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.range_end().size() > 0) {
    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  ::memcpy(&start_revision_, &from.start_revision_,
    reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&start_revision_) + sizeof(prev_kv_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchCreateRequest)
}

void WatchCreateRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_revision_, 0, reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&start_revision_) + sizeof(prev_kv_));
  _cached_size_ = 0;
}

WatchCreateRequest::~WatchCreateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchCreateRequest)
  SharedDtor();
}

void WatchCreateRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchCreateRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[19].descriptor;
}

const WatchCreateRequest& WatchCreateRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchCreateRequest* WatchCreateRequest::New(::google::protobuf::Arena* arena) const {
  WatchCreateRequest* n = new WatchCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchCreateRequest)
  filters_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_revision_, 0, reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&start_revision_) + sizeof(prev_kv_));
}

bool WatchCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.WatchCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes range_end = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_revision = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool progress_notify = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &progress_notify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
      case 5: {
        if (tag == 42u) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_filters(static_cast< ::etcdserverpb::WatchCreateRequest_FilterType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_filters(static_cast< ::etcdserverpb::WatchCreateRequest_FilterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prev_kv = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_kv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.WatchCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.WatchCreateRequest)
  return false;
#undef DO_
}

void WatchCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.WatchCreateRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->range_end(), output);
  }

  // int64 start_revision = 3;
  if (this->start_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_revision(), output);
  }

  // bool progress_notify = 4;
  if (this->progress_notify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->progress_notify(), output);
  }

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  if (this->filters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_filters_cached_byte_size_);
  }
  for (int i = 0; i < this->filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->filters(i), output);
  }

  // bool prev_kv = 6;
  if (this->prev_kv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prev_kv(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.WatchCreateRequest)
}

::google::protobuf::uint8* WatchCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchCreateRequest)
  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->range_end(), target);
  }

  // int64 start_revision = 3;
  if (this->start_revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_revision(), target);
  }

  // bool progress_notify = 4;
  if (this->progress_notify() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->progress_notify(), target);
  }

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  if (this->filters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _filters_cached_byte_size_, target);
  }
  for (int i = 0; i < this->filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->filters(i), target);
  }

  // bool prev_kv = 6;
  if (this->prev_kv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prev_kv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchCreateRequest)
  return target;
}

size_t WatchCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchCreateRequest)
  size_t total_size = 0;

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->filters_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->filters(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _filters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->range_end());
  }

  // int64 start_revision = 3;
  if (this->start_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_revision());
  }

  // bool progress_notify = 4;
  if (this->progress_notify() != 0) {
    total_size += 1 + 1;
  }

  // bool prev_kv = 6;
  if (this->prev_kv() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchCreateRequest)
    MergeFrom(*source);
  }
}

void WatchCreateRequest::MergeFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filters_.MergeFrom(from.filters_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.start_revision() != 0) {
    set_start_revision(from.start_revision());
  }
  if (from.progress_notify() != 0) {
    set_progress_notify(from.progress_notify());
  }
  if (from.prev_kv() != 0) {
    set_prev_kv(from.prev_kv());
  }
}

void WatchCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchCreateRequest::CopyFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCreateRequest::IsInitialized() const {
  return true;
}

void WatchCreateRequest::Swap(WatchCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchCreateRequest::InternalSwap(WatchCreateRequest* other) {
  filters_.UnsafeArenaSwap(&other->filters_);
  key_.Swap(&other->key_);
  range_end_.Swap(&other->range_end_);
  std::swap(start_revision_, other->start_revision_);
  std::swap(progress_notify_, other->progress_notify_);
  std::swap(prev_kv_, other->prev_kv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchCreateRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchCreateRequest

// bytes key = 1;
void WatchCreateRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WatchCreateRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.key)
  return key_.GetNoArena();
}
void WatchCreateRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.key)
}
#if LANG_CXX11
void WatchCreateRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchCreateRequest.key)
}
#endif
void WatchCreateRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchCreateRequest.key)
}
void WatchCreateRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchCreateRequest.key)
}
::std::string* WatchCreateRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchCreateRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WatchCreateRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchCreateRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WatchCreateRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchCreateRequest.key)
}

// bytes range_end = 2;
void WatchCreateRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WatchCreateRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.range_end)
  return range_end_.GetNoArena();
}
void WatchCreateRequest::set_range_end(const ::std::string& value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.range_end)
}
#if LANG_CXX11
void WatchCreateRequest::set_range_end(::std::string&& value) {
  
  range_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchCreateRequest.range_end)
}
#endif
void WatchCreateRequest::set_range_end(const char* value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchCreateRequest.range_end)
}
void WatchCreateRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchCreateRequest.range_end)
}
::std::string* WatchCreateRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchCreateRequest.range_end)
  return range_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WatchCreateRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchCreateRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WatchCreateRequest::set_allocated_range_end(::std::string* range_end) {
  if (range_end != NULL) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchCreateRequest.range_end)
}

// int64 start_revision = 3;
void WatchCreateRequest::clear_start_revision() {
  start_revision_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchCreateRequest::start_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.start_revision)
  return start_revision_;
}
void WatchCreateRequest::set_start_revision(::google::protobuf::int64 value) {
  
  start_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.start_revision)
}

// bool progress_notify = 4;
void WatchCreateRequest::clear_progress_notify() {
  progress_notify_ = false;
}
bool WatchCreateRequest::progress_notify() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.progress_notify)
  return progress_notify_;
}
void WatchCreateRequest::set_progress_notify(bool value) {
  
  progress_notify_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.progress_notify)
}

// repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
int WatchCreateRequest::filters_size() const {
  return filters_.size();
}
void WatchCreateRequest::clear_filters() {
  filters_.Clear();
}
::etcdserverpb::WatchCreateRequest_FilterType WatchCreateRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.filters)
  return static_cast< ::etcdserverpb::WatchCreateRequest_FilterType >(filters_.Get(index));
}
void WatchCreateRequest::set_filters(int index, ::etcdserverpb::WatchCreateRequest_FilterType value) {
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.filters)
}
void WatchCreateRequest::add_filters(::etcdserverpb::WatchCreateRequest_FilterType value) {
  filters_.Add(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.WatchCreateRequest.filters)
}
const ::google::protobuf::RepeatedField<int>&
WatchCreateRequest::filters() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.WatchCreateRequest.filters)
  return filters_;
}
::google::protobuf::RepeatedField<int>*
WatchCreateRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.WatchCreateRequest.filters)
  return &filters_;
}

// bool prev_kv = 6;
void WatchCreateRequest::clear_prev_kv() {
  prev_kv_ = false;
}
bool WatchCreateRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.prev_kv)
  return prev_kv_;
}
void WatchCreateRequest::set_prev_kv(bool value) {
  
  prev_kv_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.prev_kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchCancelRequest::kWatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchCancelRequest::WatchCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchCancelRequest)
}
WatchCancelRequest::WatchCancelRequest(const WatchCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  watch_id_ = from.watch_id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchCancelRequest)
}

void WatchCancelRequest::SharedCtor() {
  watch_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

WatchCancelRequest::~WatchCancelRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchCancelRequest)
  SharedDtor();
}

void WatchCancelRequest::SharedDtor() {
}

void WatchCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchCancelRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[20].descriptor;
}

const WatchCancelRequest& WatchCancelRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchCancelRequest* WatchCancelRequest::New(::google::protobuf::Arena* arena) const {
  WatchCancelRequest* n = new WatchCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchCancelRequest)
  watch_id_ = GOOGLE_LONGLONG(0);
}

bool WatchCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.WatchCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 watch_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &watch_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.WatchCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.WatchCancelRequest)
  return false;
#undef DO_
}

void WatchCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.WatchCancelRequest)
  // int64 watch_id = 1;
  if (this->watch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->watch_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.WatchCancelRequest)
}

::google::protobuf::uint8* WatchCancelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchCancelRequest)
  // int64 watch_id = 1;
  if (this->watch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->watch_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchCancelRequest)
  return target;
}

size_t WatchCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchCancelRequest)
  size_t total_size = 0;

  // int64 watch_id = 1;
  if (this->watch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->watch_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchCancelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchCancelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchCancelRequest)
    MergeFrom(*source);
  }
}

void WatchCancelRequest::MergeFrom(const WatchCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.watch_id() != 0) {
    set_watch_id(from.watch_id());
  }
}

void WatchCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchCancelRequest::CopyFrom(const WatchCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCancelRequest::IsInitialized() const {
  return true;
}

void WatchCancelRequest::Swap(WatchCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchCancelRequest::InternalSwap(WatchCancelRequest* other) {
  std::swap(watch_id_, other->watch_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchCancelRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchCancelRequest

// int64 watch_id = 1;
void WatchCancelRequest::clear_watch_id() {
  watch_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchCancelRequest::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCancelRequest.watch_id)
  return watch_id_;
}
void WatchCancelRequest::set_watch_id(::google::protobuf::int64 value) {
  
  watch_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCancelRequest.watch_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchResponse::kHeaderFieldNumber;
const int WatchResponse::kWatchIdFieldNumber;
const int WatchResponse::kCreatedFieldNumber;
const int WatchResponse::kCanceledFieldNumber;
const int WatchResponse::kCompactRevisionFieldNumber;
const int WatchResponse::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchResponse::WatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchResponse)
}
WatchResponse::WatchResponse(const WatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      events_(from.events_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&watch_id_, &from.watch_id_,
    reinterpret_cast<char*>(&canceled_) -
    reinterpret_cast<char*>(&watch_id_) + sizeof(canceled_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchResponse)
}

void WatchResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&canceled_) -
    reinterpret_cast<char*>(&header_) + sizeof(canceled_));
  _cached_size_ = 0;
}

WatchResponse::~WatchResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchResponse)
  SharedDtor();
}

void WatchResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void WatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[21].descriptor;
}

const WatchResponse& WatchResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchResponse* WatchResponse::New(::google::protobuf::Arena* arena) const {
  WatchResponse* n = new WatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchResponse)
  events_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&watch_id_, 0, reinterpret_cast<char*>(&canceled_) -
    reinterpret_cast<char*>(&watch_id_) + sizeof(canceled_));
}

bool WatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.WatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 watch_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &watch_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool created = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canceled = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compact_revision = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compact_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mvccpb.Event events = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.WatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.WatchResponse)
  return false;
#undef DO_
}

void WatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.WatchResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 watch_id = 2;
  if (this->watch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->watch_id(), output);
  }

  // bool created = 3;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->created(), output);
  }

  // bool canceled = 4;
  if (this->canceled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->canceled(), output);
  }

  // int64 compact_revision = 5;
  if (this->compact_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->compact_revision(), output);
  }

  // repeated .mvccpb.Event events = 11;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->events(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.WatchResponse)
}

::google::protobuf::uint8* WatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 watch_id = 2;
  if (this->watch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->watch_id(), target);
  }

  // bool created = 3;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->created(), target);
  }

  // bool canceled = 4;
  if (this->canceled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->canceled(), target);
  }

  // int64 compact_revision = 5;
  if (this->compact_revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->compact_revision(), target);
  }

  // repeated .mvccpb.Event events = 11;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->events(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchResponse)
  return target;
}

size_t WatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchResponse)
  size_t total_size = 0;

  // repeated .mvccpb.Event events = 11;
  {
    unsigned int count = this->events_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 watch_id = 2;
  if (this->watch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->watch_id());
  }

  // int64 compact_revision = 5;
  if (this->compact_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compact_revision());
  }

  // bool created = 3;
  if (this->created() != 0) {
    total_size += 1 + 1;
  }

  // bool canceled = 4;
  if (this->canceled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchResponse)
    MergeFrom(*source);
  }
}

void WatchResponse::MergeFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  events_.MergeFrom(from.events_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.watch_id() != 0) {
    set_watch_id(from.watch_id());
  }
  if (from.compact_revision() != 0) {
    set_compact_revision(from.compact_revision());
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
  if (from.canceled() != 0) {
    set_canceled(from.canceled());
  }
}

void WatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchResponse::CopyFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchResponse::IsInitialized() const {
  return true;
}

void WatchResponse::Swap(WatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchResponse::InternalSwap(WatchResponse* other) {
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(header_, other->header_);
  std::swap(watch_id_, other->watch_id_);
  std::swap(compact_revision_, other->compact_revision_);
  std::swap(created_, other->created_);
  std::swap(canceled_, other->canceled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchResponse

// .etcdserverpb.ResponseHeader header = 1;
bool WatchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void WatchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& WatchResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* WatchResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* WatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void WatchResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchResponse.header)
}

// int64 watch_id = 2;
void WatchResponse::clear_watch_id() {
  watch_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchResponse::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.watch_id)
  return watch_id_;
}
void WatchResponse::set_watch_id(::google::protobuf::int64 value) {
  
  watch_id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.watch_id)
}

// bool created = 3;
void WatchResponse::clear_created() {
  created_ = false;
}
bool WatchResponse::created() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.created)
  return created_;
}
void WatchResponse::set_created(bool value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.created)
}

// bool canceled = 4;
void WatchResponse::clear_canceled() {
  canceled_ = false;
}
bool WatchResponse::canceled() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.canceled)
  return canceled_;
}
void WatchResponse::set_canceled(bool value) {
  
  canceled_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.canceled)
}

// int64 compact_revision = 5;
void WatchResponse::clear_compact_revision() {
  compact_revision_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchResponse::compact_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.compact_revision)
  return compact_revision_;
}
void WatchResponse::set_compact_revision(::google::protobuf::int64 value) {
  
  compact_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.compact_revision)
}

// repeated .mvccpb.Event events = 11;
int WatchResponse::events_size() const {
  return events_.size();
}
void WatchResponse::clear_events() {
  events_.Clear();
}
const ::mvccpb::Event& WatchResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.events)
  return events_.Get(index);
}
::mvccpb::Event* WatchResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.events)
  return events_.Mutable(index);
}
::mvccpb::Event* WatchResponse::add_events() {
  // @@protoc_insertion_point(field_add:etcdserverpb.WatchResponse.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::mvccpb::Event >*
WatchResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.WatchResponse.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::mvccpb::Event >&
WatchResponse::events() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.WatchResponse.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseGrantRequest::kTTLFieldNumber;
const int LeaseGrantRequest::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseGrantRequest::LeaseGrantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseGrantRequest)
}
LeaseGrantRequest::LeaseGrantRequest(const LeaseGrantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ttl_, &from.ttl_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ttl_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseGrantRequest)
}

void LeaseGrantRequest::SharedCtor() {
  ::memset(&ttl_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ttl_) + sizeof(id_));
  _cached_size_ = 0;
}

LeaseGrantRequest::~LeaseGrantRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseGrantRequest)
  SharedDtor();
}

void LeaseGrantRequest::SharedDtor() {
}

void LeaseGrantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseGrantRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[22].descriptor;
}

const LeaseGrantRequest& LeaseGrantRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaseGrantRequest* LeaseGrantRequest::New(::google::protobuf::Arena* arena) const {
  LeaseGrantRequest* n = new LeaseGrantRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseGrantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseGrantRequest)
  ::memset(&ttl_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ttl_) + sizeof(id_));
}

bool LeaseGrantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.LeaseGrantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 TTL = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.LeaseGrantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.LeaseGrantRequest)
  return false;
#undef DO_
}

void LeaseGrantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.LeaseGrantRequest)
  // int64 TTL = 1;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ttl(), output);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.LeaseGrantRequest)
}

::google::protobuf::uint8* LeaseGrantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseGrantRequest)
  // int64 TTL = 1;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ttl(), target);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseGrantRequest)
  return target;
}

size_t LeaseGrantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseGrantRequest)
  size_t total_size = 0;

  // int64 TTL = 1;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ttl());
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseGrantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseGrantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseGrantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseGrantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseGrantRequest)
    MergeFrom(*source);
  }
}

void LeaseGrantRequest::MergeFrom(const LeaseGrantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void LeaseGrantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseGrantRequest::CopyFrom(const LeaseGrantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseGrantRequest::IsInitialized() const {
  return true;
}

void LeaseGrantRequest::Swap(LeaseGrantRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseGrantRequest::InternalSwap(LeaseGrantRequest* other) {
  std::swap(ttl_, other->ttl_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseGrantRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseGrantRequest

// int64 TTL = 1;
void LeaseGrantRequest::clear_ttl() {
  ttl_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseGrantRequest::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantRequest.TTL)
  return ttl_;
}
void LeaseGrantRequest::set_ttl(::google::protobuf::int64 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantRequest.TTL)
}

// int64 ID = 2;
void LeaseGrantRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseGrantRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantRequest.ID)
  return id_;
}
void LeaseGrantRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantRequest.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseGrantResponse::kHeaderFieldNumber;
const int LeaseGrantResponse::kIDFieldNumber;
const int LeaseGrantResponse::kTTLFieldNumber;
const int LeaseGrantResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseGrantResponse::LeaseGrantResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseGrantResponse)
}
LeaseGrantResponse::LeaseGrantResponse(const LeaseGrantResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseGrantResponse)
}

void LeaseGrantResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&header_) + sizeof(ttl_));
  _cached_size_ = 0;
}

LeaseGrantResponse::~LeaseGrantResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseGrantResponse)
  SharedDtor();
}

void LeaseGrantResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void LeaseGrantResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseGrantResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[23].descriptor;
}

const LeaseGrantResponse& LeaseGrantResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaseGrantResponse* LeaseGrantResponse::New(::google::protobuf::Arena* arena) const {
  LeaseGrantResponse* n = new LeaseGrantResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseGrantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseGrantResponse)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_) + sizeof(ttl_));
}

bool LeaseGrantResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.LeaseGrantResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TTL = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.LeaseGrantResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.LeaseGrantResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.LeaseGrantResponse)
  return false;
#undef DO_
}

void LeaseGrantResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.LeaseGrantResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ttl(), output);
  }

  // string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.LeaseGrantResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.LeaseGrantResponse)
}

::google::protobuf::uint8* LeaseGrantResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseGrantResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ttl(), target);
  }

  // string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.LeaseGrantResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseGrantResponse)
  return target;
}

size_t LeaseGrantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseGrantResponse)
  size_t total_size = 0;

  // string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseGrantResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseGrantResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseGrantResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseGrantResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseGrantResponse)
    MergeFrom(*source);
  }
}

void LeaseGrantResponse::MergeFrom(const LeaseGrantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void LeaseGrantResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseGrantResponse::CopyFrom(const LeaseGrantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseGrantResponse::IsInitialized() const {
  return true;
}

void LeaseGrantResponse::Swap(LeaseGrantResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseGrantResponse::InternalSwap(LeaseGrantResponse* other) {
  error_.Swap(&other->error_);
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  std::swap(ttl_, other->ttl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseGrantResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseGrantResponse

// .etcdserverpb.ResponseHeader header = 1;
bool LeaseGrantResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void LeaseGrantResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& LeaseGrantResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* LeaseGrantResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseGrantResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* LeaseGrantResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseGrantResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void LeaseGrantResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseGrantResponse.header)
}

// int64 ID = 2;
void LeaseGrantResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseGrantResponse::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.ID)
  return id_;
}
void LeaseGrantResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantResponse.ID)
}

// int64 TTL = 3;
void LeaseGrantResponse::clear_ttl() {
  ttl_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseGrantResponse::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.TTL)
  return ttl_;
}
void LeaseGrantResponse::set_ttl(::google::protobuf::int64 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantResponse.TTL)
}

// string error = 4;
void LeaseGrantResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaseGrantResponse::error() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.error)
  return error_.GetNoArena();
}
void LeaseGrantResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantResponse.error)
}
#if LANG_CXX11
void LeaseGrantResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.LeaseGrantResponse.error)
}
#endif
void LeaseGrantResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.LeaseGrantResponse.error)
}
void LeaseGrantResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.LeaseGrantResponse.error)
}
::std::string* LeaseGrantResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseGrantResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaseGrantResponse::release_error() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseGrantResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaseGrantResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseGrantResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseRevokeRequest::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseRevokeRequest::LeaseRevokeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseRevokeRequest)
}
LeaseRevokeRequest::LeaseRevokeRequest(const LeaseRevokeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseRevokeRequest)
}

void LeaseRevokeRequest::SharedCtor() {
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LeaseRevokeRequest::~LeaseRevokeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseRevokeRequest)
  SharedDtor();
}

void LeaseRevokeRequest::SharedDtor() {
}

void LeaseRevokeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseRevokeRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[24].descriptor;
}

const LeaseRevokeRequest& LeaseRevokeRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaseRevokeRequest* LeaseRevokeRequest::New(::google::protobuf::Arena* arena) const {
  LeaseRevokeRequest* n = new LeaseRevokeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseRevokeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseRevokeRequest)
  id_ = GOOGLE_LONGLONG(0);
}

bool LeaseRevokeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.LeaseRevokeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.LeaseRevokeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.LeaseRevokeRequest)
  return false;
#undef DO_
}

void LeaseRevokeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.LeaseRevokeRequest)
  // int64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.LeaseRevokeRequest)
}

::google::protobuf::uint8* LeaseRevokeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseRevokeRequest)
  // int64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseRevokeRequest)
  return target;
}

size_t LeaseRevokeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseRevokeRequest)
  size_t total_size = 0;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseRevokeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseRevokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseRevokeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseRevokeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseRevokeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseRevokeRequest)
    MergeFrom(*source);
  }
}

void LeaseRevokeRequest::MergeFrom(const LeaseRevokeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseRevokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void LeaseRevokeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseRevokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseRevokeRequest::CopyFrom(const LeaseRevokeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseRevokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRevokeRequest::IsInitialized() const {
  return true;
}

void LeaseRevokeRequest::Swap(LeaseRevokeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseRevokeRequest::InternalSwap(LeaseRevokeRequest* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseRevokeRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseRevokeRequest

// int64 ID = 1;
void LeaseRevokeRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseRevokeRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseRevokeRequest.ID)
  return id_;
}
void LeaseRevokeRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseRevokeRequest.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseRevokeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseRevokeResponse::LeaseRevokeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseRevokeResponse)
}
LeaseRevokeResponse::LeaseRevokeResponse(const LeaseRevokeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseRevokeResponse)
}

void LeaseRevokeResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

LeaseRevokeResponse::~LeaseRevokeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseRevokeResponse)
  SharedDtor();
}

void LeaseRevokeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void LeaseRevokeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseRevokeResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[25].descriptor;
}

const LeaseRevokeResponse& LeaseRevokeResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaseRevokeResponse* LeaseRevokeResponse::New(::google::protobuf::Arena* arena) const {
  LeaseRevokeResponse* n = new LeaseRevokeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseRevokeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseRevokeResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool LeaseRevokeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.LeaseRevokeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.LeaseRevokeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.LeaseRevokeResponse)
  return false;
#undef DO_
}

void LeaseRevokeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.LeaseRevokeResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.LeaseRevokeResponse)
}

::google::protobuf::uint8* LeaseRevokeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseRevokeResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseRevokeResponse)
  return target;
}

size_t LeaseRevokeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseRevokeResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseRevokeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseRevokeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseRevokeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseRevokeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseRevokeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseRevokeResponse)
    MergeFrom(*source);
  }
}

void LeaseRevokeResponse::MergeFrom(const LeaseRevokeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseRevokeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void LeaseRevokeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseRevokeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseRevokeResponse::CopyFrom(const LeaseRevokeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseRevokeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRevokeResponse::IsInitialized() const {
  return true;
}

void LeaseRevokeResponse::Swap(LeaseRevokeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseRevokeResponse::InternalSwap(LeaseRevokeResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseRevokeResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseRevokeResponse

// .etcdserverpb.ResponseHeader header = 1;
bool LeaseRevokeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void LeaseRevokeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& LeaseRevokeResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseRevokeResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* LeaseRevokeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseRevokeResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* LeaseRevokeResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseRevokeResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void LeaseRevokeResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseRevokeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseKeepAliveRequest::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseKeepAliveRequest::LeaseKeepAliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseKeepAliveRequest)
}
LeaseKeepAliveRequest::LeaseKeepAliveRequest(const LeaseKeepAliveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseKeepAliveRequest)
}

void LeaseKeepAliveRequest::SharedCtor() {
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LeaseKeepAliveRequest::~LeaseKeepAliveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseKeepAliveRequest)
  SharedDtor();
}

void LeaseKeepAliveRequest::SharedDtor() {
}

void LeaseKeepAliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseKeepAliveRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[26].descriptor;
}

const LeaseKeepAliveRequest& LeaseKeepAliveRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaseKeepAliveRequest* LeaseKeepAliveRequest::New(::google::protobuf::Arena* arena) const {
  LeaseKeepAliveRequest* n = new LeaseKeepAliveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseKeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseKeepAliveRequest)
  id_ = GOOGLE_LONGLONG(0);
}

bool LeaseKeepAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.LeaseKeepAliveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.LeaseKeepAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.LeaseKeepAliveRequest)
  return false;
#undef DO_
}

void LeaseKeepAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.LeaseKeepAliveRequest)
  // int64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.LeaseKeepAliveRequest)
}

::google::protobuf::uint8* LeaseKeepAliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseKeepAliveRequest)
  // int64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseKeepAliveRequest)
  return target;
}

size_t LeaseKeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseKeepAliveRequest)
  size_t total_size = 0;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseKeepAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseKeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseKeepAliveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseKeepAliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseKeepAliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseKeepAliveRequest)
    MergeFrom(*source);
  }
}

void LeaseKeepAliveRequest::MergeFrom(const LeaseKeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseKeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void LeaseKeepAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseKeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseKeepAliveRequest::CopyFrom(const LeaseKeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseKeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseKeepAliveRequest::IsInitialized() const {
  return true;
}

void LeaseKeepAliveRequest::Swap(LeaseKeepAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseKeepAliveRequest::InternalSwap(LeaseKeepAliveRequest* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseKeepAliveRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseKeepAliveRequest

// int64 ID = 1;
void LeaseKeepAliveRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseKeepAliveRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveRequest.ID)
  return id_;
}
void LeaseKeepAliveRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseKeepAliveRequest.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseKeepAliveResponse::kHeaderFieldNumber;
const int LeaseKeepAliveResponse::kIDFieldNumber;
const int LeaseKeepAliveResponse::kTTLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseKeepAliveResponse::LeaseKeepAliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseKeepAliveResponse)
}
LeaseKeepAliveResponse::LeaseKeepAliveResponse(const LeaseKeepAliveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseKeepAliveResponse)
}

void LeaseKeepAliveResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&header_) + sizeof(ttl_));
  _cached_size_ = 0;
}

LeaseKeepAliveResponse::~LeaseKeepAliveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseKeepAliveResponse)
  SharedDtor();
}

void LeaseKeepAliveResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void LeaseKeepAliveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseKeepAliveResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[27].descriptor;
}

const LeaseKeepAliveResponse& LeaseKeepAliveResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaseKeepAliveResponse* LeaseKeepAliveResponse::New(::google::protobuf::Arena* arena) const {
  LeaseKeepAliveResponse* n = new LeaseKeepAliveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseKeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseKeepAliveResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_) + sizeof(ttl_));
}

bool LeaseKeepAliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.LeaseKeepAliveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TTL = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.LeaseKeepAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.LeaseKeepAliveResponse)
  return false;
#undef DO_
}

void LeaseKeepAliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.LeaseKeepAliveResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ttl(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.LeaseKeepAliveResponse)
}

::google::protobuf::uint8* LeaseKeepAliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseKeepAliveResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ttl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseKeepAliveResponse)
  return target;
}

size_t LeaseKeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseKeepAliveResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseKeepAliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseKeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseKeepAliveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseKeepAliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseKeepAliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseKeepAliveResponse)
    MergeFrom(*source);
  }
}

void LeaseKeepAliveResponse::MergeFrom(const LeaseKeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseKeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void LeaseKeepAliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseKeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseKeepAliveResponse::CopyFrom(const LeaseKeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseKeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseKeepAliveResponse::IsInitialized() const {
  return true;
}

void LeaseKeepAliveResponse::Swap(LeaseKeepAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseKeepAliveResponse::InternalSwap(LeaseKeepAliveResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  std::swap(ttl_, other->ttl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseKeepAliveResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseKeepAliveResponse

// .etcdserverpb.ResponseHeader header = 1;
bool LeaseKeepAliveResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void LeaseKeepAliveResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& LeaseKeepAliveResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* LeaseKeepAliveResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseKeepAliveResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* LeaseKeepAliveResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseKeepAliveResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void LeaseKeepAliveResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseKeepAliveResponse.header)
}

// int64 ID = 2;
void LeaseKeepAliveResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseKeepAliveResponse::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveResponse.ID)
  return id_;
}
void LeaseKeepAliveResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseKeepAliveResponse.ID)
}

// int64 TTL = 3;
void LeaseKeepAliveResponse::clear_ttl() {
  ttl_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaseKeepAliveResponse::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveResponse.TTL)
  return ttl_;
}
void LeaseKeepAliveResponse::set_ttl(::google::protobuf::int64 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseKeepAliveResponse.TTL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kIDFieldNumber;
const int Member::kNameFieldNumber;
const int Member::kPeerURLsFieldNumber;
const int Member::kClientURLsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.Member)
}
Member::Member(const Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peerurls_(from.peerurls_),
      clienturls_(from.clienturls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Member)
}

void Member::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[28].descriptor;
}

const Member& Member::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Member* Member::New(::google::protobuf::Arena* arena) const {
  Member* n = new Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Member)
  peerurls_.Clear();
  clienturls_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 ID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.Member.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peerURLs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peerurls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerurls(this->peerurls_size() - 1).data(),
            this->peerurls(this->peerurls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.Member.peerURLs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string clientURLs = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_clienturls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clienturls(this->clienturls_size() - 1).data(),
            this->clienturls(this->clienturls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.Member.clientURLs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.Member)
  // uint64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string peerURLs = 3;
  for (int i = 0; i < this->peerurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), this->peerurls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.peerURLs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peerurls(i), output);
  }

  // repeated string clientURLs = 4;
  for (int i = 0; i < this->clienturls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clienturls(i).data(), this->clienturls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.clientURLs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->clienturls(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.Member)
}

::google::protobuf::uint8* Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Member)
  // uint64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string peerURLs = 3;
  for (int i = 0; i < this->peerurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), this->peerurls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.peerURLs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peerurls(i), target);
  }

  // repeated string clientURLs = 4;
  for (int i = 0; i < this->clienturls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clienturls(i).data(), this->clienturls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.clientURLs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->clienturls(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Member)
  size_t total_size = 0;

  // repeated string peerURLs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peerurls_size());
  for (int i = 0; i < this->peerurls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peerurls(i));
  }

  // repeated string clientURLs = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->clienturls_size());
  for (int i = 0; i < this->clienturls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->clienturls(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerurls_.MergeFrom(from.peerurls_);
  clienturls_.MergeFrom(from.clienturls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  peerurls_.UnsafeArenaSwap(&other->peerurls_);
  clienturls_.UnsafeArenaSwap(&other->clienturls_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Member

// uint64 ID = 1;
void Member::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Member::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.ID)
  return id_;
}
void Member::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.ID)
}

// string name = 2;
void Member::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Member::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.name)
  return name_.GetNoArena();
}
void Member::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.name)
}
#if LANG_CXX11
void Member::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Member.name)
}
#endif
void Member::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Member.name)
}
void Member::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Member.name)
}
::std::string* Member::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Member.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Member::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Member.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Member::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Member.name)
}

// repeated string peerURLs = 3;
int Member::peerurls_size() const {
  return peerurls_.size();
}
void Member::clear_peerurls() {
  peerurls_.Clear();
}
const ::std::string& Member::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.peerURLs)
  return peerurls_.Get(index);
}
::std::string* Member::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Member.peerURLs)
  return peerurls_.Mutable(index);
}
void Member::set_peerurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.peerURLs)
  peerurls_.Mutable(index)->assign(value);
}
void Member::set_peerurls(int index, const char* value) {
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Member.peerURLs)
}
void Member::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Member.peerURLs)
}
::std::string* Member::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.Member.peerURLs)
  return peerurls_.Add();
}
void Member::add_peerurls(const ::std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.Member.peerURLs)
}
void Member::add_peerurls(const char* value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.Member.peerURLs)
}
void Member::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.Member.peerURLs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Member::peerurls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.Member.peerURLs)
  return peerurls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Member::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.Member.peerURLs)
  return &peerurls_;
}

// repeated string clientURLs = 4;
int Member::clienturls_size() const {
  return clienturls_.size();
}
void Member::clear_clienturls() {
  clienturls_.Clear();
}
const ::std::string& Member::clienturls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.clientURLs)
  return clienturls_.Get(index);
}
::std::string* Member::mutable_clienturls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Member.clientURLs)
  return clienturls_.Mutable(index);
}
void Member::set_clienturls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.clientURLs)
  clienturls_.Mutable(index)->assign(value);
}
void Member::set_clienturls(int index, const char* value) {
  clienturls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Member.clientURLs)
}
void Member::set_clienturls(int index, const char* value, size_t size) {
  clienturls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Member.clientURLs)
}
::std::string* Member::add_clienturls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.Member.clientURLs)
  return clienturls_.Add();
}
void Member::add_clienturls(const ::std::string& value) {
  clienturls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.Member.clientURLs)
}
void Member::add_clienturls(const char* value) {
  clienturls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.Member.clientURLs)
}
void Member::add_clienturls(const char* value, size_t size) {
  clienturls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.Member.clientURLs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Member::clienturls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.Member.clientURLs)
  return clienturls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Member::mutable_clienturls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.Member.clientURLs)
  return &clienturls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberAddRequest::kPeerURLsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberAddRequest::MemberAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberAddRequest)
}
MemberAddRequest::MemberAddRequest(const MemberAddRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peerurls_(from.peerurls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberAddRequest)
}

void MemberAddRequest::SharedCtor() {
  _cached_size_ = 0;
}

MemberAddRequest::~MemberAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberAddRequest)
  SharedDtor();
}

void MemberAddRequest::SharedDtor() {
}

void MemberAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberAddRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[29].descriptor;
}

const MemberAddRequest& MemberAddRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberAddRequest* MemberAddRequest::New(::google::protobuf::Arena* arena) const {
  MemberAddRequest* n = new MemberAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberAddRequest)
  peerurls_.Clear();
}

bool MemberAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string peerURLs = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peerurls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerurls(this->peerurls_size() - 1).data(),
            this->peerurls(this->peerurls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.MemberAddRequest.peerURLs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberAddRequest)
  return false;
#undef DO_
}

void MemberAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberAddRequest)
  // repeated string peerURLs = 1;
  for (int i = 0; i < this->peerurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), this->peerurls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberAddRequest.peerURLs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peerurls(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberAddRequest)
}

::google::protobuf::uint8* MemberAddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberAddRequest)
  // repeated string peerURLs = 1;
  for (int i = 0; i < this->peerurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), this->peerurls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberAddRequest.peerURLs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->peerurls(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberAddRequest)
  return target;
}

size_t MemberAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberAddRequest)
  size_t total_size = 0;

  // repeated string peerURLs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peerurls_size());
  for (int i = 0; i < this->peerurls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peerurls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAddRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberAddRequest)
    MergeFrom(*source);
  }
}

void MemberAddRequest::MergeFrom(const MemberAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerurls_.MergeFrom(from.peerurls_);
}

void MemberAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAddRequest::CopyFrom(const MemberAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddRequest::IsInitialized() const {
  return true;
}

void MemberAddRequest::Swap(MemberAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberAddRequest::InternalSwap(MemberAddRequest* other) {
  peerurls_.UnsafeArenaSwap(&other->peerurls_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberAddRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberAddRequest

// repeated string peerURLs = 1;
int MemberAddRequest::peerurls_size() const {
  return peerurls_.size();
}
void MemberAddRequest::clear_peerurls() {
  peerurls_.Clear();
}
const ::std::string& MemberAddRequest::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddRequest.peerURLs)
  return peerurls_.Get(index);
}
::std::string* MemberAddRequest::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddRequest.peerURLs)
  return peerurls_.Mutable(index);
}
void MemberAddRequest::set_peerurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberAddRequest.peerURLs)
  peerurls_.Mutable(index)->assign(value);
}
void MemberAddRequest::set_peerurls(int index, const char* value) {
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.MemberAddRequest.peerURLs)
}
void MemberAddRequest::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.MemberAddRequest.peerURLs)
}
::std::string* MemberAddRequest::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.MemberAddRequest.peerURLs)
  return peerurls_.Add();
}
void MemberAddRequest::add_peerurls(const ::std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberAddRequest.peerURLs)
}
void MemberAddRequest::add_peerurls(const char* value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.MemberAddRequest.peerURLs)
}
void MemberAddRequest::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.MemberAddRequest.peerURLs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MemberAddRequest::peerurls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberAddRequest.peerURLs)
  return peerurls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MemberAddRequest::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberAddRequest.peerURLs)
  return &peerurls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberAddResponse::kHeaderFieldNumber;
const int MemberAddResponse::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberAddResponse::MemberAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberAddResponse)
}
MemberAddResponse::MemberAddResponse(const MemberAddResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_member()) {
    member_ = new ::etcdserverpb::Member(*from.member_);
  } else {
    member_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberAddResponse)
}

void MemberAddResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&member_) -
    reinterpret_cast<char*>(&header_) + sizeof(member_));
  _cached_size_ = 0;
}

MemberAddResponse::~MemberAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberAddResponse)
  SharedDtor();
}

void MemberAddResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete member_;
  }
}

void MemberAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberAddResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[30].descriptor;
}

const MemberAddResponse& MemberAddResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberAddResponse* MemberAddResponse::New(::google::protobuf::Arena* arena) const {
  MemberAddResponse* n = new MemberAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberAddResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
}

bool MemberAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.Member member = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberAddResponse)
  return false;
#undef DO_
}

void MemberAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberAddResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .etcdserverpb.Member member = 2;
  if (this->has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->member_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberAddResponse)
}

::google::protobuf::uint8* MemberAddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberAddResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .etcdserverpb.Member member = 2;
  if (this->has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->member_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberAddResponse)
  return target;
}

size_t MemberAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberAddResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .etcdserverpb.Member member = 2;
  if (this->has_member()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->member_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAddResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberAddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberAddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberAddResponse)
    MergeFrom(*source);
  }
}

void MemberAddResponse::MergeFrom(const MemberAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_member()) {
    mutable_member()->::etcdserverpb::Member::MergeFrom(from.member());
  }
}

void MemberAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAddResponse::CopyFrom(const MemberAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddResponse::IsInitialized() const {
  return true;
}

void MemberAddResponse::Swap(MemberAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberAddResponse::InternalSwap(MemberAddResponse* other) {
  std::swap(header_, other->header_);
  std::swap(member_, other->member_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberAddResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberAddResponse

// .etcdserverpb.ResponseHeader header = 1;
bool MemberAddResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MemberAddResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& MemberAddResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* MemberAddResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* MemberAddResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberAddResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MemberAddResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberAddResponse.header)
}

// .etcdserverpb.Member member = 2;
bool MemberAddResponse::has_member() const {
  return this != internal_default_instance() && member_ != NULL;
}
void MemberAddResponse::clear_member() {
  if (GetArenaNoVirtual() == NULL && member_ != NULL) delete member_;
  member_ = NULL;
}
const ::etcdserverpb::Member& MemberAddResponse::member() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddResponse.member)
  return member_ != NULL ? *member_
                         : *::etcdserverpb::Member::internal_default_instance();
}
::etcdserverpb::Member* MemberAddResponse::mutable_member() {
  
  if (member_ == NULL) {
    member_ = new ::etcdserverpb::Member;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddResponse.member)
  return member_;
}
::etcdserverpb::Member* MemberAddResponse::release_member() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberAddResponse.member)
  
  ::etcdserverpb::Member* temp = member_;
  member_ = NULL;
  return temp;
}
void MemberAddResponse::set_allocated_member(::etcdserverpb::Member* member) {
  delete member_;
  member_ = member;
  if (member) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberAddResponse.member)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberRemoveRequest::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberRemoveRequest::MemberRemoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberRemoveRequest)
}
MemberRemoveRequest::MemberRemoveRequest(const MemberRemoveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberRemoveRequest)
}

void MemberRemoveRequest::SharedCtor() {
  id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

MemberRemoveRequest::~MemberRemoveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberRemoveRequest)
  SharedDtor();
}

void MemberRemoveRequest::SharedDtor() {
}

void MemberRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberRemoveRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[31].descriptor;
}

const MemberRemoveRequest& MemberRemoveRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberRemoveRequest* MemberRemoveRequest::New(::google::protobuf::Arena* arena) const {
  MemberRemoveRequest* n = new MemberRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberRemoveRequest)
  id_ = GOOGLE_ULONGLONG(0);
}

bool MemberRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberRemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 ID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberRemoveRequest)
  return false;
#undef DO_
}

void MemberRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberRemoveRequest)
  // uint64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberRemoveRequest)
}

::google::protobuf::uint8* MemberRemoveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberRemoveRequest)
  // uint64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberRemoveRequest)
  return target;
}

size_t MemberRemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberRemoveRequest)
  size_t total_size = 0;

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRemoveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberRemoveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberRemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberRemoveRequest)
    MergeFrom(*source);
  }
}

void MemberRemoveRequest::MergeFrom(const MemberRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void MemberRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemoveRequest::CopyFrom(const MemberRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemoveRequest::IsInitialized() const {
  return true;
}

void MemberRemoveRequest::Swap(MemberRemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberRemoveRequest::InternalSwap(MemberRemoveRequest* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberRemoveRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberRemoveRequest

// uint64 ID = 1;
void MemberRemoveRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemberRemoveRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberRemoveRequest.ID)
  return id_;
}
void MemberRemoveRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberRemoveRequest.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberRemoveResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberRemoveResponse::MemberRemoveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberRemoveResponse)
}
MemberRemoveResponse::MemberRemoveResponse(const MemberRemoveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberRemoveResponse)
}

void MemberRemoveResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

MemberRemoveResponse::~MemberRemoveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberRemoveResponse)
  SharedDtor();
}

void MemberRemoveResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MemberRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberRemoveResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[32].descriptor;
}

const MemberRemoveResponse& MemberRemoveResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberRemoveResponse* MemberRemoveResponse::New(::google::protobuf::Arena* arena) const {
  MemberRemoveResponse* n = new MemberRemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberRemoveResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool MemberRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberRemoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberRemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberRemoveResponse)
  return false;
#undef DO_
}

void MemberRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberRemoveResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberRemoveResponse)
}

::google::protobuf::uint8* MemberRemoveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberRemoveResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberRemoveResponse)
  return target;
}

size_t MemberRemoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberRemoveResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRemoveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberRemoveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberRemoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberRemoveResponse)
    MergeFrom(*source);
  }
}

void MemberRemoveResponse::MergeFrom(const MemberRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void MemberRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemoveResponse::CopyFrom(const MemberRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemoveResponse::IsInitialized() const {
  return true;
}

void MemberRemoveResponse::Swap(MemberRemoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberRemoveResponse::InternalSwap(MemberRemoveResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberRemoveResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberRemoveResponse

// .etcdserverpb.ResponseHeader header = 1;
bool MemberRemoveResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MemberRemoveResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& MemberRemoveResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberRemoveResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* MemberRemoveResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberRemoveResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* MemberRemoveResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberRemoveResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MemberRemoveResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberRemoveResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberUpdateRequest::kIDFieldNumber;
const int MemberUpdateRequest::kPeerURLsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberUpdateRequest::MemberUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberUpdateRequest)
}
MemberUpdateRequest::MemberUpdateRequest(const MemberUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peerurls_(from.peerurls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberUpdateRequest)
}

void MemberUpdateRequest::SharedCtor() {
  id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

MemberUpdateRequest::~MemberUpdateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberUpdateRequest)
  SharedDtor();
}

void MemberUpdateRequest::SharedDtor() {
}

void MemberUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberUpdateRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[33].descriptor;
}

const MemberUpdateRequest& MemberUpdateRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberUpdateRequest* MemberUpdateRequest::New(::google::protobuf::Arena* arena) const {
  MemberUpdateRequest* n = new MemberUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberUpdateRequest)
  peerurls_.Clear();
  id_ = GOOGLE_ULONGLONG(0);
}

bool MemberUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 ID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peerURLs = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peerurls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerurls(this->peerurls_size() - 1).data(),
            this->peerurls(this->peerurls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.MemberUpdateRequest.peerURLs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberUpdateRequest)
  return false;
#undef DO_
}

void MemberUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberUpdateRequest)
  // uint64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated string peerURLs = 2;
  for (int i = 0; i < this->peerurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), this->peerurls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberUpdateRequest.peerURLs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peerurls(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberUpdateRequest)
}

::google::protobuf::uint8* MemberUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberUpdateRequest)
  // uint64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated string peerURLs = 2;
  for (int i = 0; i < this->peerurls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerurls(i).data(), this->peerurls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberUpdateRequest.peerURLs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->peerurls(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberUpdateRequest)
  return target;
}

size_t MemberUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberUpdateRequest)
  size_t total_size = 0;

  // repeated string peerURLs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peerurls_size());
  for (int i = 0; i < this->peerurls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peerurls(i));
  }

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberUpdateRequest)
    MergeFrom(*source);
  }
}

void MemberUpdateRequest::MergeFrom(const MemberUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerurls_.MergeFrom(from.peerurls_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void MemberUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberUpdateRequest::CopyFrom(const MemberUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberUpdateRequest::IsInitialized() const {
  return true;
}

void MemberUpdateRequest::Swap(MemberUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberUpdateRequest::InternalSwap(MemberUpdateRequest* other) {
  peerurls_.UnsafeArenaSwap(&other->peerurls_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberUpdateRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberUpdateRequest

// uint64 ID = 1;
void MemberUpdateRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemberUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateRequest.ID)
  return id_;
}
void MemberUpdateRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberUpdateRequest.ID)
}

// repeated string peerURLs = 2;
int MemberUpdateRequest::peerurls_size() const {
  return peerurls_.size();
}
void MemberUpdateRequest::clear_peerurls() {
  peerurls_.Clear();
}
const ::std::string& MemberUpdateRequest::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateRequest.peerURLs)
  return peerurls_.Get(index);
}
::std::string* MemberUpdateRequest::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberUpdateRequest.peerURLs)
  return peerurls_.Mutable(index);
}
void MemberUpdateRequest::set_peerurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberUpdateRequest.peerURLs)
  peerurls_.Mutable(index)->assign(value);
}
void MemberUpdateRequest::set_peerurls(int index, const char* value) {
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.MemberUpdateRequest.peerURLs)
}
void MemberUpdateRequest::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.MemberUpdateRequest.peerURLs)
}
::std::string* MemberUpdateRequest::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.MemberUpdateRequest.peerURLs)
  return peerurls_.Add();
}
void MemberUpdateRequest::add_peerurls(const ::std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberUpdateRequest.peerURLs)
}
void MemberUpdateRequest::add_peerurls(const char* value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.MemberUpdateRequest.peerURLs)
}
void MemberUpdateRequest::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.MemberUpdateRequest.peerURLs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MemberUpdateRequest::peerurls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberUpdateRequest.peerURLs)
  return peerurls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MemberUpdateRequest::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberUpdateRequest.peerURLs)
  return &peerurls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberUpdateResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberUpdateResponse::MemberUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberUpdateResponse)
}
MemberUpdateResponse::MemberUpdateResponse(const MemberUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberUpdateResponse)
}

void MemberUpdateResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

MemberUpdateResponse::~MemberUpdateResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberUpdateResponse)
  SharedDtor();
}

void MemberUpdateResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MemberUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberUpdateResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[34].descriptor;
}

const MemberUpdateResponse& MemberUpdateResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberUpdateResponse* MemberUpdateResponse::New(::google::protobuf::Arena* arena) const {
  MemberUpdateResponse* n = new MemberUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberUpdateResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool MemberUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberUpdateResponse)
  return false;
#undef DO_
}

void MemberUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberUpdateResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberUpdateResponse)
}

::google::protobuf::uint8* MemberUpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberUpdateResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberUpdateResponse)
  return target;
}

size_t MemberUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberUpdateResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberUpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberUpdateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberUpdateResponse)
    MergeFrom(*source);
  }
}

void MemberUpdateResponse::MergeFrom(const MemberUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void MemberUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberUpdateResponse::CopyFrom(const MemberUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberUpdateResponse::IsInitialized() const {
  return true;
}

void MemberUpdateResponse::Swap(MemberUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberUpdateResponse::InternalSwap(MemberUpdateResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberUpdateResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberUpdateResponse

// .etcdserverpb.ResponseHeader header = 1;
bool MemberUpdateResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MemberUpdateResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& MemberUpdateResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* MemberUpdateResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberUpdateResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* MemberUpdateResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberUpdateResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MemberUpdateResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberUpdateResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberListRequest::MemberListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberListRequest)
}
MemberListRequest::MemberListRequest(const MemberListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberListRequest)
}

void MemberListRequest::SharedCtor() {
  _cached_size_ = 0;
}

MemberListRequest::~MemberListRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberListRequest)
  SharedDtor();
}

void MemberListRequest::SharedDtor() {
}

void MemberListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberListRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[35].descriptor;
}

const MemberListRequest& MemberListRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberListRequest* MemberListRequest::New(::google::protobuf::Arena* arena) const {
  MemberListRequest* n = new MemberListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberListRequest)
}

bool MemberListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberListRequest)
  return false;
#undef DO_
}

void MemberListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberListRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberListRequest)
}

::google::protobuf::uint8* MemberListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberListRequest)
  return target;
}

size_t MemberListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberListRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberListRequest)
    MergeFrom(*source);
  }
}

void MemberListRequest::MergeFrom(const MemberListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void MemberListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberListRequest::CopyFrom(const MemberListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberListRequest::IsInitialized() const {
  return true;
}

void MemberListRequest::Swap(MemberListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberListRequest::InternalSwap(MemberListRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberListRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberListResponse::kHeaderFieldNumber;
const int MemberListResponse::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberListResponse::MemberListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberListResponse)
}
MemberListResponse::MemberListResponse(const MemberListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberListResponse)
}

void MemberListResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

MemberListResponse::~MemberListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberListResponse)
  SharedDtor();
}

void MemberListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MemberListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberListResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[36].descriptor;
}

const MemberListResponse& MemberListResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberListResponse* MemberListResponse::New(::google::protobuf::Arena* arena) const {
  MemberListResponse* n = new MemberListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberListResponse)
  members_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool MemberListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.MemberListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .etcdserverpb.Member members = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.MemberListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.MemberListResponse)
  return false;
#undef DO_
}

void MemberListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.MemberListResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.MemberListResponse)
}

::google::protobuf::uint8* MemberListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberListResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberListResponse)
  return target;
}

size_t MemberListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberListResponse)
  size_t total_size = 0;

  // repeated .etcdserverpb.Member members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberListResponse)
    MergeFrom(*source);
  }
}

void MemberListResponse::MergeFrom(const MemberListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void MemberListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberListResponse::CopyFrom(const MemberListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberListResponse::IsInitialized() const {
  return true;
}

void MemberListResponse::Swap(MemberListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberListResponse::InternalSwap(MemberListResponse* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberListResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberListResponse

// .etcdserverpb.ResponseHeader header = 1;
bool MemberListResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MemberListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& MemberListResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberListResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* MemberListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberListResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* MemberListResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberListResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MemberListResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberListResponse.header)
}

// repeated .etcdserverpb.Member members = 2;
int MemberListResponse::members_size() const {
  return members_.size();
}
void MemberListResponse::clear_members() {
  members_.Clear();
}
const ::etcdserverpb::Member& MemberListResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberListResponse.members)
  return members_.Get(index);
}
::etcdserverpb::Member* MemberListResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberListResponse.members)
  return members_.Mutable(index);
}
::etcdserverpb::Member* MemberListResponse::add_members() {
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberListResponse.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::etcdserverpb::Member >*
MemberListResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberListResponse.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::etcdserverpb::Member >&
MemberListResponse::members() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberListResponse.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefragmentRequest::DefragmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DefragmentRequest)
}
DefragmentRequest::DefragmentRequest(const DefragmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DefragmentRequest)
}

void DefragmentRequest::SharedCtor() {
  _cached_size_ = 0;
}

DefragmentRequest::~DefragmentRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DefragmentRequest)
  SharedDtor();
}

void DefragmentRequest::SharedDtor() {
}

void DefragmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefragmentRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[37].descriptor;
}

const DefragmentRequest& DefragmentRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DefragmentRequest* DefragmentRequest::New(::google::protobuf::Arena* arena) const {
  DefragmentRequest* n = new DefragmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefragmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DefragmentRequest)
}

bool DefragmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.DefragmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.DefragmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.DefragmentRequest)
  return false;
#undef DO_
}

void DefragmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.DefragmentRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.DefragmentRequest)
}

::google::protobuf::uint8* DefragmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DefragmentRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DefragmentRequest)
  return target;
}

size_t DefragmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DefragmentRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefragmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DefragmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DefragmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefragmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DefragmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DefragmentRequest)
    MergeFrom(*source);
  }
}

void DefragmentRequest::MergeFrom(const DefragmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DefragmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void DefragmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DefragmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefragmentRequest::CopyFrom(const DefragmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DefragmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefragmentRequest::IsInitialized() const {
  return true;
}

void DefragmentRequest::Swap(DefragmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefragmentRequest::InternalSwap(DefragmentRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefragmentRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefragmentRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefragmentResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefragmentResponse::DefragmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DefragmentResponse)
}
DefragmentResponse::DefragmentResponse(const DefragmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DefragmentResponse)
}

void DefragmentResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DefragmentResponse::~DefragmentResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DefragmentResponse)
  SharedDtor();
}

void DefragmentResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DefragmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefragmentResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[38].descriptor;
}

const DefragmentResponse& DefragmentResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DefragmentResponse* DefragmentResponse::New(::google::protobuf::Arena* arena) const {
  DefragmentResponse* n = new DefragmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefragmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DefragmentResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DefragmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.DefragmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.DefragmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.DefragmentResponse)
  return false;
#undef DO_
}

void DefragmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.DefragmentResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.DefragmentResponse)
}

::google::protobuf::uint8* DefragmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DefragmentResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DefragmentResponse)
  return target;
}

size_t DefragmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DefragmentResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefragmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DefragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DefragmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefragmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DefragmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DefragmentResponse)
    MergeFrom(*source);
  }
}

void DefragmentResponse::MergeFrom(const DefragmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DefragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void DefragmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DefragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefragmentResponse::CopyFrom(const DefragmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DefragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefragmentResponse::IsInitialized() const {
  return true;
}

void DefragmentResponse::Swap(DefragmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefragmentResponse::InternalSwap(DefragmentResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefragmentResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefragmentResponse

// .etcdserverpb.ResponseHeader header = 1;
bool DefragmentResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DefragmentResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& DefragmentResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DefragmentResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* DefragmentResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DefragmentResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* DefragmentResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DefragmentResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DefragmentResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DefragmentResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlarmRequest::kActionFieldNumber;
const int AlarmRequest::kMemberIDFieldNumber;
const int AlarmRequest::kAlarmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlarmRequest::AlarmRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AlarmRequest)
}
AlarmRequest::AlarmRequest(const AlarmRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_) + sizeof(alarm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmRequest)
}

void AlarmRequest::SharedCtor() {
  ::memset(&memberid_, 0, reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_) + sizeof(alarm_));
  _cached_size_ = 0;
}

AlarmRequest::~AlarmRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmRequest)
  SharedDtor();
}

void AlarmRequest::SharedDtor() {
}

void AlarmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[39].descriptor;
}

const AlarmRequest& AlarmRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlarmRequest* AlarmRequest::New(::google::protobuf::Arena* arena) const {
  AlarmRequest* n = new AlarmRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlarmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmRequest)
  ::memset(&memberid_, 0, reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_) + sizeof(alarm_));
}

bool AlarmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AlarmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::etcdserverpb::AlarmRequest_AlarmAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memberID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.AlarmType alarm = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_alarm(static_cast< ::etcdserverpb::AlarmType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AlarmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AlarmRequest)
  return false;
#undef DO_
}

void AlarmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AlarmRequest)
  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // uint64 memberID = 2;
  if (this->memberid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->memberid(), output);
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->alarm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->alarm(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AlarmRequest)
}

::google::protobuf::uint8* AlarmRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmRequest)
  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // uint64 memberID = 2;
  if (this->memberid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->memberid(), target);
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->alarm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->alarm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmRequest)
  return target;
}

size_t AlarmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmRequest)
  size_t total_size = 0;

  // uint64 memberID = 2;
  if (this->memberid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memberid());
  }

  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->alarm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->alarm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlarmRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AlarmRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AlarmRequest)
    MergeFrom(*source);
  }
}

void AlarmRequest::MergeFrom(const AlarmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.memberid() != 0) {
    set_memberid(from.memberid());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.alarm() != 0) {
    set_alarm(from.alarm());
  }
}

void AlarmRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmRequest::CopyFrom(const AlarmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmRequest::IsInitialized() const {
  return true;
}

void AlarmRequest::Swap(AlarmRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlarmRequest::InternalSwap(AlarmRequest* other) {
  std::swap(memberid_, other->memberid_);
  std::swap(action_, other->action_);
  std::swap(alarm_, other->alarm_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlarmRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlarmRequest

// .etcdserverpb.AlarmRequest.AlarmAction action = 1;
void AlarmRequest::clear_action() {
  action_ = 0;
}
::etcdserverpb::AlarmRequest_AlarmAction AlarmRequest::action() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmRequest.action)
  return static_cast< ::etcdserverpb::AlarmRequest_AlarmAction >(action_);
}
void AlarmRequest::set_action(::etcdserverpb::AlarmRequest_AlarmAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmRequest.action)
}

// uint64 memberID = 2;
void AlarmRequest::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AlarmRequest::memberid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmRequest.memberID)
  return memberid_;
}
void AlarmRequest::set_memberid(::google::protobuf::uint64 value) {
  
  memberid_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmRequest.memberID)
}

// .etcdserverpb.AlarmType alarm = 3;
void AlarmRequest::clear_alarm() {
  alarm_ = 0;
}
::etcdserverpb::AlarmType AlarmRequest::alarm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmRequest.alarm)
  return static_cast< ::etcdserverpb::AlarmType >(alarm_);
}
void AlarmRequest::set_alarm(::etcdserverpb::AlarmType value) {
  
  alarm_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmRequest.alarm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlarmMember::kMemberIDFieldNumber;
const int AlarmMember::kAlarmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlarmMember::AlarmMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AlarmMember)
}
AlarmMember::AlarmMember(const AlarmMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_) + sizeof(alarm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmMember)
}

void AlarmMember::SharedCtor() {
  ::memset(&memberid_, 0, reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_) + sizeof(alarm_));
  _cached_size_ = 0;
}

AlarmMember::~AlarmMember() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmMember)
  SharedDtor();
}

void AlarmMember::SharedDtor() {
}

void AlarmMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmMember::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[40].descriptor;
}

const AlarmMember& AlarmMember::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlarmMember* AlarmMember::New(::google::protobuf::Arena* arena) const {
  AlarmMember* n = new AlarmMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlarmMember::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmMember)
  ::memset(&memberid_, 0, reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_) + sizeof(alarm_));
}

bool AlarmMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AlarmMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 memberID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .etcdserverpb.AlarmType alarm = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_alarm(static_cast< ::etcdserverpb::AlarmType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AlarmMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AlarmMember)
  return false;
#undef DO_
}

void AlarmMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AlarmMember)
  // uint64 memberID = 1;
  if (this->memberid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->memberid(), output);
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->alarm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->alarm(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AlarmMember)
}

::google::protobuf::uint8* AlarmMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmMember)
  // uint64 memberID = 1;
  if (this->memberid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->memberid(), target);
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->alarm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->alarm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmMember)
  return target;
}

size_t AlarmMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmMember)
  size_t total_size = 0;

  // uint64 memberID = 1;
  if (this->memberid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memberid());
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->alarm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->alarm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AlarmMember)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlarmMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AlarmMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AlarmMember)
    MergeFrom(*source);
  }
}

void AlarmMember::MergeFrom(const AlarmMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.memberid() != 0) {
    set_memberid(from.memberid());
  }
  if (from.alarm() != 0) {
    set_alarm(from.alarm());
  }
}

void AlarmMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AlarmMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmMember::CopyFrom(const AlarmMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMember::IsInitialized() const {
  return true;
}

void AlarmMember::Swap(AlarmMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlarmMember::InternalSwap(AlarmMember* other) {
  std::swap(memberid_, other->memberid_);
  std::swap(alarm_, other->alarm_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlarmMember::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlarmMember

// uint64 memberID = 1;
void AlarmMember::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AlarmMember::memberid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmMember.memberID)
  return memberid_;
}
void AlarmMember::set_memberid(::google::protobuf::uint64 value) {
  
  memberid_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmMember.memberID)
}

// .etcdserverpb.AlarmType alarm = 2;
void AlarmMember::clear_alarm() {
  alarm_ = 0;
}
::etcdserverpb::AlarmType AlarmMember::alarm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmMember.alarm)
  return static_cast< ::etcdserverpb::AlarmType >(alarm_);
}
void AlarmMember::set_alarm(::etcdserverpb::AlarmType value) {
  
  alarm_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmMember.alarm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlarmResponse::kHeaderFieldNumber;
const int AlarmResponse::kAlarmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlarmResponse::AlarmResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AlarmResponse)
}
AlarmResponse::AlarmResponse(const AlarmResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alarms_(from.alarms_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmResponse)
}

void AlarmResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AlarmResponse::~AlarmResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmResponse)
  SharedDtor();
}

void AlarmResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AlarmResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[41].descriptor;
}

const AlarmResponse& AlarmResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlarmResponse* AlarmResponse::New(::google::protobuf::Arena* arena) const {
  AlarmResponse* n = new AlarmResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmResponse)
  alarms_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AlarmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AlarmResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .etcdserverpb.AlarmMember alarms = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AlarmResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AlarmResponse)
  return false;
#undef DO_
}

void AlarmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AlarmResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  for (unsigned int i = 0, n = this->alarms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alarms(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AlarmResponse)
}

::google::protobuf::uint8* AlarmResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  for (unsigned int i = 0, n = this->alarms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->alarms(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmResponse)
  return target;
}

size_t AlarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmResponse)
  size_t total_size = 0;

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  {
    unsigned int count = this->alarms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarms(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlarmResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AlarmResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AlarmResponse)
    MergeFrom(*source);
  }
}

void AlarmResponse::MergeFrom(const AlarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alarms_.MergeFrom(from.alarms_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AlarmResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmResponse::CopyFrom(const AlarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmResponse::IsInitialized() const {
  return true;
}

void AlarmResponse::Swap(AlarmResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlarmResponse::InternalSwap(AlarmResponse* other) {
  alarms_.UnsafeArenaSwap(&other->alarms_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlarmResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlarmResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AlarmResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AlarmResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AlarmResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AlarmResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AlarmResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AlarmResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AlarmResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AlarmResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AlarmResponse.header)
}

// repeated .etcdserverpb.AlarmMember alarms = 2;
int AlarmResponse::alarms_size() const {
  return alarms_.size();
}
void AlarmResponse::clear_alarms() {
  alarms_.Clear();
}
const ::etcdserverpb::AlarmMember& AlarmResponse::alarms(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmResponse.alarms)
  return alarms_.Get(index);
}
::etcdserverpb::AlarmMember* AlarmResponse::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AlarmResponse.alarms)
  return alarms_.Mutable(index);
}
::etcdserverpb::AlarmMember* AlarmResponse::add_alarms() {
  // @@protoc_insertion_point(field_add:etcdserverpb.AlarmResponse.alarms)
  return alarms_.Add();
}
::google::protobuf::RepeatedPtrField< ::etcdserverpb::AlarmMember >*
AlarmResponse::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AlarmResponse.alarms)
  return &alarms_;
}
const ::google::protobuf::RepeatedPtrField< ::etcdserverpb::AlarmMember >&
AlarmResponse::alarms() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AlarmResponse.alarms)
  return alarms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusRequest::StatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.StatusRequest)
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[42].descriptor;
}

const StatusRequest& StatusRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusRequest* StatusRequest::New(::google::protobuf::Arena* arena) const {
  StatusRequest* n = new StatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.StatusRequest)
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.StatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.StatusRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.StatusRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.StatusRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.StatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusRequest::InternalSwap(StatusRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kHeaderFieldNumber;
const int StatusResponse::kVersionFieldNumber;
const int StatusResponse::kDbSizeFieldNumber;
const int StatusResponse::kLeaderFieldNumber;
const int StatusResponse::kRaftIndexFieldNumber;
const int StatusResponse::kRaftTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&dbsize_, &from.dbsize_,
    reinterpret_cast<char*>(&raftterm_) -
    reinterpret_cast<char*>(&dbsize_) + sizeof(raftterm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&raftterm_) -
    reinterpret_cast<char*>(&header_) + sizeof(raftterm_));
  _cached_size_ = 0;
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[43].descriptor;
}

const StatusResponse& StatusResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusResponse* StatusResponse::New(::google::protobuf::Arena* arena) const {
  StatusResponse* n = new StatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.StatusResponse)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&dbsize_, 0, reinterpret_cast<char*>(&raftterm_) -
    reinterpret_cast<char*>(&dbsize_) + sizeof(raftterm_));
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.StatusResponse.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dbSize = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dbsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leader = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 raftIndex = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raftindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 raftTerm = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raftterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.StatusResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.StatusResponse.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // int64 dbSize = 3;
  if (this->dbsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dbsize(), output);
  }

  // uint64 leader = 4;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader(), output);
  }

  // uint64 raftIndex = 5;
  if (this->raftindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->raftindex(), output);
  }

  // uint64 raftTerm = 6;
  if (this->raftterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->raftterm(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.StatusResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.StatusResponse.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // int64 dbSize = 3;
  if (this->dbsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dbsize(), target);
  }

  // uint64 leader = 4;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader(), target);
  }

  // uint64 raftIndex = 5;
  if (this->raftindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->raftindex(), target);
  }

  // uint64 raftTerm = 6;
  if (this->raftterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->raftterm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.StatusResponse)
  size_t total_size = 0;

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 dbSize = 3;
  if (this->dbsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dbsize());
  }

  // uint64 leader = 4;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  // uint64 raftIndex = 5;
  if (this->raftindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->raftindex());
  }

  // uint64 raftTerm = 6;
  if (this->raftterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->raftterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.dbsize() != 0) {
    set_dbsize(from.dbsize());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
  if (from.raftindex() != 0) {
    set_raftindex(from.raftindex());
  }
  if (from.raftterm() != 0) {
    set_raftterm(from.raftterm());
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  version_.Swap(&other->version_);
  std::swap(header_, other->header_);
  std::swap(dbsize_, other->dbsize_);
  std::swap(leader_, other->leader_);
  std::swap(raftindex_, other->raftindex_);
  std::swap(raftterm_, other->raftterm_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusResponse

// .etcdserverpb.ResponseHeader header = 1;
bool StatusResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StatusResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& StatusResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* StatusResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.StatusResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* StatusResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.StatusResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StatusResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.StatusResponse.header)
}

// string version = 2;
void StatusResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusResponse::version() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.version)
  return version_.GetNoArena();
}
void StatusResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.version)
}
#if LANG_CXX11
void StatusResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.StatusResponse.version)
}
#endif
void StatusResponse::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.StatusResponse.version)
}
void StatusResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.StatusResponse.version)
}
::std::string* StatusResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.StatusResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusResponse::release_version() {
  // @@protoc_insertion_point(field_release:etcdserverpb.StatusResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.StatusResponse.version)
}

// int64 dbSize = 3;
void StatusResponse::clear_dbsize() {
  dbsize_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StatusResponse::dbsize() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.dbSize)
  return dbsize_;
}
void StatusResponse::set_dbsize(::google::protobuf::int64 value) {
  
  dbsize_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.dbSize)
}

// uint64 leader = 4;
void StatusResponse::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StatusResponse::leader() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.leader)
  return leader_;
}
void StatusResponse::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.leader)
}

// uint64 raftIndex = 5;
void StatusResponse::clear_raftindex() {
  raftindex_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StatusResponse::raftindex() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.raftIndex)
  return raftindex_;
}
void StatusResponse::set_raftindex(::google::protobuf::uint64 value) {
  
  raftindex_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.raftIndex)
}

// uint64 raftTerm = 6;
void StatusResponse::clear_raftterm() {
  raftterm_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StatusResponse::raftterm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.raftTerm)
  return raftterm_;
}
void StatusResponse::set_raftterm(::google::protobuf::uint64 value) {
  
  raftterm_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.raftTerm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthEnableRequest::AuthEnableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthEnableRequest)
}
AuthEnableRequest::AuthEnableRequest(const AuthEnableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthEnableRequest)
}

void AuthEnableRequest::SharedCtor() {
  _cached_size_ = 0;
}

AuthEnableRequest::~AuthEnableRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthEnableRequest)
  SharedDtor();
}

void AuthEnableRequest::SharedDtor() {
}

void AuthEnableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthEnableRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[44].descriptor;
}

const AuthEnableRequest& AuthEnableRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthEnableRequest* AuthEnableRequest::New(::google::protobuf::Arena* arena) const {
  AuthEnableRequest* n = new AuthEnableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthEnableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthEnableRequest)
}

bool AuthEnableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthEnableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthEnableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthEnableRequest)
  return false;
#undef DO_
}

void AuthEnableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthEnableRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthEnableRequest)
}

::google::protobuf::uint8* AuthEnableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthEnableRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthEnableRequest)
  return target;
}

size_t AuthEnableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthEnableRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthEnableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthEnableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthEnableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthEnableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthEnableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthEnableRequest)
    MergeFrom(*source);
  }
}

void AuthEnableRequest::MergeFrom(const AuthEnableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthEnableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void AuthEnableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthEnableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthEnableRequest::CopyFrom(const AuthEnableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthEnableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthEnableRequest::IsInitialized() const {
  return true;
}

void AuthEnableRequest::Swap(AuthEnableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthEnableRequest::InternalSwap(AuthEnableRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthEnableRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthEnableRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthDisableRequest::AuthDisableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthDisableRequest)
}
AuthDisableRequest::AuthDisableRequest(const AuthDisableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthDisableRequest)
}

void AuthDisableRequest::SharedCtor() {
  _cached_size_ = 0;
}

AuthDisableRequest::~AuthDisableRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthDisableRequest)
  SharedDtor();
}

void AuthDisableRequest::SharedDtor() {
}

void AuthDisableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthDisableRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[45].descriptor;
}

const AuthDisableRequest& AuthDisableRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthDisableRequest* AuthDisableRequest::New(::google::protobuf::Arena* arena) const {
  AuthDisableRequest* n = new AuthDisableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthDisableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthDisableRequest)
}

bool AuthDisableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthDisableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthDisableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthDisableRequest)
  return false;
#undef DO_
}

void AuthDisableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthDisableRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthDisableRequest)
}

::google::protobuf::uint8* AuthDisableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthDisableRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthDisableRequest)
  return target;
}

size_t AuthDisableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthDisableRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthDisableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthDisableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthDisableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthDisableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthDisableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthDisableRequest)
    MergeFrom(*source);
  }
}

void AuthDisableRequest::MergeFrom(const AuthDisableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthDisableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void AuthDisableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthDisableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthDisableRequest::CopyFrom(const AuthDisableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthDisableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthDisableRequest::IsInitialized() const {
  return true;
}

void AuthDisableRequest::Swap(AuthDisableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthDisableRequest::InternalSwap(AuthDisableRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthDisableRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthDisableRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest::kNameFieldNumber;
const int AuthenticateRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest::AuthenticateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthenticateRequest)
}
AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthenticateRequest)
}

void AuthenticateRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthenticateRequest)
  SharedDtor();
}

void AuthenticateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[46].descriptor;
}

const AuthenticateRequest& AuthenticateRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateRequest* AuthenticateRequest::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest* n = new AuthenticateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthenticateRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthenticateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthenticateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthenticateRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthenticateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthenticateRequest)
  return false;
#undef DO_
}

void AuthenticateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthenticateRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthenticateRequest)
}

::google::protobuf::uint8* AuthenticateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthenticateRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthenticateRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthenticateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthenticateRequest)
    MergeFrom(*source);
  }
}

void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthenticateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {
  return true;
}

void AuthenticateRequest::Swap(AuthenticateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateRequest

// string name = 1;
void AuthenticateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateRequest.name)
  return name_.GetNoArena();
}
void AuthenticateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthenticateRequest.name)
}
#if LANG_CXX11
void AuthenticateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthenticateRequest.name)
}
#endif
void AuthenticateRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthenticateRequest.name)
}
void AuthenticateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthenticateRequest.name)
}
::std::string* AuthenticateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateRequest.name)
}

// string password = 2;
void AuthenticateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateRequest.password)
  return password_.GetNoArena();
}
void AuthenticateRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthenticateRequest.password)
}
#if LANG_CXX11
void AuthenticateRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthenticateRequest.password)
}
#endif
void AuthenticateRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthenticateRequest.password)
}
void AuthenticateRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthenticateRequest.password)
}
::std::string* AuthenticateRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserAddRequest::kNameFieldNumber;
const int AuthUserAddRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserAddRequest::AuthUserAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserAddRequest)
}
AuthUserAddRequest::AuthUserAddRequest(const AuthUserAddRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserAddRequest)
}

void AuthUserAddRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthUserAddRequest::~AuthUserAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserAddRequest)
  SharedDtor();
}

void AuthUserAddRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserAddRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[47].descriptor;
}

const AuthUserAddRequest& AuthUserAddRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserAddRequest* AuthUserAddRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserAddRequest* n = new AuthUserAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserAddRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthUserAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserAddRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserAddRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserAddRequest)
  return false;
#undef DO_
}

void AuthUserAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserAddRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserAddRequest)
}

::google::protobuf::uint8* AuthUserAddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserAddRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserAddRequest)
  return target;
}

size_t AuthUserAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserAddRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserAddRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserAddRequest)
    MergeFrom(*source);
  }
}

void AuthUserAddRequest::MergeFrom(const AuthUserAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthUserAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserAddRequest::CopyFrom(const AuthUserAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserAddRequest::IsInitialized() const {
  return true;
}

void AuthUserAddRequest::Swap(AuthUserAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserAddRequest::InternalSwap(AuthUserAddRequest* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserAddRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserAddRequest

// string name = 1;
void AuthUserAddRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserAddRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddRequest.name)
  return name_.GetNoArena();
}
void AuthUserAddRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserAddRequest.name)
}
#if LANG_CXX11
void AuthUserAddRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserAddRequest.name)
}
#endif
void AuthUserAddRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserAddRequest.name)
}
void AuthUserAddRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserAddRequest.name)
}
::std::string* AuthUserAddRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserAddRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserAddRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddRequest.name)
}

// string password = 2;
void AuthUserAddRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserAddRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddRequest.password)
  return password_.GetNoArena();
}
void AuthUserAddRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserAddRequest.password)
}
#if LANG_CXX11
void AuthUserAddRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserAddRequest.password)
}
#endif
void AuthUserAddRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserAddRequest.password)
}
void AuthUserAddRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserAddRequest.password)
}
::std::string* AuthUserAddRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserAddRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserAddRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserGetRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserGetRequest::AuthUserGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGetRequest)
}
AuthUserGetRequest::AuthUserGetRequest(const AuthUserGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGetRequest)
}

void AuthUserGetRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthUserGetRequest::~AuthUserGetRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGetRequest)
  SharedDtor();
}

void AuthUserGetRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserGetRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[48].descriptor;
}

const AuthUserGetRequest& AuthUserGetRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserGetRequest* AuthUserGetRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserGetRequest* n = new AuthUserGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGetRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthUserGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserGetRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserGetRequest)
  return false;
#undef DO_
}

void AuthUserGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserGetRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserGetRequest)
}

::google::protobuf::uint8* AuthUserGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGetRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGetRequest)
  return target;
}

size_t AuthUserGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGetRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGetRequest)
    MergeFrom(*source);
  }
}

void AuthUserGetRequest::MergeFrom(const AuthUserGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AuthUserGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGetRequest::CopyFrom(const AuthUserGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGetRequest::IsInitialized() const {
  return true;
}

void AuthUserGetRequest::Swap(AuthUserGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserGetRequest::InternalSwap(AuthUserGetRequest* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserGetRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserGetRequest

// string name = 1;
void AuthUserGetRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserGetRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGetRequest.name)
  return name_.GetNoArena();
}
void AuthUserGetRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGetRequest.name)
}
#if LANG_CXX11
void AuthUserGetRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserGetRequest.name)
}
#endif
void AuthUserGetRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGetRequest.name)
}
void AuthUserGetRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGetRequest.name)
}
::std::string* AuthUserGetRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGetRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserGetRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGetRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserGetRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGetRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserDeleteRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserDeleteRequest::AuthUserDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserDeleteRequest)
}
AuthUserDeleteRequest::AuthUserDeleteRequest(const AuthUserDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserDeleteRequest)
}

void AuthUserDeleteRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthUserDeleteRequest::~AuthUserDeleteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserDeleteRequest)
  SharedDtor();
}

void AuthUserDeleteRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserDeleteRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[49].descriptor;
}

const AuthUserDeleteRequest& AuthUserDeleteRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserDeleteRequest* AuthUserDeleteRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserDeleteRequest* n = new AuthUserDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserDeleteRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthUserDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserDeleteRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserDeleteRequest)
  return false;
#undef DO_
}

void AuthUserDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserDeleteRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserDeleteRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserDeleteRequest)
}

::google::protobuf::uint8* AuthUserDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserDeleteRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserDeleteRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserDeleteRequest)
  return target;
}

size_t AuthUserDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserDeleteRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserDeleteRequest)
    MergeFrom(*source);
  }
}

void AuthUserDeleteRequest::MergeFrom(const AuthUserDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AuthUserDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserDeleteRequest::CopyFrom(const AuthUserDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserDeleteRequest::IsInitialized() const {
  return true;
}

void AuthUserDeleteRequest::Swap(AuthUserDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserDeleteRequest::InternalSwap(AuthUserDeleteRequest* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserDeleteRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserDeleteRequest

// string name = 1;
void AuthUserDeleteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserDeleteRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserDeleteRequest.name)
  return name_.GetNoArena();
}
void AuthUserDeleteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserDeleteRequest.name)
}
#if LANG_CXX11
void AuthUserDeleteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserDeleteRequest.name)
}
#endif
void AuthUserDeleteRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserDeleteRequest.name)
}
void AuthUserDeleteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserDeleteRequest.name)
}
::std::string* AuthUserDeleteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserDeleteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserDeleteRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserDeleteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserDeleteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserDeleteRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserChangePasswordRequest::kNameFieldNumber;
const int AuthUserChangePasswordRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserChangePasswordRequest::AuthUserChangePasswordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserChangePasswordRequest)
}
AuthUserChangePasswordRequest::AuthUserChangePasswordRequest(const AuthUserChangePasswordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserChangePasswordRequest)
}

void AuthUserChangePasswordRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthUserChangePasswordRequest::~AuthUserChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserChangePasswordRequest)
  SharedDtor();
}

void AuthUserChangePasswordRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserChangePasswordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserChangePasswordRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[50].descriptor;
}

const AuthUserChangePasswordRequest& AuthUserChangePasswordRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserChangePasswordRequest* AuthUserChangePasswordRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserChangePasswordRequest* n = new AuthUserChangePasswordRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserChangePasswordRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthUserChangePasswordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserChangePasswordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserChangePasswordRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserChangePasswordRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserChangePasswordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserChangePasswordRequest)
  return false;
#undef DO_
}

void AuthUserChangePasswordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserChangePasswordRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserChangePasswordRequest)
}

::google::protobuf::uint8* AuthUserChangePasswordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserChangePasswordRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserChangePasswordRequest)
  return target;
}

size_t AuthUserChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserChangePasswordRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserChangePasswordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserChangePasswordRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserChangePasswordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserChangePasswordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserChangePasswordRequest)
    MergeFrom(*source);
  }
}

void AuthUserChangePasswordRequest::MergeFrom(const AuthUserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthUserChangePasswordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserChangePasswordRequest::CopyFrom(const AuthUserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserChangePasswordRequest::IsInitialized() const {
  return true;
}

void AuthUserChangePasswordRequest::Swap(AuthUserChangePasswordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserChangePasswordRequest::InternalSwap(AuthUserChangePasswordRequest* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserChangePasswordRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserChangePasswordRequest

// string name = 1;
void AuthUserChangePasswordRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserChangePasswordRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserChangePasswordRequest.name)
  return name_.GetNoArena();
}
void AuthUserChangePasswordRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserChangePasswordRequest.name)
}
#if LANG_CXX11
void AuthUserChangePasswordRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserChangePasswordRequest.name)
}
#endif
void AuthUserChangePasswordRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserChangePasswordRequest.name)
}
void AuthUserChangePasswordRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserChangePasswordRequest.name)
}
::std::string* AuthUserChangePasswordRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserChangePasswordRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserChangePasswordRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserChangePasswordRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserChangePasswordRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserChangePasswordRequest.name)
}

// string password = 2;
void AuthUserChangePasswordRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserChangePasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserChangePasswordRequest.password)
  return password_.GetNoArena();
}
void AuthUserChangePasswordRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserChangePasswordRequest.password)
}
#if LANG_CXX11
void AuthUserChangePasswordRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserChangePasswordRequest.password)
}
#endif
void AuthUserChangePasswordRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserChangePasswordRequest.password)
}
void AuthUserChangePasswordRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserChangePasswordRequest.password)
}
::std::string* AuthUserChangePasswordRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserChangePasswordRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserChangePasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserChangePasswordRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserChangePasswordRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserChangePasswordRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserGrantRoleRequest::kUserFieldNumber;
const int AuthUserGrantRoleRequest::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserGrantRoleRequest::AuthUserGrantRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGrantRoleRequest)
}
AuthUserGrantRoleRequest::AuthUserGrantRoleRequest(const AuthUserGrantRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGrantRoleRequest)
}

void AuthUserGrantRoleRequest::SharedCtor() {
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthUserGrantRoleRequest::~AuthUserGrantRoleRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGrantRoleRequest)
  SharedDtor();
}

void AuthUserGrantRoleRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserGrantRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserGrantRoleRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[51].descriptor;
}

const AuthUserGrantRoleRequest& AuthUserGrantRoleRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserGrantRoleRequest* AuthUserGrantRoleRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserGrantRoleRequest* n = new AuthUserGrantRoleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserGrantRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGrantRoleRequest)
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthUserGrantRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserGrantRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserGrantRoleRequest.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserGrantRoleRequest.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserGrantRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserGrantRoleRequest)
  return false;
#undef DO_
}

void AuthUserGrantRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserGrantRoleRequest)
  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserGrantRoleRequest)
}

::google::protobuf::uint8* AuthUserGrantRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGrantRoleRequest)
  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGrantRoleRequest)
  return target;
}

size_t AuthUserGrantRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGrantRoleRequest)
  size_t total_size = 0;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string role = 2;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserGrantRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGrantRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserGrantRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGrantRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGrantRoleRequest)
    MergeFrom(*source);
  }
}

void AuthUserGrantRoleRequest::MergeFrom(const AuthUserGrantRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthUserGrantRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGrantRoleRequest::CopyFrom(const AuthUserGrantRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGrantRoleRequest::IsInitialized() const {
  return true;
}

void AuthUserGrantRoleRequest::Swap(AuthUserGrantRoleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserGrantRoleRequest::InternalSwap(AuthUserGrantRoleRequest* other) {
  user_.Swap(&other->user_);
  role_.Swap(&other->role_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserGrantRoleRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserGrantRoleRequest

// string user = 1;
void AuthUserGrantRoleRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserGrantRoleRequest::user() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGrantRoleRequest.user)
  return user_.GetNoArena();
}
void AuthUserGrantRoleRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGrantRoleRequest.user)
}
#if LANG_CXX11
void AuthUserGrantRoleRequest::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserGrantRoleRequest.user)
}
#endif
void AuthUserGrantRoleRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGrantRoleRequest.user)
}
void AuthUserGrantRoleRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGrantRoleRequest.user)
}
::std::string* AuthUserGrantRoleRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGrantRoleRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserGrantRoleRequest::release_user() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGrantRoleRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserGrantRoleRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGrantRoleRequest.user)
}

// string role = 2;
void AuthUserGrantRoleRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserGrantRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGrantRoleRequest.role)
  return role_.GetNoArena();
}
void AuthUserGrantRoleRequest::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGrantRoleRequest.role)
}
#if LANG_CXX11
void AuthUserGrantRoleRequest::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserGrantRoleRequest.role)
}
#endif
void AuthUserGrantRoleRequest::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGrantRoleRequest.role)
}
void AuthUserGrantRoleRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGrantRoleRequest.role)
}
::std::string* AuthUserGrantRoleRequest::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGrantRoleRequest.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserGrantRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGrantRoleRequest.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserGrantRoleRequest::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGrantRoleRequest.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserRevokeRoleRequest::kNameFieldNumber;
const int AuthUserRevokeRoleRequest::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserRevokeRoleRequest)
}
AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest(const AuthUserRevokeRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserRevokeRoleRequest)
}

void AuthUserRevokeRoleRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthUserRevokeRoleRequest::~AuthUserRevokeRoleRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserRevokeRoleRequest)
  SharedDtor();
}

void AuthUserRevokeRoleRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserRevokeRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserRevokeRoleRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[52].descriptor;
}

const AuthUserRevokeRoleRequest& AuthUserRevokeRoleRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserRevokeRoleRequest* AuthUserRevokeRoleRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserRevokeRoleRequest* n = new AuthUserRevokeRoleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserRevokeRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserRevokeRoleRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthUserRevokeRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserRevokeRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserRevokeRoleRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserRevokeRoleRequest.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserRevokeRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserRevokeRoleRequest)
  return false;
#undef DO_
}

void AuthUserRevokeRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserRevokeRoleRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserRevokeRoleRequest)
}

::google::protobuf::uint8* AuthUserRevokeRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserRevokeRoleRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserRevokeRoleRequest)
  return target;
}

size_t AuthUserRevokeRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserRevokeRoleRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string role = 2;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserRevokeRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserRevokeRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserRevokeRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserRevokeRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserRevokeRoleRequest)
    MergeFrom(*source);
  }
}

void AuthUserRevokeRoleRequest::MergeFrom(const AuthUserRevokeRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthUserRevokeRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserRevokeRoleRequest::CopyFrom(const AuthUserRevokeRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRevokeRoleRequest::IsInitialized() const {
  return true;
}

void AuthUserRevokeRoleRequest::Swap(AuthUserRevokeRoleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserRevokeRoleRequest::InternalSwap(AuthUserRevokeRoleRequest* other) {
  name_.Swap(&other->name_);
  role_.Swap(&other->role_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserRevokeRoleRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserRevokeRoleRequest

// string name = 1;
void AuthUserRevokeRoleRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserRevokeRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserRevokeRoleRequest.name)
  return name_.GetNoArena();
}
void AuthUserRevokeRoleRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
#if LANG_CXX11
void AuthUserRevokeRoleRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
#endif
void AuthUserRevokeRoleRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
void AuthUserRevokeRoleRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
::std::string* AuthUserRevokeRoleRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserRevokeRoleRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserRevokeRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserRevokeRoleRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserRevokeRoleRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserRevokeRoleRequest.name)
}

// string role = 2;
void AuthUserRevokeRoleRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthUserRevokeRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserRevokeRoleRequest.role)
  return role_.GetNoArena();
}
void AuthUserRevokeRoleRequest::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
#if LANG_CXX11
void AuthUserRevokeRoleRequest::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
#endif
void AuthUserRevokeRoleRequest::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
void AuthUserRevokeRoleRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
::std::string* AuthUserRevokeRoleRequest::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserRevokeRoleRequest.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthUserRevokeRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserRevokeRoleRequest.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthUserRevokeRoleRequest::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserRevokeRoleRequest.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleAddRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleAddRequest::AuthRoleAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleAddRequest)
}
AuthRoleAddRequest::AuthRoleAddRequest(const AuthRoleAddRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleAddRequest)
}

void AuthRoleAddRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthRoleAddRequest::~AuthRoleAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleAddRequest)
  SharedDtor();
}

void AuthRoleAddRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleAddRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[53].descriptor;
}

const AuthRoleAddRequest& AuthRoleAddRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleAddRequest* AuthRoleAddRequest::New(::google::protobuf::Arena* arena) const {
  AuthRoleAddRequest* n = new AuthRoleAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleAddRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRoleAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleAddRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleAddRequest)
  return false;
#undef DO_
}

void AuthRoleAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleAddRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleAddRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleAddRequest)
}

::google::protobuf::uint8* AuthRoleAddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleAddRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleAddRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleAddRequest)
  return target;
}

size_t AuthRoleAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleAddRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleAddRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleAddRequest)
    MergeFrom(*source);
  }
}

void AuthRoleAddRequest::MergeFrom(const AuthRoleAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AuthRoleAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleAddRequest::CopyFrom(const AuthRoleAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleAddRequest::IsInitialized() const {
  return true;
}

void AuthRoleAddRequest::Swap(AuthRoleAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleAddRequest::InternalSwap(AuthRoleAddRequest* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleAddRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleAddRequest

// string name = 1;
void AuthRoleAddRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleAddRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleAddRequest.name)
  return name_.GetNoArena();
}
void AuthRoleAddRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleAddRequest.name)
}
#if LANG_CXX11
void AuthRoleAddRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleAddRequest.name)
}
#endif
void AuthRoleAddRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleAddRequest.name)
}
void AuthRoleAddRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleAddRequest.name)
}
::std::string* AuthRoleAddRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleAddRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleAddRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleAddRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleAddRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleAddRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleGetRequest::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleGetRequest::AuthRoleGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGetRequest)
}
AuthRoleGetRequest::AuthRoleGetRequest(const AuthRoleGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGetRequest)
}

void AuthRoleGetRequest::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthRoleGetRequest::~AuthRoleGetRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGetRequest)
  SharedDtor();
}

void AuthRoleGetRequest::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleGetRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[54].descriptor;
}

const AuthRoleGetRequest& AuthRoleGetRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleGetRequest* AuthRoleGetRequest::New(::google::protobuf::Arena* arena) const {
  AuthRoleGetRequest* n = new AuthRoleGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGetRequest)
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRoleGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string role = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleGetRequest.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleGetRequest)
  return false;
#undef DO_
}

void AuthRoleGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleGetRequest)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGetRequest.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleGetRequest)
}

::google::protobuf::uint8* AuthRoleGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGetRequest)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGetRequest.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGetRequest)
  return target;
}

size_t AuthRoleGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGetRequest)
  size_t total_size = 0;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGetRequest)
    MergeFrom(*source);
  }
}

void AuthRoleGetRequest::MergeFrom(const AuthRoleGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthRoleGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGetRequest::CopyFrom(const AuthRoleGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGetRequest::IsInitialized() const {
  return true;
}

void AuthRoleGetRequest::Swap(AuthRoleGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleGetRequest::InternalSwap(AuthRoleGetRequest* other) {
  role_.Swap(&other->role_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleGetRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleGetRequest

// string role = 1;
void AuthRoleGetRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleGetRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGetRequest.role)
  return role_.GetNoArena();
}
void AuthRoleGetRequest::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleGetRequest.role)
}
#if LANG_CXX11
void AuthRoleGetRequest::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleGetRequest.role)
}
#endif
void AuthRoleGetRequest::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleGetRequest.role)
}
void AuthRoleGetRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleGetRequest.role)
}
::std::string* AuthRoleGetRequest::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGetRequest.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleGetRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGetRequest.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleGetRequest::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGetRequest.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserListRequest::AuthUserListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserListRequest)
}
AuthUserListRequest::AuthUserListRequest(const AuthUserListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserListRequest)
}

void AuthUserListRequest::SharedCtor() {
  _cached_size_ = 0;
}

AuthUserListRequest::~AuthUserListRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserListRequest)
  SharedDtor();
}

void AuthUserListRequest::SharedDtor() {
}

void AuthUserListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserListRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[55].descriptor;
}

const AuthUserListRequest& AuthUserListRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserListRequest* AuthUserListRequest::New(::google::protobuf::Arena* arena) const {
  AuthUserListRequest* n = new AuthUserListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserListRequest)
}

bool AuthUserListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserListRequest)
  return false;
#undef DO_
}

void AuthUserListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserListRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserListRequest)
}

::google::protobuf::uint8* AuthUserListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserListRequest)
  return target;
}

size_t AuthUserListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserListRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserListRequest)
    MergeFrom(*source);
  }
}

void AuthUserListRequest::MergeFrom(const AuthUserListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void AuthUserListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserListRequest::CopyFrom(const AuthUserListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserListRequest::IsInitialized() const {
  return true;
}

void AuthUserListRequest::Swap(AuthUserListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserListRequest::InternalSwap(AuthUserListRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserListRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleListRequest::AuthRoleListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleListRequest)
}
AuthRoleListRequest::AuthRoleListRequest(const AuthRoleListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleListRequest)
}

void AuthRoleListRequest::SharedCtor() {
  _cached_size_ = 0;
}

AuthRoleListRequest::~AuthRoleListRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleListRequest)
  SharedDtor();
}

void AuthRoleListRequest::SharedDtor() {
}

void AuthRoleListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleListRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[56].descriptor;
}

const AuthRoleListRequest& AuthRoleListRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleListRequest* AuthRoleListRequest::New(::google::protobuf::Arena* arena) const {
  AuthRoleListRequest* n = new AuthRoleListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleListRequest)
}

bool AuthRoleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleListRequest)
  return false;
#undef DO_
}

void AuthRoleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleListRequest)
  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleListRequest)
}

::google::protobuf::uint8* AuthRoleListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleListRequest)
  return target;
}

size_t AuthRoleListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleListRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleListRequest)
    MergeFrom(*source);
  }
}

void AuthRoleListRequest::MergeFrom(const AuthRoleListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void AuthRoleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleListRequest::CopyFrom(const AuthRoleListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleListRequest::IsInitialized() const {
  return true;
}

void AuthRoleListRequest::Swap(AuthRoleListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleListRequest::InternalSwap(AuthRoleListRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleListRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleDeleteRequest::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleDeleteRequest::AuthRoleDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleDeleteRequest)
}
AuthRoleDeleteRequest::AuthRoleDeleteRequest(const AuthRoleDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleDeleteRequest)
}

void AuthRoleDeleteRequest::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthRoleDeleteRequest::~AuthRoleDeleteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleDeleteRequest)
  SharedDtor();
}

void AuthRoleDeleteRequest::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleDeleteRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[57].descriptor;
}

const AuthRoleDeleteRequest& AuthRoleDeleteRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleDeleteRequest* AuthRoleDeleteRequest::New(::google::protobuf::Arena* arena) const {
  AuthRoleDeleteRequest* n = new AuthRoleDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleDeleteRequest)
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRoleDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string role = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleDeleteRequest.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleDeleteRequest)
  return false;
#undef DO_
}

void AuthRoleDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleDeleteRequest)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleDeleteRequest.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleDeleteRequest)
}

::google::protobuf::uint8* AuthRoleDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleDeleteRequest)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleDeleteRequest.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleDeleteRequest)
  return target;
}

size_t AuthRoleDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleDeleteRequest)
  size_t total_size = 0;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleDeleteRequest)
    MergeFrom(*source);
  }
}

void AuthRoleDeleteRequest::MergeFrom(const AuthRoleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthRoleDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleDeleteRequest::CopyFrom(const AuthRoleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleDeleteRequest::IsInitialized() const {
  return true;
}

void AuthRoleDeleteRequest::Swap(AuthRoleDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleDeleteRequest::InternalSwap(AuthRoleDeleteRequest* other) {
  role_.Swap(&other->role_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleDeleteRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleDeleteRequest

// string role = 1;
void AuthRoleDeleteRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleDeleteRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleDeleteRequest.role)
  return role_.GetNoArena();
}
void AuthRoleDeleteRequest::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleDeleteRequest.role)
}
#if LANG_CXX11
void AuthRoleDeleteRequest::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleDeleteRequest.role)
}
#endif
void AuthRoleDeleteRequest::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleDeleteRequest.role)
}
void AuthRoleDeleteRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleDeleteRequest.role)
}
::std::string* AuthRoleDeleteRequest::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleDeleteRequest.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleDeleteRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleDeleteRequest.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleDeleteRequest::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleDeleteRequest.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleGrantPermissionRequest::kNameFieldNumber;
const int AuthRoleGrantPermissionRequest::kPermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGrantPermissionRequest)
}
AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest(const AuthRoleGrantPermissionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_perm()) {
    perm_ = new ::authpb::Permission(*from.perm_);
  } else {
    perm_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGrantPermissionRequest)
}

void AuthRoleGrantPermissionRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perm_ = NULL;
  _cached_size_ = 0;
}

AuthRoleGrantPermissionRequest::~AuthRoleGrantPermissionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGrantPermissionRequest)
  SharedDtor();
}

void AuthRoleGrantPermissionRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete perm_;
  }
}

void AuthRoleGrantPermissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleGrantPermissionRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[58].descriptor;
}

const AuthRoleGrantPermissionRequest& AuthRoleGrantPermissionRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleGrantPermissionRequest* AuthRoleGrantPermissionRequest::New(::google::protobuf::Arena* arena) const {
  AuthRoleGrantPermissionRequest* n = new AuthRoleGrantPermissionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleGrantPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && perm_ != NULL) {
    delete perm_;
  }
  perm_ = NULL;
}

bool AuthRoleGrantPermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleGrantPermissionRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .authpb.Permission perm = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleGrantPermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleGrantPermissionRequest)
  return false;
#undef DO_
}

void AuthRoleGrantPermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGrantPermissionRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .authpb.Permission perm = 2;
  if (this->has_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->perm_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleGrantPermissionRequest)
}

::google::protobuf::uint8* AuthRoleGrantPermissionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGrantPermissionRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .authpb.Permission perm = 2;
  if (this->has_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->perm_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGrantPermissionRequest)
  return target;
}

size_t AuthRoleGrantPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .authpb.Permission perm = 2;
  if (this->has_perm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->perm_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleGrantPermissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGrantPermissionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleGrantPermissionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGrantPermissionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGrantPermissionRequest)
    MergeFrom(*source);
  }
}

void AuthRoleGrantPermissionRequest::MergeFrom(const AuthRoleGrantPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_perm()) {
    mutable_perm()->::authpb::Permission::MergeFrom(from.perm());
  }
}

void AuthRoleGrantPermissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGrantPermissionRequest::CopyFrom(const AuthRoleGrantPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGrantPermissionRequest::IsInitialized() const {
  return true;
}

void AuthRoleGrantPermissionRequest::Swap(AuthRoleGrantPermissionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleGrantPermissionRequest::InternalSwap(AuthRoleGrantPermissionRequest* other) {
  name_.Swap(&other->name_);
  std::swap(perm_, other->perm_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleGrantPermissionRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleGrantPermissionRequest

// string name = 1;
void AuthRoleGrantPermissionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleGrantPermissionRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGrantPermissionRequest.name)
  return name_.GetNoArena();
}
void AuthRoleGrantPermissionRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
#if LANG_CXX11
void AuthRoleGrantPermissionRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
#endif
void AuthRoleGrantPermissionRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
void AuthRoleGrantPermissionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
::std::string* AuthRoleGrantPermissionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGrantPermissionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleGrantPermissionRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGrantPermissionRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleGrantPermissionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}

// .authpb.Permission perm = 2;
bool AuthRoleGrantPermissionRequest::has_perm() const {
  return this != internal_default_instance() && perm_ != NULL;
}
void AuthRoleGrantPermissionRequest::clear_perm() {
  if (GetArenaNoVirtual() == NULL && perm_ != NULL) delete perm_;
  perm_ = NULL;
}
const ::authpb::Permission& AuthRoleGrantPermissionRequest::perm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
  return perm_ != NULL ? *perm_
                         : *::authpb::Permission::internal_default_instance();
}
::authpb::Permission* AuthRoleGrantPermissionRequest::mutable_perm() {
  
  if (perm_ == NULL) {
    perm_ = new ::authpb::Permission;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
  return perm_;
}
::authpb::Permission* AuthRoleGrantPermissionRequest::release_perm() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
  
  ::authpb::Permission* temp = perm_;
  perm_ = NULL;
  return temp;
}
void AuthRoleGrantPermissionRequest::set_allocated_perm(::authpb::Permission* perm) {
  delete perm_;
  perm_ = perm;
  if (perm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleRevokePermissionRequest::kRoleFieldNumber;
const int AuthRoleRevokePermissionRequest::kKeyFieldNumber;
const int AuthRoleRevokePermissionRequest::kRangeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleRevokePermissionRequest)
}
AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest(const AuthRoleRevokePermissionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.range_end().size() > 0) {
    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleRevokePermissionRequest)
}

void AuthRoleRevokePermissionRequest::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthRoleRevokePermissionRequest::~AuthRoleRevokePermissionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleRevokePermissionRequest)
  SharedDtor();
}

void AuthRoleRevokePermissionRequest::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleRevokePermissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleRevokePermissionRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[59].descriptor;
}

const AuthRoleRevokePermissionRequest& AuthRoleRevokePermissionRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleRevokePermissionRequest* AuthRoleRevokePermissionRequest::New(::google::protobuf::Arena* arena) const {
  AuthRoleRevokePermissionRequest* n = new AuthRoleRevokePermissionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleRevokePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRoleRevokePermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string role = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleRevokePermissionRequest.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleRevokePermissionRequest.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string range_end = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_range_end()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->range_end().data(), this->range_end().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleRevokePermissionRequest.range_end"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleRevokePermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleRevokePermissionRequest)
  return false;
#undef DO_
}

void AuthRoleRevokePermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string range_end = 3;
  if (this->range_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->range_end().data(), this->range_end().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.range_end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->range_end(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleRevokePermissionRequest)
}

::google::protobuf::uint8* AuthRoleRevokePermissionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string range_end = 3;
  if (this->range_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->range_end().data(), this->range_end().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.range_end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->range_end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleRevokePermissionRequest)
  return target;
}

size_t AuthRoleRevokePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  size_t total_size = 0;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string range_end = 3;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->range_end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleRevokePermissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleRevokePermissionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleRevokePermissionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleRevokePermissionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleRevokePermissionRequest)
    MergeFrom(*source);
  }
}

void AuthRoleRevokePermissionRequest::MergeFrom(const AuthRoleRevokePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
}

void AuthRoleRevokePermissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleRevokePermissionRequest::CopyFrom(const AuthRoleRevokePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleRevokePermissionRequest::IsInitialized() const {
  return true;
}

void AuthRoleRevokePermissionRequest::Swap(AuthRoleRevokePermissionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleRevokePermissionRequest::InternalSwap(AuthRoleRevokePermissionRequest* other) {
  role_.Swap(&other->role_);
  key_.Swap(&other->key_);
  range_end_.Swap(&other->range_end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleRevokePermissionRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleRevokePermissionRequest

// string role = 1;
void AuthRoleRevokePermissionRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleRevokePermissionRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionRequest.role)
  return role_.GetNoArena();
}
void AuthRoleRevokePermissionRequest::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
#if LANG_CXX11
void AuthRoleRevokePermissionRequest::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
#endif
void AuthRoleRevokePermissionRequest::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
void AuthRoleRevokePermissionRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
::std::string* AuthRoleRevokePermissionRequest::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionRequest.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleRevokePermissionRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionRequest.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleRevokePermissionRequest::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}

// string key = 2;
void AuthRoleRevokePermissionRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleRevokePermissionRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionRequest.key)
  return key_.GetNoArena();
}
void AuthRoleRevokePermissionRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
#if LANG_CXX11
void AuthRoleRevokePermissionRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
#endif
void AuthRoleRevokePermissionRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
void AuthRoleRevokePermissionRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
::std::string* AuthRoleRevokePermissionRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleRevokePermissionRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleRevokePermissionRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}

// string range_end = 3;
void AuthRoleRevokePermissionRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRoleRevokePermissionRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
  return range_end_.GetNoArena();
}
void AuthRoleRevokePermissionRequest::set_range_end(const ::std::string& value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
#if LANG_CXX11
void AuthRoleRevokePermissionRequest::set_range_end(::std::string&& value) {
  
  range_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
#endif
void AuthRoleRevokePermissionRequest::set_range_end(const char* value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
void AuthRoleRevokePermissionRequest::set_range_end(const char* value, size_t size) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
::std::string* AuthRoleRevokePermissionRequest::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
  return range_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRoleRevokePermissionRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRoleRevokePermissionRequest::set_allocated_range_end(::std::string* range_end) {
  if (range_end != NULL) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthEnableResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthEnableResponse::AuthEnableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthEnableResponse)
}
AuthEnableResponse::AuthEnableResponse(const AuthEnableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthEnableResponse)
}

void AuthEnableResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthEnableResponse::~AuthEnableResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthEnableResponse)
  SharedDtor();
}

void AuthEnableResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthEnableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthEnableResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[60].descriptor;
}

const AuthEnableResponse& AuthEnableResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthEnableResponse* AuthEnableResponse::New(::google::protobuf::Arena* arena) const {
  AuthEnableResponse* n = new AuthEnableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthEnableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthEnableResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthEnableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthEnableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthEnableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthEnableResponse)
  return false;
#undef DO_
}

void AuthEnableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthEnableResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthEnableResponse)
}

::google::protobuf::uint8* AuthEnableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthEnableResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthEnableResponse)
  return target;
}

size_t AuthEnableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthEnableResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthEnableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthEnableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthEnableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthEnableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthEnableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthEnableResponse)
    MergeFrom(*source);
  }
}

void AuthEnableResponse::MergeFrom(const AuthEnableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthEnableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthEnableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthEnableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthEnableResponse::CopyFrom(const AuthEnableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthEnableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthEnableResponse::IsInitialized() const {
  return true;
}

void AuthEnableResponse::Swap(AuthEnableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthEnableResponse::InternalSwap(AuthEnableResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthEnableResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthEnableResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthEnableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthEnableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthEnableResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthEnableResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthEnableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthEnableResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthEnableResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthEnableResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthEnableResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthEnableResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthDisableResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthDisableResponse::AuthDisableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthDisableResponse)
}
AuthDisableResponse::AuthDisableResponse(const AuthDisableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthDisableResponse)
}

void AuthDisableResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthDisableResponse::~AuthDisableResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthDisableResponse)
  SharedDtor();
}

void AuthDisableResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthDisableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthDisableResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[61].descriptor;
}

const AuthDisableResponse& AuthDisableResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthDisableResponse* AuthDisableResponse::New(::google::protobuf::Arena* arena) const {
  AuthDisableResponse* n = new AuthDisableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthDisableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthDisableResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthDisableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthDisableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthDisableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthDisableResponse)
  return false;
#undef DO_
}

void AuthDisableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthDisableResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthDisableResponse)
}

::google::protobuf::uint8* AuthDisableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthDisableResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthDisableResponse)
  return target;
}

size_t AuthDisableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthDisableResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthDisableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthDisableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthDisableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthDisableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthDisableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthDisableResponse)
    MergeFrom(*source);
  }
}

void AuthDisableResponse::MergeFrom(const AuthDisableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthDisableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthDisableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthDisableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthDisableResponse::CopyFrom(const AuthDisableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthDisableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthDisableResponse::IsInitialized() const {
  return true;
}

void AuthDisableResponse::Swap(AuthDisableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthDisableResponse::InternalSwap(AuthDisableResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthDisableResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[61];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthDisableResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthDisableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthDisableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthDisableResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthDisableResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthDisableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthDisableResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthDisableResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthDisableResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthDisableResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthDisableResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse::kHeaderFieldNumber;
const int AuthenticateResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse::AuthenticateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthenticateResponse)
  SharedDtor();
}

void AuthenticateResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthenticateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[62].descriptor;
}

const AuthenticateResponse& AuthenticateResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateResponse* AuthenticateResponse::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse* n = new AuthenticateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthenticateResponse)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthenticateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthenticateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthenticateResponse.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthenticateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthenticateResponse)
  return false;
#undef DO_
}

void AuthenticateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthenticateResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateResponse.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthenticateResponse)
}

::google::protobuf::uint8* AuthenticateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthenticateResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateResponse.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthenticateResponse)
  size_t total_size = 0;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthenticateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthenticateResponse)
    MergeFrom(*source);
  }
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthenticateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
  return true;
}

void AuthenticateResponse::Swap(AuthenticateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  token_.Swap(&other->token_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[62];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthenticateResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthenticateResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthenticateResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthenticateResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthenticateResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthenticateResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateResponse.header)
}

// string token = 2;
void AuthenticateResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse::token() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateResponse.token)
  return token_.GetNoArena();
}
void AuthenticateResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthenticateResponse.token)
}
#if LANG_CXX11
void AuthenticateResponse::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthenticateResponse.token)
}
#endif
void AuthenticateResponse::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthenticateResponse.token)
}
void AuthenticateResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthenticateResponse.token)
}
::std::string* AuthenticateResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateResponse.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse::release_token() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateResponse.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateResponse.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserAddResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserAddResponse::AuthUserAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserAddResponse)
}
AuthUserAddResponse::AuthUserAddResponse(const AuthUserAddResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserAddResponse)
}

void AuthUserAddResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserAddResponse::~AuthUserAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserAddResponse)
  SharedDtor();
}

void AuthUserAddResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserAddResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[63].descriptor;
}

const AuthUserAddResponse& AuthUserAddResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserAddResponse* AuthUserAddResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserAddResponse* n = new AuthUserAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserAddResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserAddResponse)
  return false;
#undef DO_
}

void AuthUserAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserAddResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserAddResponse)
}

::google::protobuf::uint8* AuthUserAddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserAddResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserAddResponse)
  return target;
}

size_t AuthUserAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserAddResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserAddResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserAddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserAddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserAddResponse)
    MergeFrom(*source);
  }
}

void AuthUserAddResponse::MergeFrom(const AuthUserAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserAddResponse::CopyFrom(const AuthUserAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserAddResponse::IsInitialized() const {
  return true;
}

void AuthUserAddResponse::Swap(AuthUserAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserAddResponse::InternalSwap(AuthUserAddResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserAddResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[63];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserAddResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserAddResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserAddResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserAddResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserAddResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserAddResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserAddResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserGetResponse::kHeaderFieldNumber;
const int AuthUserGetResponse::kRolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserGetResponse::AuthUserGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGetResponse)
}
AuthUserGetResponse::AuthUserGetResponse(const AuthUserGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roles_(from.roles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGetResponse)
}

void AuthUserGetResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserGetResponse::~AuthUserGetResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGetResponse)
  SharedDtor();
}

void AuthUserGetResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserGetResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[64].descriptor;
}

const AuthUserGetResponse& AuthUserGetResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserGetResponse* AuthUserGetResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserGetResponse* n = new AuthUserGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGetResponse)
  roles_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string roles = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_roles()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roles(this->roles_size() - 1).data(),
            this->roles(this->roles_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserGetResponse.roles"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserGetResponse)
  return false;
#undef DO_
}

void AuthUserGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserGetResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roles(i).data(), this->roles(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetResponse.roles");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserGetResponse)
}

::google::protobuf::uint8* AuthUserGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGetResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated string roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roles(i).data(), this->roles(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetResponse.roles");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->roles(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGetResponse)
  return target;
}

size_t AuthUserGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGetResponse)
  size_t total_size = 0;

  // repeated string roles = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->roles_size());
  for (int i = 0; i < this->roles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->roles(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGetResponse)
    MergeFrom(*source);
  }
}

void AuthUserGetResponse::MergeFrom(const AuthUserGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roles_.MergeFrom(from.roles_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGetResponse::CopyFrom(const AuthUserGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGetResponse::IsInitialized() const {
  return true;
}

void AuthUserGetResponse::Swap(AuthUserGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserGetResponse::InternalSwap(AuthUserGetResponse* other) {
  roles_.UnsafeArenaSwap(&other->roles_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserGetResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[64];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserGetResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserGetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserGetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserGetResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGetResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserGetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGetResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGetResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserGetResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGetResponse.header)
}

// repeated string roles = 2;
int AuthUserGetResponse::roles_size() const {
  return roles_.size();
}
void AuthUserGetResponse::clear_roles() {
  roles_.Clear();
}
const ::std::string& AuthUserGetResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGetResponse.roles)
  return roles_.Get(index);
}
::std::string* AuthUserGetResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGetResponse.roles)
  return roles_.Mutable(index);
}
void AuthUserGetResponse::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGetResponse.roles)
  roles_.Mutable(index)->assign(value);
}
void AuthUserGetResponse::set_roles(int index, const char* value) {
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGetResponse.roles)
}
void AuthUserGetResponse::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGetResponse.roles)
}
::std::string* AuthUserGetResponse::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.AuthUserGetResponse.roles)
  return roles_.Add();
}
void AuthUserGetResponse::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthUserGetResponse.roles)
}
void AuthUserGetResponse::add_roles(const char* value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.AuthUserGetResponse.roles)
}
void AuthUserGetResponse::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.AuthUserGetResponse.roles)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthUserGetResponse::roles() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthUserGetResponse.roles)
  return roles_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AuthUserGetResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthUserGetResponse.roles)
  return &roles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserDeleteResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserDeleteResponse::AuthUserDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserDeleteResponse)
}
AuthUserDeleteResponse::AuthUserDeleteResponse(const AuthUserDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserDeleteResponse)
}

void AuthUserDeleteResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserDeleteResponse::~AuthUserDeleteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserDeleteResponse)
  SharedDtor();
}

void AuthUserDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserDeleteResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[65].descriptor;
}

const AuthUserDeleteResponse& AuthUserDeleteResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserDeleteResponse* AuthUserDeleteResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserDeleteResponse* n = new AuthUserDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserDeleteResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserDeleteResponse)
  return false;
#undef DO_
}

void AuthUserDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserDeleteResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserDeleteResponse)
}

::google::protobuf::uint8* AuthUserDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserDeleteResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserDeleteResponse)
  return target;
}

size_t AuthUserDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserDeleteResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserDeleteResponse)
    MergeFrom(*source);
  }
}

void AuthUserDeleteResponse::MergeFrom(const AuthUserDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserDeleteResponse::CopyFrom(const AuthUserDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserDeleteResponse::IsInitialized() const {
  return true;
}

void AuthUserDeleteResponse::Swap(AuthUserDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserDeleteResponse::InternalSwap(AuthUserDeleteResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserDeleteResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[65];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserDeleteResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserDeleteResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserDeleteResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserDeleteResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserDeleteResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserDeleteResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserDeleteResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserChangePasswordResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserChangePasswordResponse::AuthUserChangePasswordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserChangePasswordResponse)
}
AuthUserChangePasswordResponse::AuthUserChangePasswordResponse(const AuthUserChangePasswordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserChangePasswordResponse)
}

void AuthUserChangePasswordResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserChangePasswordResponse::~AuthUserChangePasswordResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserChangePasswordResponse)
  SharedDtor();
}

void AuthUserChangePasswordResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserChangePasswordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserChangePasswordResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[66].descriptor;
}

const AuthUserChangePasswordResponse& AuthUserChangePasswordResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserChangePasswordResponse* AuthUserChangePasswordResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserChangePasswordResponse* n = new AuthUserChangePasswordResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserChangePasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserChangePasswordResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserChangePasswordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserChangePasswordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserChangePasswordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserChangePasswordResponse)
  return false;
#undef DO_
}

void AuthUserChangePasswordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserChangePasswordResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserChangePasswordResponse)
}

::google::protobuf::uint8* AuthUserChangePasswordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserChangePasswordResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserChangePasswordResponse)
  return target;
}

size_t AuthUserChangePasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserChangePasswordResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserChangePasswordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserChangePasswordResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserChangePasswordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserChangePasswordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserChangePasswordResponse)
    MergeFrom(*source);
  }
}

void AuthUserChangePasswordResponse::MergeFrom(const AuthUserChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserChangePasswordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserChangePasswordResponse::CopyFrom(const AuthUserChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserChangePasswordResponse::IsInitialized() const {
  return true;
}

void AuthUserChangePasswordResponse::Swap(AuthUserChangePasswordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserChangePasswordResponse::InternalSwap(AuthUserChangePasswordResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserChangePasswordResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[66];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserChangePasswordResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserChangePasswordResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserChangePasswordResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserChangePasswordResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserChangePasswordResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserChangePasswordResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserChangePasswordResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserChangePasswordResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserChangePasswordResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserChangePasswordResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserChangePasswordResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserGrantRoleResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserGrantRoleResponse::AuthUserGrantRoleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGrantRoleResponse)
}
AuthUserGrantRoleResponse::AuthUserGrantRoleResponse(const AuthUserGrantRoleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGrantRoleResponse)
}

void AuthUserGrantRoleResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserGrantRoleResponse::~AuthUserGrantRoleResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGrantRoleResponse)
  SharedDtor();
}

void AuthUserGrantRoleResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserGrantRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserGrantRoleResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[67].descriptor;
}

const AuthUserGrantRoleResponse& AuthUserGrantRoleResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserGrantRoleResponse* AuthUserGrantRoleResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserGrantRoleResponse* n = new AuthUserGrantRoleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserGrantRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGrantRoleResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserGrantRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserGrantRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserGrantRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserGrantRoleResponse)
  return false;
#undef DO_
}

void AuthUserGrantRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserGrantRoleResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserGrantRoleResponse)
}

::google::protobuf::uint8* AuthUserGrantRoleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGrantRoleResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGrantRoleResponse)
  return target;
}

size_t AuthUserGrantRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGrantRoleResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserGrantRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGrantRoleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserGrantRoleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGrantRoleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGrantRoleResponse)
    MergeFrom(*source);
  }
}

void AuthUserGrantRoleResponse::MergeFrom(const AuthUserGrantRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserGrantRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGrantRoleResponse::CopyFrom(const AuthUserGrantRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGrantRoleResponse::IsInitialized() const {
  return true;
}

void AuthUserGrantRoleResponse::Swap(AuthUserGrantRoleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserGrantRoleResponse::InternalSwap(AuthUserGrantRoleResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserGrantRoleResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[67];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserGrantRoleResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserGrantRoleResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserGrantRoleResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserGrantRoleResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGrantRoleResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserGrantRoleResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGrantRoleResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserGrantRoleResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGrantRoleResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserGrantRoleResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGrantRoleResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserRevokeRoleResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserRevokeRoleResponse)
}
AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse(const AuthUserRevokeRoleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserRevokeRoleResponse)
}

void AuthUserRevokeRoleResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserRevokeRoleResponse::~AuthUserRevokeRoleResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserRevokeRoleResponse)
  SharedDtor();
}

void AuthUserRevokeRoleResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserRevokeRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserRevokeRoleResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[68].descriptor;
}

const AuthUserRevokeRoleResponse& AuthUserRevokeRoleResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserRevokeRoleResponse* AuthUserRevokeRoleResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserRevokeRoleResponse* n = new AuthUserRevokeRoleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserRevokeRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserRevokeRoleResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserRevokeRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserRevokeRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserRevokeRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserRevokeRoleResponse)
  return false;
#undef DO_
}

void AuthUserRevokeRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserRevokeRoleResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserRevokeRoleResponse)
}

::google::protobuf::uint8* AuthUserRevokeRoleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserRevokeRoleResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserRevokeRoleResponse)
  return target;
}

size_t AuthUserRevokeRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserRevokeRoleResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserRevokeRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserRevokeRoleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserRevokeRoleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserRevokeRoleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserRevokeRoleResponse)
    MergeFrom(*source);
  }
}

void AuthUserRevokeRoleResponse::MergeFrom(const AuthUserRevokeRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserRevokeRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserRevokeRoleResponse::CopyFrom(const AuthUserRevokeRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRevokeRoleResponse::IsInitialized() const {
  return true;
}

void AuthUserRevokeRoleResponse::Swap(AuthUserRevokeRoleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserRevokeRoleResponse::InternalSwap(AuthUserRevokeRoleResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserRevokeRoleResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[68];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserRevokeRoleResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserRevokeRoleResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserRevokeRoleResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserRevokeRoleResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserRevokeRoleResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserRevokeRoleResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserRevokeRoleResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserRevokeRoleResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserRevokeRoleResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserRevokeRoleResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserRevokeRoleResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleAddResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleAddResponse::AuthRoleAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleAddResponse)
}
AuthRoleAddResponse::AuthRoleAddResponse(const AuthRoleAddResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleAddResponse)
}

void AuthRoleAddResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthRoleAddResponse::~AuthRoleAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleAddResponse)
  SharedDtor();
}

void AuthRoleAddResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthRoleAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleAddResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[69].descriptor;
}

const AuthRoleAddResponse& AuthRoleAddResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleAddResponse* AuthRoleAddResponse::New(::google::protobuf::Arena* arena) const {
  AuthRoleAddResponse* n = new AuthRoleAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleAddResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthRoleAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleAddResponse)
  return false;
#undef DO_
}

void AuthRoleAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleAddResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleAddResponse)
}

::google::protobuf::uint8* AuthRoleAddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleAddResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleAddResponse)
  return target;
}

size_t AuthRoleAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleAddResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleAddResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleAddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleAddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleAddResponse)
    MergeFrom(*source);
  }
}

void AuthRoleAddResponse::MergeFrom(const AuthRoleAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthRoleAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleAddResponse::CopyFrom(const AuthRoleAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleAddResponse::IsInitialized() const {
  return true;
}

void AuthRoleAddResponse::Swap(AuthRoleAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleAddResponse::InternalSwap(AuthRoleAddResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleAddResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[69];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleAddResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthRoleAddResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthRoleAddResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthRoleAddResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleAddResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthRoleAddResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleAddResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthRoleAddResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleAddResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthRoleAddResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleAddResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleGetResponse::kHeaderFieldNumber;
const int AuthRoleGetResponse::kPermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleGetResponse::AuthRoleGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGetResponse)
}
AuthRoleGetResponse::AuthRoleGetResponse(const AuthRoleGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perm_(from.perm_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGetResponse)
}

void AuthRoleGetResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthRoleGetResponse::~AuthRoleGetResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGetResponse)
  SharedDtor();
}

void AuthRoleGetResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthRoleGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleGetResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[70].descriptor;
}

const AuthRoleGetResponse& AuthRoleGetResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleGetResponse* AuthRoleGetResponse::New(::google::protobuf::Arena* arena) const {
  AuthRoleGetResponse* n = new AuthRoleGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGetResponse)
  perm_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthRoleGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .authpb.Permission perm = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_perm()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleGetResponse)
  return false;
#undef DO_
}

void AuthRoleGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleGetResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .authpb.Permission perm = 2;
  for (unsigned int i = 0, n = this->perm_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->perm(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleGetResponse)
}

::google::protobuf::uint8* AuthRoleGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGetResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .authpb.Permission perm = 2;
  for (unsigned int i = 0, n = this->perm_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->perm(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGetResponse)
  return target;
}

size_t AuthRoleGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGetResponse)
  size_t total_size = 0;

  // repeated .authpb.Permission perm = 2;
  {
    unsigned int count = this->perm_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perm(i));
    }
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGetResponse)
    MergeFrom(*source);
  }
}

void AuthRoleGetResponse::MergeFrom(const AuthRoleGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  perm_.MergeFrom(from.perm_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthRoleGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGetResponse::CopyFrom(const AuthRoleGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGetResponse::IsInitialized() const {
  return true;
}

void AuthRoleGetResponse::Swap(AuthRoleGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleGetResponse::InternalSwap(AuthRoleGetResponse* other) {
  perm_.UnsafeArenaSwap(&other->perm_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleGetResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[70];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleGetResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthRoleGetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthRoleGetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthRoleGetResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGetResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthRoleGetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGetResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthRoleGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGetResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthRoleGetResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGetResponse.header)
}

// repeated .authpb.Permission perm = 2;
int AuthRoleGetResponse::perm_size() const {
  return perm_.size();
}
void AuthRoleGetResponse::clear_perm() {
  perm_.Clear();
}
const ::authpb::Permission& AuthRoleGetResponse::perm(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGetResponse.perm)
  return perm_.Get(index);
}
::authpb::Permission* AuthRoleGetResponse::mutable_perm(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGetResponse.perm)
  return perm_.Mutable(index);
}
::authpb::Permission* AuthRoleGetResponse::add_perm() {
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthRoleGetResponse.perm)
  return perm_.Add();
}
::google::protobuf::RepeatedPtrField< ::authpb::Permission >*
AuthRoleGetResponse::mutable_perm() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthRoleGetResponse.perm)
  return &perm_;
}
const ::google::protobuf::RepeatedPtrField< ::authpb::Permission >&
AuthRoleGetResponse::perm() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthRoleGetResponse.perm)
  return perm_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleListResponse::kHeaderFieldNumber;
const int AuthRoleListResponse::kRolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleListResponse::AuthRoleListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleListResponse)
}
AuthRoleListResponse::AuthRoleListResponse(const AuthRoleListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roles_(from.roles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleListResponse)
}

void AuthRoleListResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthRoleListResponse::~AuthRoleListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleListResponse)
  SharedDtor();
}

void AuthRoleListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthRoleListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleListResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[71].descriptor;
}

const AuthRoleListResponse& AuthRoleListResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleListResponse* AuthRoleListResponse::New(::google::protobuf::Arena* arena) const {
  AuthRoleListResponse* n = new AuthRoleListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleListResponse)
  roles_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthRoleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string roles = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_roles()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roles(this->roles_size() - 1).data(),
            this->roles(this->roles_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthRoleListResponse.roles"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleListResponse)
  return false;
#undef DO_
}

void AuthRoleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleListResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roles(i).data(), this->roles(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleListResponse.roles");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleListResponse)
}

::google::protobuf::uint8* AuthRoleListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleListResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated string roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roles(i).data(), this->roles(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleListResponse.roles");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->roles(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleListResponse)
  return target;
}

size_t AuthRoleListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleListResponse)
  size_t total_size = 0;

  // repeated string roles = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->roles_size());
  for (int i = 0; i < this->roles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->roles(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleListResponse)
    MergeFrom(*source);
  }
}

void AuthRoleListResponse::MergeFrom(const AuthRoleListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roles_.MergeFrom(from.roles_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthRoleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleListResponse::CopyFrom(const AuthRoleListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleListResponse::IsInitialized() const {
  return true;
}

void AuthRoleListResponse::Swap(AuthRoleListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleListResponse::InternalSwap(AuthRoleListResponse* other) {
  roles_.UnsafeArenaSwap(&other->roles_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleListResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[71];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleListResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthRoleListResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthRoleListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthRoleListResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleListResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthRoleListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleListResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthRoleListResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleListResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthRoleListResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleListResponse.header)
}

// repeated string roles = 2;
int AuthRoleListResponse::roles_size() const {
  return roles_.size();
}
void AuthRoleListResponse::clear_roles() {
  roles_.Clear();
}
const ::std::string& AuthRoleListResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleListResponse.roles)
  return roles_.Get(index);
}
::std::string* AuthRoleListResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleListResponse.roles)
  return roles_.Mutable(index);
}
void AuthRoleListResponse::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleListResponse.roles)
  roles_.Mutable(index)->assign(value);
}
void AuthRoleListResponse::set_roles(int index, const char* value) {
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleListResponse.roles)
}
void AuthRoleListResponse::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleListResponse.roles)
}
::std::string* AuthRoleListResponse::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.AuthRoleListResponse.roles)
  return roles_.Add();
}
void AuthRoleListResponse::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthRoleListResponse.roles)
}
void AuthRoleListResponse::add_roles(const char* value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.AuthRoleListResponse.roles)
}
void AuthRoleListResponse::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.AuthRoleListResponse.roles)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthRoleListResponse::roles() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthRoleListResponse.roles)
  return roles_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AuthRoleListResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthRoleListResponse.roles)
  return &roles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserListResponse::kHeaderFieldNumber;
const int AuthUserListResponse::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserListResponse::AuthUserListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserListResponse)
}
AuthUserListResponse::AuthUserListResponse(const AuthUserListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      users_(from.users_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserListResponse)
}

void AuthUserListResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthUserListResponse::~AuthUserListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserListResponse)
  SharedDtor();
}

void AuthUserListResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthUserListResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[72].descriptor;
}

const AuthUserListResponse& AuthUserListResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthUserListResponse* AuthUserListResponse::New(::google::protobuf::Arena* arena) const {
  AuthUserListResponse* n = new AuthUserListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserListResponse)
  users_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string users = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_users()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->users(this->users_size() - 1).data(),
            this->users(this->users_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "etcdserverpb.AuthUserListResponse.users"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthUserListResponse)
  return false;
#undef DO_
}

void AuthUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthUserListResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->users(i).data(), this->users(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserListResponse.users");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthUserListResponse)
}

::google::protobuf::uint8* AuthUserListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserListResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated string users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->users(i).data(), this->users(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserListResponse.users");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->users(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserListResponse)
  return target;
}

size_t AuthUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserListResponse)
  size_t total_size = 0;

  // repeated string users = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->users_size());
  for (int i = 0; i < this->users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->users(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthUserListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserListResponse)
    MergeFrom(*source);
  }
}

void AuthUserListResponse::MergeFrom(const AuthUserListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  users_.MergeFrom(from.users_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserListResponse::CopyFrom(const AuthUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserListResponse::IsInitialized() const {
  return true;
}

void AuthUserListResponse::Swap(AuthUserListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserListResponse::InternalSwap(AuthUserListResponse* other) {
  users_.UnsafeArenaSwap(&other->users_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthUserListResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[72];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthUserListResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthUserListResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthUserListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthUserListResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserListResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthUserListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserListResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthUserListResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserListResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthUserListResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserListResponse.header)
}

// repeated string users = 2;
int AuthUserListResponse::users_size() const {
  return users_.size();
}
void AuthUserListResponse::clear_users() {
  users_.Clear();
}
const ::std::string& AuthUserListResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserListResponse.users)
  return users_.Get(index);
}
::std::string* AuthUserListResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserListResponse.users)
  return users_.Mutable(index);
}
void AuthUserListResponse::set_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserListResponse.users)
  users_.Mutable(index)->assign(value);
}
void AuthUserListResponse::set_users(int index, const char* value) {
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserListResponse.users)
}
void AuthUserListResponse::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserListResponse.users)
}
::std::string* AuthUserListResponse::add_users() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.AuthUserListResponse.users)
  return users_.Add();
}
void AuthUserListResponse::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthUserListResponse.users)
}
void AuthUserListResponse::add_users(const char* value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.AuthUserListResponse.users)
}
void AuthUserListResponse::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.AuthUserListResponse.users)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthUserListResponse::users() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthUserListResponse.users)
  return users_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AuthUserListResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthUserListResponse.users)
  return &users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleDeleteResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleDeleteResponse::AuthRoleDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleDeleteResponse)
}
AuthRoleDeleteResponse::AuthRoleDeleteResponse(const AuthRoleDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleDeleteResponse)
}

void AuthRoleDeleteResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthRoleDeleteResponse::~AuthRoleDeleteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleDeleteResponse)
  SharedDtor();
}

void AuthRoleDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthRoleDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleDeleteResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[73].descriptor;
}

const AuthRoleDeleteResponse& AuthRoleDeleteResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleDeleteResponse* AuthRoleDeleteResponse::New(::google::protobuf::Arena* arena) const {
  AuthRoleDeleteResponse* n = new AuthRoleDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleDeleteResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthRoleDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleDeleteResponse)
  return false;
#undef DO_
}

void AuthRoleDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleDeleteResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleDeleteResponse)
}

::google::protobuf::uint8* AuthRoleDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleDeleteResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleDeleteResponse)
  return target;
}

size_t AuthRoleDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleDeleteResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleDeleteResponse)
    MergeFrom(*source);
  }
}

void AuthRoleDeleteResponse::MergeFrom(const AuthRoleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthRoleDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleDeleteResponse::CopyFrom(const AuthRoleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleDeleteResponse::IsInitialized() const {
  return true;
}

void AuthRoleDeleteResponse::Swap(AuthRoleDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleDeleteResponse::InternalSwap(AuthRoleDeleteResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleDeleteResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[73];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleDeleteResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthRoleDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthRoleDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthRoleDeleteResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleDeleteResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthRoleDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleDeleteResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthRoleDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleDeleteResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthRoleDeleteResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleDeleteResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleGrantPermissionResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGrantPermissionResponse)
}
AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse(const AuthRoleGrantPermissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGrantPermissionResponse)
}

void AuthRoleGrantPermissionResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthRoleGrantPermissionResponse::~AuthRoleGrantPermissionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGrantPermissionResponse)
  SharedDtor();
}

void AuthRoleGrantPermissionResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthRoleGrantPermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleGrantPermissionResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[74].descriptor;
}

const AuthRoleGrantPermissionResponse& AuthRoleGrantPermissionResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleGrantPermissionResponse* AuthRoleGrantPermissionResponse::New(::google::protobuf::Arena* arena) const {
  AuthRoleGrantPermissionResponse* n = new AuthRoleGrantPermissionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleGrantPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthRoleGrantPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleGrantPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleGrantPermissionResponse)
  return false;
#undef DO_
}

void AuthRoleGrantPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleGrantPermissionResponse)
}

::google::protobuf::uint8* AuthRoleGrantPermissionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGrantPermissionResponse)
  return target;
}

size_t AuthRoleGrantPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleGrantPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGrantPermissionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleGrantPermissionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGrantPermissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGrantPermissionResponse)
    MergeFrom(*source);
  }
}

void AuthRoleGrantPermissionResponse::MergeFrom(const AuthRoleGrantPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthRoleGrantPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGrantPermissionResponse::CopyFrom(const AuthRoleGrantPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGrantPermissionResponse::IsInitialized() const {
  return true;
}

void AuthRoleGrantPermissionResponse::Swap(AuthRoleGrantPermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleGrantPermissionResponse::InternalSwap(AuthRoleGrantPermissionResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleGrantPermissionResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[74];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleGrantPermissionResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthRoleGrantPermissionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthRoleGrantPermissionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthRoleGrantPermissionResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGrantPermissionResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthRoleGrantPermissionResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGrantPermissionResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthRoleGrantPermissionResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGrantPermissionResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthRoleGrantPermissionResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGrantPermissionResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRoleRevokePermissionResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleRevokePermissionResponse)
}
AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse(const AuthRoleRevokePermissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleRevokePermissionResponse)
}

void AuthRoleRevokePermissionResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AuthRoleRevokePermissionResponse::~AuthRoleRevokePermissionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleRevokePermissionResponse)
  SharedDtor();
}

void AuthRoleRevokePermissionResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AuthRoleRevokePermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRoleRevokePermissionResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[75].descriptor;
}

const AuthRoleRevokePermissionResponse& AuthRoleRevokePermissionResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRoleRevokePermissionResponse* AuthRoleRevokePermissionResponse::New(::google::protobuf::Arena* arena) const {
  AuthRoleRevokePermissionResponse* n = new AuthRoleRevokePermissionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRoleRevokePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AuthRoleRevokePermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etcdserverpb.AuthRoleRevokePermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etcdserverpb.AuthRoleRevokePermissionResponse)
  return false;
#undef DO_
}

void AuthRoleRevokePermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:etcdserverpb.AuthRoleRevokePermissionResponse)
}

::google::protobuf::uint8* AuthRoleRevokePermissionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleRevokePermissionResponse)
  return target;
}

size_t AuthRoleRevokePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  size_t total_size = 0;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRoleRevokePermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleRevokePermissionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRoleRevokePermissionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleRevokePermissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleRevokePermissionResponse)
    MergeFrom(*source);
  }
}

void AuthRoleRevokePermissionResponse::MergeFrom(const AuthRoleRevokePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AuthRoleRevokePermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleRevokePermissionResponse::CopyFrom(const AuthRoleRevokePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleRevokePermissionResponse::IsInitialized() const {
  return true;
}

void AuthRoleRevokePermissionResponse::Swap(AuthRoleRevokePermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRoleRevokePermissionResponse::InternalSwap(AuthRoleRevokePermissionResponse* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRoleRevokePermissionResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[75];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRoleRevokePermissionResponse

// .etcdserverpb.ResponseHeader header = 1;
bool AuthRoleRevokePermissionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AuthRoleRevokePermissionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::etcdserverpb::ResponseHeader& AuthRoleRevokePermissionResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionResponse.header)
  return header_ != NULL ? *header_
                         : *::etcdserverpb::ResponseHeader::internal_default_instance();
}
::etcdserverpb::ResponseHeader* AuthRoleRevokePermissionResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionResponse.header)
  return header_;
}
::etcdserverpb::ResponseHeader* AuthRoleRevokePermissionResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AuthRoleRevokePermissionResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace etcdserverpb

// @@protoc_insertion_point(global_scope)
