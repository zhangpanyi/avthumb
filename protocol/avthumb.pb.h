// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avthumb.proto

#ifndef PROTOBUF_INCLUDED_avthumb_2eproto
#define PROTOBUF_INCLUDED_avthumb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_avthumb_2eproto 

namespace protobuf_avthumb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_avthumb_2eproto
namespace avthumb {
class AudioPreviewReply;
class AudioPreviewReplyDefaultTypeInternal;
extern AudioPreviewReplyDefaultTypeInternal _AudioPreviewReply_default_instance_;
class AudioPreviewRequest;
class AudioPreviewRequestDefaultTypeInternal;
extern AudioPreviewRequestDefaultTypeInternal _AudioPreviewRequest_default_instance_;
class CompressImageReply;
class CompressImageReplyDefaultTypeInternal;
extern CompressImageReplyDefaultTypeInternal _CompressImageReply_default_instance_;
class CompressImageRequest;
class CompressImageRequestDefaultTypeInternal;
extern CompressImageRequestDefaultTypeInternal _CompressImageRequest_default_instance_;
class ConstraintReply;
class ConstraintReplyDefaultTypeInternal;
extern ConstraintReplyDefaultTypeInternal _ConstraintReply_default_instance_;
class ConstraintRequest;
class ConstraintRequestDefaultTypeInternal;
extern ConstraintRequestDefaultTypeInternal _ConstraintRequest_default_instance_;
class ResizeReply;
class ResizeReplyDefaultTypeInternal;
extern ResizeReplyDefaultTypeInternal _ResizeReply_default_instance_;
class ResizeRequest;
class ResizeRequestDefaultTypeInternal;
extern ResizeRequestDefaultTypeInternal _ResizeRequest_default_instance_;
class VideoPreviewReply;
class VideoPreviewReplyDefaultTypeInternal;
extern VideoPreviewReplyDefaultTypeInternal _VideoPreviewReply_default_instance_;
class VideoPreviewRequest;
class VideoPreviewRequestDefaultTypeInternal;
extern VideoPreviewRequestDefaultTypeInternal _VideoPreviewRequest_default_instance_;
}  // namespace avthumb
namespace google {
namespace protobuf {
template<> ::avthumb::AudioPreviewReply* Arena::CreateMaybeMessage<::avthumb::AudioPreviewReply>(Arena*);
template<> ::avthumb::AudioPreviewRequest* Arena::CreateMaybeMessage<::avthumb::AudioPreviewRequest>(Arena*);
template<> ::avthumb::CompressImageReply* Arena::CreateMaybeMessage<::avthumb::CompressImageReply>(Arena*);
template<> ::avthumb::CompressImageRequest* Arena::CreateMaybeMessage<::avthumb::CompressImageRequest>(Arena*);
template<> ::avthumb::ConstraintReply* Arena::CreateMaybeMessage<::avthumb::ConstraintReply>(Arena*);
template<> ::avthumb::ConstraintRequest* Arena::CreateMaybeMessage<::avthumb::ConstraintRequest>(Arena*);
template<> ::avthumb::ResizeReply* Arena::CreateMaybeMessage<::avthumb::ResizeReply>(Arena*);
template<> ::avthumb::ResizeRequest* Arena::CreateMaybeMessage<::avthumb::ResizeRequest>(Arena*);
template<> ::avthumb::VideoPreviewReply* Arena::CreateMaybeMessage<::avthumb::VideoPreviewReply>(Arena*);
template<> ::avthumb::VideoPreviewRequest* Arena::CreateMaybeMessage<::avthumb::VideoPreviewRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace avthumb {

enum StatusCode {
  StatusCodeOK = 0,
  StatusCodeFail = 1,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = StatusCodeOK;
const StatusCode StatusCode_MAX = StatusCodeFail;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class ResizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.ResizeRequest) */ {
 public:
  ResizeRequest();
  virtual ~ResizeRequest();

  ResizeRequest(const ResizeRequest& from);

  inline ResizeRequest& operator=(const ResizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResizeRequest(ResizeRequest&& from) noexcept
    : ResizeRequest() {
    *this = ::std::move(from);
  }

  inline ResizeRequest& operator=(ResizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeRequest* internal_default_instance() {
    return reinterpret_cast<const ResizeRequest*>(
               &_ResizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ResizeRequest* other);
  friend void swap(ResizeRequest& a, ResizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResizeRequest* New() const final {
    return CreateMaybeMessage<ResizeRequest>(NULL);
  }

  ResizeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResizeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResizeRequest& from);
  void MergeFrom(const ResizeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.ResizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResizeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.ResizeReply) */ {
 public:
  ResizeReply();
  virtual ~ResizeReply();

  ResizeReply(const ResizeReply& from);

  inline ResizeReply& operator=(const ResizeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResizeReply(ResizeReply&& from) noexcept
    : ResizeReply() {
    *this = ::std::move(from);
  }

  inline ResizeReply& operator=(ResizeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeReply* internal_default_instance() {
    return reinterpret_cast<const ResizeReply*>(
               &_ResizeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ResizeReply* other);
  friend void swap(ResizeReply& a, ResizeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResizeReply* New() const final {
    return CreateMaybeMessage<ResizeReply>(NULL);
  }

  ResizeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResizeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResizeReply& from);
  void MergeFrom(const ResizeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .avthumb.StatusCode status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::avthumb::StatusCode status() const;
  void set_status(::avthumb::StatusCode value);

  // @@protoc_insertion_point(class_scope:avthumb.ResizeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConstraintRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.ConstraintRequest) */ {
 public:
  ConstraintRequest();
  virtual ~ConstraintRequest();

  ConstraintRequest(const ConstraintRequest& from);

  inline ConstraintRequest& operator=(const ConstraintRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConstraintRequest(ConstraintRequest&& from) noexcept
    : ConstraintRequest() {
    *this = ::std::move(from);
  }

  inline ConstraintRequest& operator=(ConstraintRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstraintRequest* internal_default_instance() {
    return reinterpret_cast<const ConstraintRequest*>(
               &_ConstraintRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConstraintRequest* other);
  friend void swap(ConstraintRequest& a, ConstraintRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConstraintRequest* New() const final {
    return CreateMaybeMessage<ConstraintRequest>(NULL);
  }

  ConstraintRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConstraintRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConstraintRequest& from);
  void MergeFrom(const ConstraintRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 max_size = 2;
  void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  ::google::protobuf::uint32 max_size() const;
  void set_max_size(::google::protobuf::uint32 value);

  // bool output_webp = 3;
  void clear_output_webp();
  static const int kOutputWebpFieldNumber = 3;
  bool output_webp() const;
  void set_output_webp(bool value);

  // @@protoc_insertion_point(class_scope:avthumb.ConstraintRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 max_size_;
  bool output_webp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConstraintReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.ConstraintReply) */ {
 public:
  ConstraintReply();
  virtual ~ConstraintReply();

  ConstraintReply(const ConstraintReply& from);

  inline ConstraintReply& operator=(const ConstraintReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConstraintReply(ConstraintReply&& from) noexcept
    : ConstraintReply() {
    *this = ::std::move(from);
  }

  inline ConstraintReply& operator=(ConstraintReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstraintReply* internal_default_instance() {
    return reinterpret_cast<const ConstraintReply*>(
               &_ConstraintReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConstraintReply* other);
  friend void swap(ConstraintReply& a, ConstraintReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConstraintReply* New() const final {
    return CreateMaybeMessage<ConstraintReply>(NULL);
  }

  ConstraintReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConstraintReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConstraintReply& from);
  void MergeFrom(const ConstraintReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .avthumb.StatusCode status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::avthumb::StatusCode status() const;
  void set_status(::avthumb::StatusCode value);

  // uint32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 origin_width = 5;
  void clear_origin_width();
  static const int kOriginWidthFieldNumber = 5;
  ::google::protobuf::uint32 origin_width() const;
  void set_origin_width(::google::protobuf::uint32 value);

  // uint32 origin_height = 6;
  void clear_origin_height();
  static const int kOriginHeightFieldNumber = 6;
  ::google::protobuf::uint32 origin_height() const;
  void set_origin_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.ConstraintReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int status_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 origin_width_;
  ::google::protobuf::uint32 origin_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.CompressImageRequest) */ {
 public:
  CompressImageRequest();
  virtual ~CompressImageRequest();

  CompressImageRequest(const CompressImageRequest& from);

  inline CompressImageRequest& operator=(const CompressImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompressImageRequest(CompressImageRequest&& from) noexcept
    : CompressImageRequest() {
    *this = ::std::move(from);
  }

  inline CompressImageRequest& operator=(CompressImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressImageRequest* internal_default_instance() {
    return reinterpret_cast<const CompressImageRequest*>(
               &_CompressImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CompressImageRequest* other);
  friend void swap(CompressImageRequest& a, CompressImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompressImageRequest* New() const final {
    return CreateMaybeMessage<CompressImageRequest>(NULL);
  }

  CompressImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompressImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompressImageRequest& from);
  void MergeFrom(const CompressImageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 quality = 2;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  ::google::protobuf::uint32 quality() const;
  void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.CompressImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 quality_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressImageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.CompressImageReply) */ {
 public:
  CompressImageReply();
  virtual ~CompressImageReply();

  CompressImageReply(const CompressImageReply& from);

  inline CompressImageReply& operator=(const CompressImageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompressImageReply(CompressImageReply&& from) noexcept
    : CompressImageReply() {
    *this = ::std::move(from);
  }

  inline CompressImageReply& operator=(CompressImageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressImageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressImageReply* internal_default_instance() {
    return reinterpret_cast<const CompressImageReply*>(
               &_CompressImageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CompressImageReply* other);
  friend void swap(CompressImageReply& a, CompressImageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompressImageReply* New() const final {
    return CreateMaybeMessage<CompressImageReply>(NULL);
  }

  CompressImageReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompressImageReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompressImageReply& from);
  void MergeFrom(const CompressImageReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressImageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .avthumb.StatusCode status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::avthumb::StatusCode status() const;
  void set_status(::avthumb::StatusCode value);

  // @@protoc_insertion_point(class_scope:avthumb.CompressImageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoPreviewRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.VideoPreviewRequest) */ {
 public:
  VideoPreviewRequest();
  virtual ~VideoPreviewRequest();

  VideoPreviewRequest(const VideoPreviewRequest& from);

  inline VideoPreviewRequest& operator=(const VideoPreviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoPreviewRequest(VideoPreviewRequest&& from) noexcept
    : VideoPreviewRequest() {
    *this = ::std::move(from);
  }

  inline VideoPreviewRequest& operator=(VideoPreviewRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoPreviewRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoPreviewRequest* internal_default_instance() {
    return reinterpret_cast<const VideoPreviewRequest*>(
               &_VideoPreviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(VideoPreviewRequest* other);
  friend void swap(VideoPreviewRequest& a, VideoPreviewRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoPreviewRequest* New() const final {
    return CreateMaybeMessage<VideoPreviewRequest>(NULL);
  }

  VideoPreviewRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoPreviewRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoPreviewRequest& from);
  void MergeFrom(const VideoPreviewRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoPreviewRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 max_size = 2;
  void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  ::google::protobuf::uint32 max_size() const;
  void set_max_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.VideoPreviewRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 max_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoPreviewReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.VideoPreviewReply) */ {
 public:
  VideoPreviewReply();
  virtual ~VideoPreviewReply();

  VideoPreviewReply(const VideoPreviewReply& from);

  inline VideoPreviewReply& operator=(const VideoPreviewReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoPreviewReply(VideoPreviewReply&& from) noexcept
    : VideoPreviewReply() {
    *this = ::std::move(from);
  }

  inline VideoPreviewReply& operator=(VideoPreviewReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoPreviewReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoPreviewReply* internal_default_instance() {
    return reinterpret_cast<const VideoPreviewReply*>(
               &_VideoPreviewReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(VideoPreviewReply* other);
  friend void swap(VideoPreviewReply& a, VideoPreviewReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoPreviewReply* New() const final {
    return CreateMaybeMessage<VideoPreviewReply>(NULL);
  }

  VideoPreviewReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoPreviewReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoPreviewReply& from);
  void MergeFrom(const VideoPreviewReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoPreviewReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes preview = 3;
  void clear_preview();
  static const int kPreviewFieldNumber = 3;
  const ::std::string& preview() const;
  void set_preview(const ::std::string& value);
  #if LANG_CXX11
  void set_preview(::std::string&& value);
  #endif
  void set_preview(const char* value);
  void set_preview(const void* value, size_t size);
  ::std::string* mutable_preview();
  ::std::string* release_preview();
  void set_allocated_preview(::std::string* preview);

  // .avthumb.StatusCode status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::avthumb::StatusCode status() const;
  void set_status(::avthumb::StatusCode value);

  // uint32 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.VideoPreviewReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr preview_;
  int status_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioPreviewRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.AudioPreviewRequest) */ {
 public:
  AudioPreviewRequest();
  virtual ~AudioPreviewRequest();

  AudioPreviewRequest(const AudioPreviewRequest& from);

  inline AudioPreviewRequest& operator=(const AudioPreviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioPreviewRequest(AudioPreviewRequest&& from) noexcept
    : AudioPreviewRequest() {
    *this = ::std::move(from);
  }

  inline AudioPreviewRequest& operator=(AudioPreviewRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioPreviewRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioPreviewRequest* internal_default_instance() {
    return reinterpret_cast<const AudioPreviewRequest*>(
               &_AudioPreviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AudioPreviewRequest* other);
  friend void swap(AudioPreviewRequest& a, AudioPreviewRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioPreviewRequest* New() const final {
    return CreateMaybeMessage<AudioPreviewRequest>(NULL);
  }

  AudioPreviewRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioPreviewRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioPreviewRequest& from);
  void MergeFrom(const AudioPreviewRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioPreviewRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 max_size = 2;
  void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  ::google::protobuf::uint32 max_size() const;
  void set_max_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.AudioPreviewRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 max_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioPreviewReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:avthumb.AudioPreviewReply) */ {
 public:
  AudioPreviewReply();
  virtual ~AudioPreviewReply();

  AudioPreviewReply(const AudioPreviewReply& from);

  inline AudioPreviewReply& operator=(const AudioPreviewReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioPreviewReply(AudioPreviewReply&& from) noexcept
    : AudioPreviewReply() {
    *this = ::std::move(from);
  }

  inline AudioPreviewReply& operator=(AudioPreviewReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioPreviewReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioPreviewReply* internal_default_instance() {
    return reinterpret_cast<const AudioPreviewReply*>(
               &_AudioPreviewReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AudioPreviewReply* other);
  friend void swap(AudioPreviewReply& a, AudioPreviewReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioPreviewReply* New() const final {
    return CreateMaybeMessage<AudioPreviewReply>(NULL);
  }

  AudioPreviewReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioPreviewReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioPreviewReply& from);
  void MergeFrom(const AudioPreviewReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioPreviewReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cover = 3;
  void clear_cover();
  static const int kCoverFieldNumber = 3;
  const ::std::string& cover() const;
  void set_cover(const ::std::string& value);
  #if LANG_CXX11
  void set_cover(::std::string&& value);
  #endif
  void set_cover(const char* value);
  void set_cover(const void* value, size_t size);
  ::std::string* mutable_cover();
  ::std::string* release_cover();
  void set_allocated_cover(::std::string* cover);

  // string title = 4;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string artist = 5;
  void clear_artist();
  static const int kArtistFieldNumber = 5;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // .avthumb.StatusCode status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::avthumb::StatusCode status() const;
  void set_status(::avthumb::StatusCode value);

  // uint32 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // uint32 width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:avthumb.AudioPreviewReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cover_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  int status_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_avthumb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResizeRequest

// bytes data = 1;
inline void ResizeRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResizeRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeRequest.data)
  return data_.GetNoArena();
}
inline void ResizeRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ResizeRequest.data)
}
#if LANG_CXX11
inline void ResizeRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ResizeRequest.data)
}
#endif
inline void ResizeRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ResizeRequest.data)
}
inline void ResizeRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ResizeRequest.data)
}
inline ::std::string* ResizeRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ResizeRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResizeRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ResizeRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResizeRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ResizeRequest.data)
}

// uint32 width = 2;
inline void ResizeRequest::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 ResizeRequest::width() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeRequest.width)
  return width_;
}
inline void ResizeRequest::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ResizeRequest.width)
}

// uint32 height = 3;
inline void ResizeRequest::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 ResizeRequest::height() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeRequest.height)
  return height_;
}
inline void ResizeRequest::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ResizeRequest.height)
}

// -------------------------------------------------------------------

// ResizeReply

// .avthumb.StatusCode status = 1;
inline void ResizeReply::clear_status() {
  status_ = 0;
}
inline ::avthumb::StatusCode ResizeReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
inline void ResizeReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ResizeReply.status)
}

// bytes data = 2;
inline void ResizeReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResizeReply::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ResizeReply.data)
  return data_.GetNoArena();
}
inline void ResizeReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ResizeReply.data)
}
#if LANG_CXX11
inline void ResizeReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ResizeReply.data)
}
#endif
inline void ResizeReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ResizeReply.data)
}
inline void ResizeReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ResizeReply.data)
}
inline ::std::string* ResizeReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ResizeReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResizeReply::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ResizeReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResizeReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ResizeReply.data)
}

// -------------------------------------------------------------------

// ConstraintRequest

// bytes data = 1;
inline void ConstraintRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConstraintRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintRequest.data)
  return data_.GetNoArena();
}
inline void ConstraintRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ConstraintRequest.data)
}
#if LANG_CXX11
inline void ConstraintRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ConstraintRequest.data)
}
#endif
inline void ConstraintRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ConstraintRequest.data)
}
inline void ConstraintRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ConstraintRequest.data)
}
inline ::std::string* ConstraintRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ConstraintRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConstraintRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ConstraintRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConstraintRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ConstraintRequest.data)
}

// uint32 max_size = 2;
inline void ConstraintRequest::clear_max_size() {
  max_size_ = 0u;
}
inline ::google::protobuf::uint32 ConstraintRequest::max_size() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintRequest.max_size)
  return max_size_;
}
inline void ConstraintRequest::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintRequest.max_size)
}

// bool output_webp = 3;
inline void ConstraintRequest::clear_output_webp() {
  output_webp_ = false;
}
inline bool ConstraintRequest::output_webp() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintRequest.output_webp)
  return output_webp_;
}
inline void ConstraintRequest::set_output_webp(bool value) {
  
  output_webp_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintRequest.output_webp)
}

// -------------------------------------------------------------------

// ConstraintReply

// .avthumb.StatusCode status = 1;
inline void ConstraintReply::clear_status() {
  status_ = 0;
}
inline ::avthumb::StatusCode ConstraintReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
inline void ConstraintReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.status)
}

// bytes data = 2;
inline void ConstraintReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConstraintReply::data() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.data)
  return data_.GetNoArena();
}
inline void ConstraintReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.data)
}
#if LANG_CXX11
inline void ConstraintReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.ConstraintReply.data)
}
#endif
inline void ConstraintReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.ConstraintReply.data)
}
inline void ConstraintReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.ConstraintReply.data)
}
inline ::std::string* ConstraintReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.ConstraintReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConstraintReply::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.ConstraintReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConstraintReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.ConstraintReply.data)
}

// uint32 width = 3;
inline void ConstraintReply::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 ConstraintReply::width() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.width)
  return width_;
}
inline void ConstraintReply::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.width)
}

// uint32 height = 4;
inline void ConstraintReply::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 ConstraintReply::height() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.height)
  return height_;
}
inline void ConstraintReply::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.height)
}

// uint32 origin_width = 5;
inline void ConstraintReply::clear_origin_width() {
  origin_width_ = 0u;
}
inline ::google::protobuf::uint32 ConstraintReply::origin_width() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.origin_width)
  return origin_width_;
}
inline void ConstraintReply::set_origin_width(::google::protobuf::uint32 value) {
  
  origin_width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.origin_width)
}

// uint32 origin_height = 6;
inline void ConstraintReply::clear_origin_height() {
  origin_height_ = 0u;
}
inline ::google::protobuf::uint32 ConstraintReply::origin_height() const {
  // @@protoc_insertion_point(field_get:avthumb.ConstraintReply.origin_height)
  return origin_height_;
}
inline void ConstraintReply::set_origin_height(::google::protobuf::uint32 value) {
  
  origin_height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.ConstraintReply.origin_height)
}

// -------------------------------------------------------------------

// CompressImageRequest

// bytes data = 1;
inline void CompressImageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompressImageRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageRequest.data)
  return data_.GetNoArena();
}
inline void CompressImageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.CompressImageRequest.data)
}
#if LANG_CXX11
inline void CompressImageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.CompressImageRequest.data)
}
#endif
inline void CompressImageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.CompressImageRequest.data)
}
inline void CompressImageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.CompressImageRequest.data)
}
inline ::std::string* CompressImageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.CompressImageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompressImageRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.CompressImageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressImageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.CompressImageRequest.data)
}

// uint32 quality = 2;
inline void CompressImageRequest::clear_quality() {
  quality_ = 0u;
}
inline ::google::protobuf::uint32 CompressImageRequest::quality() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageRequest.quality)
  return quality_;
}
inline void CompressImageRequest::set_quality(::google::protobuf::uint32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:avthumb.CompressImageRequest.quality)
}

// -------------------------------------------------------------------

// CompressImageReply

// .avthumb.StatusCode status = 1;
inline void CompressImageReply::clear_status() {
  status_ = 0;
}
inline ::avthumb::StatusCode CompressImageReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
inline void CompressImageReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.CompressImageReply.status)
}

// bytes data = 2;
inline void CompressImageReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompressImageReply::data() const {
  // @@protoc_insertion_point(field_get:avthumb.CompressImageReply.data)
  return data_.GetNoArena();
}
inline void CompressImageReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.CompressImageReply.data)
}
#if LANG_CXX11
inline void CompressImageReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.CompressImageReply.data)
}
#endif
inline void CompressImageReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.CompressImageReply.data)
}
inline void CompressImageReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.CompressImageReply.data)
}
inline ::std::string* CompressImageReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.CompressImageReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompressImageReply::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.CompressImageReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressImageReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.CompressImageReply.data)
}

// -------------------------------------------------------------------

// VideoPreviewRequest

// bytes data = 1;
inline void VideoPreviewRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoPreviewRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewRequest.data)
  return data_.GetNoArena();
}
inline void VideoPreviewRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewRequest.data)
}
#if LANG_CXX11
inline void VideoPreviewRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.VideoPreviewRequest.data)
}
#endif
inline void VideoPreviewRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.VideoPreviewRequest.data)
}
inline void VideoPreviewRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.VideoPreviewRequest.data)
}
inline ::std::string* VideoPreviewRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.VideoPreviewRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoPreviewRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.VideoPreviewRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPreviewRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.VideoPreviewRequest.data)
}

// uint32 max_size = 2;
inline void VideoPreviewRequest::clear_max_size() {
  max_size_ = 0u;
}
inline ::google::protobuf::uint32 VideoPreviewRequest::max_size() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewRequest.max_size)
  return max_size_;
}
inline void VideoPreviewRequest::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewRequest.max_size)
}

// -------------------------------------------------------------------

// VideoPreviewReply

// .avthumb.StatusCode status = 1;
inline void VideoPreviewReply::clear_status() {
  status_ = 0;
}
inline ::avthumb::StatusCode VideoPreviewReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
inline void VideoPreviewReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.status)
}

// uint32 duration = 2;
inline void VideoPreviewReply::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 VideoPreviewReply::duration() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.duration)
  return duration_;
}
inline void VideoPreviewReply::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.duration)
}

// bytes preview = 3;
inline void VideoPreviewReply::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoPreviewReply::preview() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.preview)
  return preview_.GetNoArena();
}
inline void VideoPreviewReply::set_preview(const ::std::string& value) {
  
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.preview)
}
#if LANG_CXX11
inline void VideoPreviewReply::set_preview(::std::string&& value) {
  
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.VideoPreviewReply.preview)
}
#endif
inline void VideoPreviewReply::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.VideoPreviewReply.preview)
}
inline void VideoPreviewReply::set_preview(const void* value, size_t size) {
  
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.VideoPreviewReply.preview)
}
inline ::std::string* VideoPreviewReply::mutable_preview() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.VideoPreviewReply.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoPreviewReply::release_preview() {
  // @@protoc_insertion_point(field_release:avthumb.VideoPreviewReply.preview)
  
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPreviewReply::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    
  } else {
    
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:avthumb.VideoPreviewReply.preview)
}

// uint32 width = 4;
inline void VideoPreviewReply::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 VideoPreviewReply::width() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.width)
  return width_;
}
inline void VideoPreviewReply::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.width)
}

// uint32 height = 5;
inline void VideoPreviewReply::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 VideoPreviewReply::height() const {
  // @@protoc_insertion_point(field_get:avthumb.VideoPreviewReply.height)
  return height_;
}
inline void VideoPreviewReply::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.VideoPreviewReply.height)
}

// -------------------------------------------------------------------

// AudioPreviewRequest

// bytes data = 1;
inline void AudioPreviewRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioPreviewRequest::data() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewRequest.data)
  return data_.GetNoArena();
}
inline void AudioPreviewRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewRequest.data)
}
#if LANG_CXX11
inline void AudioPreviewRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewRequest.data)
}
#endif
inline void AudioPreviewRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewRequest.data)
}
inline void AudioPreviewRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewRequest.data)
}
inline ::std::string* AudioPreviewRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioPreviewRequest::release_data() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPreviewRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewRequest.data)
}

// uint32 max_size = 2;
inline void AudioPreviewRequest::clear_max_size() {
  max_size_ = 0u;
}
inline ::google::protobuf::uint32 AudioPreviewRequest::max_size() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewRequest.max_size)
  return max_size_;
}
inline void AudioPreviewRequest::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewRequest.max_size)
}

// -------------------------------------------------------------------

// AudioPreviewReply

// .avthumb.StatusCode status = 1;
inline void AudioPreviewReply::clear_status() {
  status_ = 0;
}
inline ::avthumb::StatusCode AudioPreviewReply::status() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.status)
  return static_cast< ::avthumb::StatusCode >(status_);
}
inline void AudioPreviewReply::set_status(::avthumb::StatusCode value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.status)
}

// uint32 duration = 2;
inline void AudioPreviewReply::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 AudioPreviewReply::duration() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.duration)
  return duration_;
}
inline void AudioPreviewReply::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.duration)
}

// bytes cover = 3;
inline void AudioPreviewReply::clear_cover() {
  cover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioPreviewReply::cover() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.cover)
  return cover_.GetNoArena();
}
inline void AudioPreviewReply::set_cover(const ::std::string& value) {
  
  cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.cover)
}
#if LANG_CXX11
inline void AudioPreviewReply::set_cover(::std::string&& value) {
  
  cover_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewReply.cover)
}
#endif
inline void AudioPreviewReply::set_cover(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewReply.cover)
}
inline void AudioPreviewReply::set_cover(const void* value, size_t size) {
  
  cover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewReply.cover)
}
inline ::std::string* AudioPreviewReply::mutable_cover() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewReply.cover)
  return cover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioPreviewReply::release_cover() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewReply.cover)
  
  return cover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPreviewReply::set_allocated_cover(::std::string* cover) {
  if (cover != NULL) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewReply.cover)
}

// string title = 4;
inline void AudioPreviewReply::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioPreviewReply::title() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.title)
  return title_.GetNoArena();
}
inline void AudioPreviewReply::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.title)
}
#if LANG_CXX11
inline void AudioPreviewReply::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewReply.title)
}
#endif
inline void AudioPreviewReply::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewReply.title)
}
inline void AudioPreviewReply::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewReply.title)
}
inline ::std::string* AudioPreviewReply::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewReply.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioPreviewReply::release_title() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewReply.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPreviewReply::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewReply.title)
}

// string artist = 5;
inline void AudioPreviewReply::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioPreviewReply::artist() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.artist)
  return artist_.GetNoArena();
}
inline void AudioPreviewReply::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.artist)
}
#if LANG_CXX11
inline void AudioPreviewReply::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avthumb.AudioPreviewReply.artist)
}
#endif
inline void AudioPreviewReply::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avthumb.AudioPreviewReply.artist)
}
inline void AudioPreviewReply::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avthumb.AudioPreviewReply.artist)
}
inline ::std::string* AudioPreviewReply::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:avthumb.AudioPreviewReply.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioPreviewReply::release_artist() {
  // @@protoc_insertion_point(field_release:avthumb.AudioPreviewReply.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPreviewReply::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:avthumb.AudioPreviewReply.artist)
}

// uint32 width = 6;
inline void AudioPreviewReply::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 AudioPreviewReply::width() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.width)
  return width_;
}
inline void AudioPreviewReply::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.width)
}

// uint32 height = 7;
inline void AudioPreviewReply::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 AudioPreviewReply::height() const {
  // @@protoc_insertion_point(field_get:avthumb.AudioPreviewReply.height)
  return height_;
}
inline void AudioPreviewReply::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:avthumb.AudioPreviewReply.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace avthumb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::avthumb::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::avthumb::StatusCode>() {
  return ::avthumb::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_avthumb_2eproto
